/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [23]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(23)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.Quobyte == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.Cinder == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.CephFS == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Flocker == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.FC == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.AzureFile == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym127 := z.DecBinary()
	_ = yym127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct128 := r.ContainerType()
		if yyct128 == codecSelferValueTypeMap1234 {
			yyl128 := r.ReadMapStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl128, d)
			}
		} else if yyct128 == codecSelferValueTypeArray1234 {
			yyl128 := r.ReadArrayStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys129Slc
	var yyhl129 bool = l >= 0
	for yyj129 := 0; ; yyj129++ {
		if yyhl129 {
			if yyj129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys129Slc = r.DecodeBytes(yys129Slc, true, true)
		yys129 := string(yys129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys129 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys129)
		} // end switch yys129
	} // end for yyj129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj153 int
	var yyb153 bool
	var yyhl153 bool = l >= 0
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj153++
		if yyhl153 {
			yyb153 = yyj153 > l
		} else {
			yyb153 = r.CheckBreak()
		}
		if yyb153 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj153-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym177 := z.EncBinary()
		_ = yym177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep178 := !z.EncBinary()
			yy2arr178 := z.EncBasicHandle().StructToArray
			var yyq178 [22]bool
			_, _, _ = yysep178, yyq178, yy2arr178
			const yyr178 bool = false
			yyq178[0] = x.HostPath != nil
			yyq178[1] = x.EmptyDir != nil
			yyq178[2] = x.GCEPersistentDisk != nil
			yyq178[3] = x.AWSElasticBlockStore != nil
			yyq178[4] = x.GitRepo != nil
			yyq178[5] = x.Secret != nil
			yyq178[6] = x.NFS != nil
			yyq178[7] = x.ISCSI != nil
			yyq178[8] = x.Glusterfs != nil
			yyq178[9] = x.PersistentVolumeClaim != nil
			yyq178[10] = x.RBD != nil
			yyq178[11] = x.Quobyte != nil
			yyq178[12] = x.FlexVolume != nil
			yyq178[13] = x.Cinder != nil
			yyq178[14] = x.CephFS != nil
			yyq178[15] = x.Flocker != nil
			yyq178[16] = x.DownwardAPI != nil
			yyq178[17] = x.FC != nil
			yyq178[18] = x.AzureFile != nil
			yyq178[19] = x.ConfigMap != nil
			yyq178[20] = x.VsphereVolume != nil
			yyq178[21] = x.AzureDisk != nil
			var yynn178 int
			if yyr178 || yy2arr178 {
				r.EncodeArrayStart(22)
			} else {
				yynn178 = 0
				for _, b := range yyq178 {
					if b {
						yynn178++
					}
				}
				r.EncodeMapStart(yynn178)
				yynn178 = 0
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym201 := z.DecBinary()
	_ = yym201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct202 := r.ContainerType()
		if yyct202 == codecSelferValueTypeMap1234 {
			yyl202 := r.ReadMapStart()
			if yyl202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl202, d)
			}
		} else if yyct202 == codecSelferValueTypeArray1234 {
			yyl202 := r.ReadArrayStart()
			if yyl202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys203Slc
	var yyhl203 bool = l >= 0
	for yyj203 := 0; ; yyj203++ {
		if yyhl203 {
			if yyj203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys203Slc = r.DecodeBytes(yys203Slc, true, true)
		yys203 := string(yys203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys203 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys203)
		} // end switch yys203
	} // end for yyj203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj226 int
	var yyb226 bool
	var yyhl226 bool = l >= 0
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj226++
		if yyhl226 {
			yyb226 = yyj226 > l
		} else {
			yyb226 = r.CheckBreak()
		}
		if yyb226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [16]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.GCEPersistentDisk != nil
			yyq250[1] = x.AWSElasticBlockStore != nil
			yyq250[2] = x.HostPath != nil
			yyq250[3] = x.Glusterfs != nil
			yyq250[4] = x.NFS != nil
			yyq250[5] = x.RBD != nil
			yyq250[6] = x.Quobyte != nil
			yyq250[7] = x.ISCSI != nil
			yyq250[8] = x.FlexVolume != nil
			yyq250[9] = x.Cinder != nil
			yyq250[10] = x.CephFS != nil
			yyq250[11] = x.FC != nil
			yyq250[12] = x.Flocker != nil
			yyq250[13] = x.AzureFile != nil
			yyq250[14] = x.VsphereVolume != nil
			yyq250[15] = x.AzureDisk != nil
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(16)
			} else {
				yynn250 = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym267 := z.DecBinary()
	_ = yym267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct268 := r.ContainerType()
		if yyct268 == codecSelferValueTypeMap1234 {
			yyl268 := r.ReadMapStart()
			if yyl268 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl268, d)
			}
		} else if yyct268 == codecSelferValueTypeArray1234 {
			yyl268 := r.ReadArrayStart()
			if yyl268 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl268, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys269Slc
	var yyhl269 bool = l >= 0
	for yyj269 := 0; ; yyj269++ {
		if yyhl269 {
			if yyj269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys269Slc = r.DecodeBytes(yys269Slc, true, true)
		yys269 := string(yys269Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys269 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys269)
		} // end switch yys269
	} // end for yyj269
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj286 int
	var yyb286 bool
	var yyhl286 bool = l >= 0
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj286++
		if yyhl286 {
			yyb286 = yyj286 > l
		} else {
			yyb286 = r.CheckBreak()
		}
		if yyb286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym303 := z.EncBinary()
		_ = yym303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep304 := !z.EncBinary()
			yy2arr304 := z.EncBasicHandle().StructToArray
			var yyq304 [2]bool
			_, _, _ = yysep304, yyq304, yy2arr304
			const yyr304 bool = false
			yyq304[1] = x.ReadOnly != false
			var yynn304 int
			if yyr304 || yy2arr304 {
				r.EncodeArrayStart(2)
			} else {
				yynn304 = 1
				for _, b := range yyq304 {
					if b {
						yynn304++
					}
				}
				r.EncodeMapStart(yynn304)
				yynn304 = 0
			}
			if yyr304 || yy2arr304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym306 := z.EncBinary()
				_ = yym306
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym307 := z.EncBinary()
				_ = yym307
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr304 || yy2arr304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq304[1] {
					yym309 := z.EncBinary()
					_ = yym309
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym310 := z.EncBinary()
					_ = yym310
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr304 || yy2arr304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym311 := z.DecBinary()
	_ = yym311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct312 := r.ContainerType()
		if yyct312 == codecSelferValueTypeMap1234 {
			yyl312 := r.ReadMapStart()
			if yyl312 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl312, d)
			}
		} else if yyct312 == codecSelferValueTypeArray1234 {
			yyl312 := r.ReadArrayStart()
			if yyl312 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys313Slc
	var yyhl313 bool = l >= 0
	for yyj313 := 0; ; yyj313++ {
		if yyhl313 {
			if yyj313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys313Slc = r.DecodeBytes(yys313Slc, true, true)
		yys313 := string(yys313Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys313 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys313)
		} // end switch yys313
	} // end for yyj313
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj316 int
	var yyb316 bool
	var yyhl316 bool = l >= 0
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj316++
		if yyhl316 {
			yyb316 = yyj316 > l
		} else {
			yyb316 = r.CheckBreak()
		}
		if yyb316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym319 := z.EncBinary()
		_ = yym319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep320 := !z.EncBinary()
			yy2arr320 := z.EncBasicHandle().StructToArray
			var yyq320 [5]bool
			_, _, _ = yysep320, yyq320, yy2arr320
			const yyr320 bool = false
			yyq320[0] = x.Kind != ""
			yyq320[1] = x.APIVersion != ""
			yyq320[2] = true
			yyq320[3] = true
			yyq320[4] = true
			var yynn320 int
			if yyr320 || yy2arr320 {
				r.EncodeArrayStart(5)
			} else {
				yynn320 = 0
				for _, b := range yyq320 {
					if b {
						yynn320++
					}
				}
				r.EncodeMapStart(yynn320)
				yynn320 = 0
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[0] {
					yym322 := z.EncBinary()
					_ = yym322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym323 := z.EncBinary()
					_ = yym323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[1] {
					yym325 := z.EncBinary()
					_ = yym325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[2] {
					yy328 := &x.ObjectMeta
					yy328.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy329 := &x.ObjectMeta
					yy329.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[3] {
					yy331 := &x.Spec
					yy331.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy332 := &x.Spec
					yy332.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[4] {
					yy334 := &x.Status
					yy334.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy335 := &x.Status
					yy335.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct337 := r.ContainerType()
		if yyct337 == codecSelferValueTypeMap1234 {
			yyl337 := r.ReadMapStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl337, d)
			}
		} else if yyct337 == codecSelferValueTypeArray1234 {
			yyl337 := r.ReadArrayStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys338Slc
	var yyhl338 bool = l >= 0
	for yyj338 := 0; ; yyj338++ {
		if yyhl338 {
			if yyj338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys338Slc = r.DecodeBytes(yys338Slc, true, true)
		yys338 := string(yys338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys338 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv341 := &x.ObjectMeta
				yyv341.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv342 := &x.Spec
				yyv342.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv343 := &x.Status
				yyv343.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys338)
		} // end switch yys338
	} // end for yyj338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj344 int
	var yyb344 bool
	var yyhl344 bool = l >= 0
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv347 := &x.ObjectMeta
		yyv347.CodecDecodeSelf(d)
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv348 := &x.Spec
		yyv348.CodecDecodeSelf(d)
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv349 := &x.Status
		yyv349.CodecDecodeSelf(d)
	}
	for {
		yyj344++
		if yyhl344 {
			yyb344 = yyj344 > l
		} else {
			yyb344 = r.CheckBreak()
		}
		if yyb344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym350 := z.EncBinary()
		_ = yym350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep351 := !z.EncBinary()
			yy2arr351 := z.EncBasicHandle().StructToArray
			var yyq351 [20]bool
			_, _, _ = yysep351, yyq351, yy2arr351
			const yyr351 bool = false
			yyq351[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq351[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq351[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq351[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq351[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq351[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq351[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq351[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq351[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq351[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq351[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq351[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq351[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq351[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq351[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq351[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq351[17] = len(x.AccessModes) != 0
			yyq351[18] = x.ClaimRef != nil
			yyq351[19] = x.PersistentVolumeReclaimPolicy != ""
			var yynn351 int
			if yyr351 || yy2arr351 {
				r.EncodeArrayStart(20)
			} else {
				yynn351 = 1
				for _, b := range yyq351 {
					if b {
						yynn351++
					}
				}
				r.EncodeMapStart(yynn351)
				yynn351 = 0
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr351 || yy2arr351 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr351 || yy2arr351 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr351 || yy2arr351 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr351 || yy2arr351 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr351 || yy2arr351 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn358 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn358 = true
				goto LABEL358
			}
		LABEL358:
			if yyr351 || yy2arr351 {
				if yyn358 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn358 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn359 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn359 = true
				goto LABEL359
			}
		LABEL359:
			if yyr351 || yy2arr351 {
				if yyn359 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn359 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn360 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn360 = true
				goto LABEL360
			}
		LABEL360:
			if yyr351 || yy2arr351 {
				if yyn360 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn360 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn361 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn361 = true
				goto LABEL361
			}
		LABEL361:
			if yyr351 || yy2arr351 {
				if yyn361 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn361 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr351 || yy2arr351 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr351 || yy2arr351 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr351 || yy2arr351 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr351 || yy2arr351 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr351 || yy2arr351 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr351 || yy2arr351 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr351 || yy2arr351 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[17] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym370 := z.EncBinary()
						_ = yym370
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym371 := z.EncBinary()
						_ = yym371
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[18] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[19] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq351[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym374 := z.DecBinary()
	_ = yym374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct375 := r.ContainerType()
		if yyct375 == codecSelferValueTypeMap1234 {
			yyl375 := r.ReadMapStart()
			if yyl375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl375, d)
			}
		} else if yyct375 == codecSelferValueTypeArray1234 {
			yyl375 := r.ReadArrayStart()
			if yyl375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys376Slc
	var yyhl376 bool = l >= 0
	for yyj376 := 0; ; yyj376++ {
		if yyhl376 {
			if yyj376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys376Slc = r.DecodeBytes(yys376Slc, true, true)
		yys376 := string(yys376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys376 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv377 := &x.Capacity
				yyv377.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv394 := &x.AccessModes
				yym395 := z.DecBinary()
				_ = yym395
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv394), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys376)
		} // end switch yys376
	} // end for yyj376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj398 int
	var yyb398 bool
	var yyhl398 bool = l >= 0
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv399 := &x.Capacity
		yyv399.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv416 := &x.AccessModes
		yym417 := z.DecBinary()
		_ = yym417
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv416), d)
		}
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj398++
		if yyhl398 {
			yyb398 = yyj398 > l
		} else {
			yyb398 = r.CheckBreak()
		}
		if yyb398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym420 := z.EncBinary()
	_ = yym420
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym421 := z.DecBinary()
	_ = yym421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym422 := z.EncBinary()
		_ = yym422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep423 := !z.EncBinary()
			yy2arr423 := z.EncBasicHandle().StructToArray
			var yyq423 [3]bool
			_, _, _ = yysep423, yyq423, yy2arr423
			const yyr423 bool = false
			yyq423[0] = x.Phase != ""
			yyq423[1] = x.Message != ""
			yyq423[2] = x.Reason != ""
			var yynn423 int
			if yyr423 || yy2arr423 {
				r.EncodeArrayStart(3)
			} else {
				yynn423 = 0
				for _, b := range yyq423 {
					if b {
						yynn423++
					}
				}
				r.EncodeMapStart(yynn423)
				yynn423 = 0
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[1] {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[2] {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym431 := z.DecBinary()
	_ = yym431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct432 := r.ContainerType()
		if yyct432 == codecSelferValueTypeMap1234 {
			yyl432 := r.ReadMapStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl432, d)
			}
		} else if yyct432 == codecSelferValueTypeArray1234 {
			yyl432 := r.ReadArrayStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys433Slc
	var yyhl433 bool = l >= 0
	for yyj433 := 0; ; yyj433++ {
		if yyhl433 {
			if yyj433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys433Slc = r.DecodeBytes(yys433Slc, true, true)
		yys433 := string(yys433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys433 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys433)
		} // end switch yys433
	} // end for yyj433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym441 := z.EncBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep442 := !z.EncBinary()
			yy2arr442 := z.EncBasicHandle().StructToArray
			var yyq442 [4]bool
			_, _, _ = yysep442, yyq442, yy2arr442
			const yyr442 bool = false
			yyq442[0] = x.Kind != ""
			yyq442[1] = x.APIVersion != ""
			yyq442[2] = true
			var yynn442 int
			if yyr442 || yy2arr442 {
				r.EncodeArrayStart(4)
			} else {
				yynn442 = 1
				for _, b := range yyq442 {
					if b {
						yynn442++
					}
				}
				r.EncodeMapStart(yynn442)
				yynn442 = 0
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[0] {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[1] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[2] {
					yy450 := &x.ListMeta
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else if z.HasExtensions() && z.EncExt(yy450) {
					} else {
						z.EncFallback(yy450)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.ListMeta
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy452) {
					} else {
						z.EncFallback(yy452)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym455 := z.EncBinary()
					_ = yym455
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym457 := z.DecBinary()
	_ = yym457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct458 := r.ContainerType()
		if yyct458 == codecSelferValueTypeMap1234 {
			yyl458 := r.ReadMapStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl458, d)
			}
		} else if yyct458 == codecSelferValueTypeArray1234 {
			yyl458 := r.ReadArrayStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys459Slc
	var yyhl459 bool = l >= 0
	for yyj459 := 0; ; yyj459++ {
		if yyhl459 {
			if yyj459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys459Slc = r.DecodeBytes(yys459Slc, true, true)
		yys459 := string(yys459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys459 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv462 := &x.ListMeta
				yym463 := z.DecBinary()
				_ = yym463
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv462) {
				} else {
					z.DecFallback(yyv462, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv464 := &x.Items
				yym465 := z.DecBinary()
				_ = yym465
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv464), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys459)
		} // end switch yys459
	} // end for yyj459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj466 int
	var yyb466 bool
	var yyhl466 bool = l >= 0
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv469 := &x.ListMeta
		yym470 := z.DecBinary()
		_ = yym470
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv469) {
		} else {
			z.DecFallback(yyv469, false)
		}
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv471 := &x.Items
		yym472 := z.DecBinary()
		_ = yym472
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv471), d)
		}
	}
	for {
		yyj466++
		if yyhl466 {
			yyb466 = yyj466 > l
		} else {
			yyb466 = r.CheckBreak()
		}
		if yyb466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym473 := z.EncBinary()
		_ = yym473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep474 := !z.EncBinary()
			yy2arr474 := z.EncBasicHandle().StructToArray
			var yyq474 [5]bool
			_, _, _ = yysep474, yyq474, yy2arr474
			const yyr474 bool = false
			yyq474[0] = x.Kind != ""
			yyq474[1] = x.APIVersion != ""
			yyq474[2] = true
			yyq474[3] = true
			yyq474[4] = true
			var yynn474 int
			if yyr474 || yy2arr474 {
				r.EncodeArrayStart(5)
			} else {
				yynn474 = 0
				for _, b := range yyq474 {
					if b {
						yynn474++
					}
				}
				r.EncodeMapStart(yynn474)
				yynn474 = 0
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[0] {
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq474[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[1] {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq474[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[2] {
					yy482 := &x.ObjectMeta
					yy482.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy483 := &x.ObjectMeta
					yy483.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[3] {
					yy485 := &x.Spec
					yy485.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy486 := &x.Spec
					yy486.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[4] {
					yy488 := &x.Status
					yy488.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy489 := &x.Status
					yy489.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym490 := z.DecBinary()
	_ = yym490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct491 := r.ContainerType()
		if yyct491 == codecSelferValueTypeMap1234 {
			yyl491 := r.ReadMapStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl491, d)
			}
		} else if yyct491 == codecSelferValueTypeArray1234 {
			yyl491 := r.ReadArrayStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys492Slc
	var yyhl492 bool = l >= 0
	for yyj492 := 0; ; yyj492++ {
		if yyhl492 {
			if yyj492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys492Slc = r.DecodeBytes(yys492Slc, true, true)
		yys492 := string(yys492Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys492 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv495 := &x.ObjectMeta
				yyv495.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv496 := &x.Spec
				yyv496.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv497 := &x.Status
				yyv497.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys492)
		} // end switch yys492
	} // end for yyj492
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj498 int
	var yyb498 bool
	var yyhl498 bool = l >= 0
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv501 := &x.ObjectMeta
		yyv501.CodecDecodeSelf(d)
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv502 := &x.Spec
		yyv502.CodecDecodeSelf(d)
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv503 := &x.Status
		yyv503.CodecDecodeSelf(d)
	}
	for {
		yyj498++
		if yyhl498 {
			yyb498 = yyj498 > l
		} else {
			yyb498 = r.CheckBreak()
		}
		if yyb498 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj498-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym504 := z.EncBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep505 := !z.EncBinary()
			yy2arr505 := z.EncBasicHandle().StructToArray
			var yyq505 [4]bool
			_, _, _ = yysep505, yyq505, yy2arr505
			const yyr505 bool = false
			yyq505[0] = x.Kind != ""
			yyq505[1] = x.APIVersion != ""
			yyq505[2] = true
			var yynn505 int
			if yyr505 || yy2arr505 {
				r.EncodeArrayStart(4)
			} else {
				yynn505 = 1
				for _, b := range yyq505 {
					if b {
						yynn505++
					}
				}
				r.EncodeMapStart(yynn505)
				yynn505 = 0
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[0] {
					yym507 := z.EncBinary()
					_ = yym507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq505[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[1] {
					yym510 := z.EncBinary()
					_ = yym510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq505[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym511 := z.EncBinary()
					_ = yym511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[2] {
					yy513 := &x.ListMeta
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy513) {
					} else {
						z.EncFallback(yy513)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq505[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy515 := &x.ListMeta
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else if z.HasExtensions() && z.EncExt(yy515) {
					} else {
						z.EncFallback(yy515)
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym518 := z.EncBinary()
					_ = yym518
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct521 := r.ContainerType()
		if yyct521 == codecSelferValueTypeMap1234 {
			yyl521 := r.ReadMapStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl521, d)
			}
		} else if yyct521 == codecSelferValueTypeArray1234 {
			yyl521 := r.ReadArrayStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys522Slc
	var yyhl522 bool = l >= 0
	for yyj522 := 0; ; yyj522++ {
		if yyhl522 {
			if yyj522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys522Slc = r.DecodeBytes(yys522Slc, true, true)
		yys522 := string(yys522Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys522 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv525 := &x.ListMeta
				yym526 := z.DecBinary()
				_ = yym526
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv525) {
				} else {
					z.DecFallback(yyv525, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv527 := &x.Items
				yym528 := z.DecBinary()
				_ = yym528
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv527), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys522)
		} // end switch yys522
	} // end for yyj522
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj529 int
	var yyb529 bool
	var yyhl529 bool = l >= 0
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv532 := &x.ListMeta
		yym533 := z.DecBinary()
		_ = yym533
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv532) {
		} else {
			z.DecFallback(yyv532, false)
		}
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv534 := &x.Items
		yym535 := z.DecBinary()
		_ = yym535
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv534), d)
		}
	}
	for {
		yyj529++
		if yyhl529 {
			yyb529 = yyj529 > l
		} else {
			yyb529 = r.CheckBreak()
		}
		if yyb529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym536 := z.EncBinary()
		_ = yym536
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep537 := !z.EncBinary()
			yy2arr537 := z.EncBasicHandle().StructToArray
			var yyq537 [4]bool
			_, _, _ = yysep537, yyq537, yy2arr537
			const yyr537 bool = false
			yyq537[0] = len(x.AccessModes) != 0
			yyq537[1] = x.Selector != nil
			yyq537[2] = true
			yyq537[3] = x.VolumeName != ""
			var yynn537 int
			if yyr537 || yy2arr537 {
				r.EncodeArrayStart(4)
			} else {
				yynn537 = 0
				for _, b := range yyq537 {
					if b {
						yynn537++
					}
				}
				r.EncodeMapStart(yynn537)
				yynn537 = 0
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym539 := z.EncBinary()
						_ = yym539
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym540 := z.EncBinary()
						_ = yym540
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym542 := z.EncBinary()
						_ = yym542
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym543 := z.EncBinary()
						_ = yym543
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[2] {
					yy545 := &x.Resources
					yy545.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy546 := &x.Resources
					yy546.CodecEncodeSelf(e)
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[3] {
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq537[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym549 := z.EncBinary()
					_ = yym549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym550 := z.DecBinary()
	_ = yym550
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct551 := r.ContainerType()
		if yyct551 == codecSelferValueTypeMap1234 {
			yyl551 := r.ReadMapStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl551, d)
			}
		} else if yyct551 == codecSelferValueTypeArray1234 {
			yyl551 := r.ReadArrayStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl551, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys552Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys552Slc
	var yyhl552 bool = l >= 0
	for yyj552 := 0; ; yyj552++ {
		if yyhl552 {
			if yyj552 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys552Slc = r.DecodeBytes(yys552Slc, true, true)
		yys552 := string(yys552Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys552 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv553 := &x.AccessModes
				yym554 := z.DecBinary()
				_ = yym554
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv553), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym556 := z.DecBinary()
				_ = yym556
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv557 := &x.Resources
				yyv557.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys552)
		} // end switch yys552
	} // end for yyj552
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj559 int
	var yyb559 bool
	var yyhl559 bool = l >= 0
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv560 := &x.AccessModes
		yym561 := z.DecBinary()
		_ = yym561
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv560), d)
		}
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym563 := z.DecBinary()
		_ = yym563
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv564 := &x.Resources
		yyv564.CodecDecodeSelf(d)
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj559++
		if yyhl559 {
			yyb559 = yyj559 > l
		} else {
			yyb559 = r.CheckBreak()
		}
		if yyb559 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj559-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym566 := z.EncBinary()
		_ = yym566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep567 := !z.EncBinary()
			yy2arr567 := z.EncBasicHandle().StructToArray
			var yyq567 [3]bool
			_, _, _ = yysep567, yyq567, yy2arr567
			const yyr567 bool = false
			yyq567[0] = x.Phase != ""
			yyq567[1] = len(x.AccessModes) != 0
			yyq567[2] = len(x.Capacity) != 0
			var yynn567 int
			if yyr567 || yy2arr567 {
				r.EncodeArrayStart(3)
			} else {
				yynn567 = 0
				for _, b := range yyq567 {
					if b {
						yynn567++
					}
				}
				r.EncodeMapStart(yynn567)
				yynn567 = 0
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq567[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym570 := z.EncBinary()
						_ = yym570
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq567[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym571 := z.EncBinary()
						_ = yym571
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq567[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct574 := r.ContainerType()
		if yyct574 == codecSelferValueTypeMap1234 {
			yyl574 := r.ReadMapStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl574, d)
			}
		} else if yyct574 == codecSelferValueTypeArray1234 {
			yyl574 := r.ReadArrayStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys575Slc
	var yyhl575 bool = l >= 0
	for yyj575 := 0; ; yyj575++ {
		if yyhl575 {
			if yyj575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys575Slc = r.DecodeBytes(yys575Slc, true, true)
		yys575 := string(yys575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys575 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv577 := &x.AccessModes
				yym578 := z.DecBinary()
				_ = yym578
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv579 := &x.Capacity
				yyv579.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys575)
		} // end switch yys575
	} // end for yyj575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj580 int
	var yyb580 bool
	var yyhl580 bool = l >= 0
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv582 := &x.AccessModes
		yym583 := z.DecBinary()
		_ = yym583
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv582), d)
		}
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv584 := &x.Capacity
		yyv584.CodecDecodeSelf(d)
	}
	for {
		yyj580++
		if yyhl580 {
			yyb580 = yyj580 > l
		} else {
			yyb580 = r.CheckBreak()
		}
		if yyb580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym585 := z.EncBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym586 := z.DecBinary()
	_ = yym586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym587 := z.EncBinary()
	_ = yym587
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym588 := z.DecBinary()
	_ = yym588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym589 := z.EncBinary()
	_ = yym589
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym590 := z.DecBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym591 := z.EncBinary()
		_ = yym591
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep592 := !z.EncBinary()
			yy2arr592 := z.EncBasicHandle().StructToArray
			var yyq592 [1]bool
			_, _, _ = yysep592, yyq592, yy2arr592
			const yyr592 bool = false
			var yynn592 int
			if yyr592 || yy2arr592 {
				r.EncodeArrayStart(1)
			} else {
				yynn592 = 1
				for _, b := range yyq592 {
					if b {
						yynn592++
					}
				}
				r.EncodeMapStart(yynn592)
				yynn592 = 0
			}
			if yyr592 || yy2arr592 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym594 := z.EncBinary()
				_ = yym594
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym595 := z.EncBinary()
				_ = yym595
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr592 || yy2arr592 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct597 := r.ContainerType()
		if yyct597 == codecSelferValueTypeMap1234 {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if yyct597 == codecSelferValueTypeArray1234 {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys598 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj600 int
	var yyb600 bool
	var yyhl600 bool = l >= 0
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj600++
		if yyhl600 {
			yyb600 = yyj600 > l
		} else {
			yyb600 = r.CheckBreak()
		}
		if yyb600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym602 := z.EncBinary()
		_ = yym602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep603 := !z.EncBinary()
			yy2arr603 := z.EncBasicHandle().StructToArray
			var yyq603 [1]bool
			_, _, _ = yysep603, yyq603, yy2arr603
			const yyr603 bool = false
			yyq603[0] = x.Medium != ""
			var yynn603 int
			if yyr603 || yy2arr603 {
				r.EncodeArrayStart(1)
			} else {
				yynn603 = 0
				for _, b := range yyq603 {
					if b {
						yynn603++
					}
				}
				r.EncodeMapStart(yynn603)
				yynn603 = 0
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq603[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym605 := z.DecBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct606 := r.ContainerType()
		if yyct606 == codecSelferValueTypeMap1234 {
			yyl606 := r.ReadMapStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl606, d)
			}
		} else if yyct606 == codecSelferValueTypeArray1234 {
			yyl606 := r.ReadArrayStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys607Slc
	var yyhl607 bool = l >= 0
	for yyj607 := 0; ; yyj607++ {
		if yyhl607 {
			if yyj607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys607Slc = r.DecodeBytes(yys607Slc, true, true)
		yys607 := string(yys607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys607 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys607)
		} // end switch yys607
	} // end for yyj607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj609 int
	var yyb609 bool
	var yyhl609 bool = l >= 0
	yyj609++
	if yyhl609 {
		yyb609 = yyj609 > l
	} else {
		yyb609 = r.CheckBreak()
	}
	if yyb609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj609++
		if yyhl609 {
			yyb609 = yyj609 > l
		} else {
			yyb609 = r.CheckBreak()
		}
		if yyb609 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj609-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym611 := z.EncBinary()
	_ = yym611
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym612 := z.DecBinary()
	_ = yym612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym613 := z.EncBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym615 := z.EncBinary()
		_ = yym615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep616 := !z.EncBinary()
			yy2arr616 := z.EncBasicHandle().StructToArray
			var yyq616 [4]bool
			_, _, _ = yysep616, yyq616, yy2arr616
			const yyr616 bool = false
			yyq616[1] = x.FSType != ""
			yyq616[2] = x.Partition != 0
			yyq616[3] = x.ReadOnly != false
			var yynn616 int
			if yyr616 || yy2arr616 {
				r.EncodeArrayStart(4)
			} else {
				yynn616 = 1
				for _, b := range yyq616 {
					if b {
						yynn616++
					}
				}
				r.EncodeMapStart(yynn616)
				yynn616 = 0
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym618 := z.EncBinary()
				_ = yym618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym619 := z.EncBinary()
				_ = yym619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[1] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq616[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[2] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq616[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[3] {
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq616[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym629 := z.DecBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct630 := r.ContainerType()
		if yyct630 == codecSelferValueTypeMap1234 {
			yyl630 := r.ReadMapStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl630, d)
			}
		} else if yyct630 == codecSelferValueTypeArray1234 {
			yyl630 := r.ReadArrayStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys631Slc
	var yyhl631 bool = l >= 0
	for yyj631 := 0; ; yyj631++ {
		if yyhl631 {
			if yyj631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys631Slc = r.DecodeBytes(yys631Slc, true, true)
		yys631 := string(yys631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys631 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys631)
		} // end switch yys631
	} // end for yyj631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj636 int
	var yyb636 bool
	var yyhl636 bool = l >= 0
	yyj636++
	if yyhl636 {
		yyb636 = yyj636 > l
	} else {
		yyb636 = r.CheckBreak()
	}
	if yyb636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj636++
	if yyhl636 {
		yyb636 = yyj636 > l
	} else {
		yyb636 = r.CheckBreak()
	}
	if yyb636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj636++
	if yyhl636 {
		yyb636 = yyj636 > l
	} else {
		yyb636 = r.CheckBreak()
	}
	if yyb636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj636++
	if yyhl636 {
		yyb636 = yyj636 > l
	} else {
		yyb636 = r.CheckBreak()
	}
	if yyb636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj636++
		if yyhl636 {
			yyb636 = yyj636 > l
		} else {
			yyb636 = r.CheckBreak()
		}
		if yyb636 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj636-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym641 := z.EncBinary()
		_ = yym641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep642 := !z.EncBinary()
			yy2arr642 := z.EncBasicHandle().StructToArray
			var yyq642 [6]bool
			_, _, _ = yysep642, yyq642, yy2arr642
			const yyr642 bool = false
			yyq642[0] = x.TargetPortal != ""
			yyq642[1] = x.IQN != ""
			yyq642[2] = x.Lun != 0
			yyq642[3] = x.ISCSIInterface != ""
			yyq642[4] = x.FSType != ""
			yyq642[5] = x.ReadOnly != false
			var yynn642 int
			if yyr642 || yy2arr642 {
				r.EncodeArrayStart(6)
			} else {
				yynn642 = 0
				for _, b := range yyq642 {
					if b {
						yynn642++
					}
				}
				r.EncodeMapStart(yynn642)
				yynn642 = 0
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[0] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq642[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[1] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq642[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[2] {
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq642[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[3] {
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq642[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[4] {
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq642[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[5] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq642[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym661 := z.DecBinary()
	_ = yym661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct662 := r.ContainerType()
		if yyct662 == codecSelferValueTypeMap1234 {
			yyl662 := r.ReadMapStart()
			if yyl662 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl662, d)
			}
		} else if yyct662 == codecSelferValueTypeArray1234 {
			yyl662 := r.ReadArrayStart()
			if yyl662 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys663Slc
	var yyhl663 bool = l >= 0
	for yyj663 := 0; ; yyj663++ {
		if yyhl663 {
			if yyj663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys663Slc = r.DecodeBytes(yys663Slc, true, true)
		yys663 := string(yys663Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys663 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys663)
		} // end switch yys663
	} // end for yyj663
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj670 int
	var yyb670 bool
	var yyhl670 bool = l >= 0
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj670++
		if yyhl670 {
			yyb670 = yyj670 > l
		} else {
			yyb670 = r.CheckBreak()
		}
		if yyb670 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj670-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym677 := z.EncBinary()
		_ = yym677
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep678 := !z.EncBinary()
			yy2arr678 := z.EncBasicHandle().StructToArray
			var yyq678 [4]bool
			_, _, _ = yysep678, yyq678, yy2arr678
			const yyr678 bool = false
			yyq678[2] = x.FSType != ""
			yyq678[3] = x.ReadOnly != false
			var yynn678 int
			if yyr678 || yy2arr678 {
				r.EncodeArrayStart(4)
			} else {
				yynn678 = 2
				for _, b := range yyq678 {
					if b {
						yynn678++
					}
				}
				r.EncodeMapStart(yynn678)
				yynn678 = 0
			}
			if yyr678 || yy2arr678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr678 || yy2arr678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy683 := *x.Lun
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeInt(int64(yy683))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy685 := *x.Lun
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeInt(int64(yy685))
					}
				}
			}
			if yyr678 || yy2arr678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq678[2] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq678[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr678 || yy2arr678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq678[3] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq678[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr678 || yy2arr678 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym693 := z.DecBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct694 := r.ContainerType()
		if yyct694 == codecSelferValueTypeMap1234 {
			yyl694 := r.ReadMapStart()
			if yyl694 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl694, d)
			}
		} else if yyct694 == codecSelferValueTypeArray1234 {
			yyl694 := r.ReadArrayStart()
			if yyl694 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys695Slc
	var yyhl695 bool = l >= 0
	for yyj695 := 0; ; yyj695++ {
		if yyhl695 {
			if yyj695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys695Slc = r.DecodeBytes(yys695Slc, true, true)
		yys695 := string(yys695Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys695 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv696 := &x.TargetWWNs
				yym697 := z.DecBinary()
				_ = yym697
				if false {
				} else {
					z.F.DecSliceStringX(yyv696, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym699 := z.DecBinary()
				_ = yym699
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys695)
		} // end switch yys695
	} // end for yyj695
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj702 int
	var yyb702 bool
	var yyhl702 bool = l >= 0
	yyj702++
	if yyhl702 {
		yyb702 = yyj702 > l
	} else {
		yyb702 = r.CheckBreak()
	}
	if yyb702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv703 := &x.TargetWWNs
		yym704 := z.DecBinary()
		_ = yym704
		if false {
		} else {
			z.F.DecSliceStringX(yyv703, false, d)
		}
	}
	yyj702++
	if yyhl702 {
		yyb702 = yyj702 > l
	} else {
		yyb702 = r.CheckBreak()
	}
	if yyb702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym706 := z.DecBinary()
		_ = yym706
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj702++
	if yyhl702 {
		yyb702 = yyj702 > l
	} else {
		yyb702 = r.CheckBreak()
	}
	if yyb702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj702++
	if yyhl702 {
		yyb702 = yyj702 > l
	} else {
		yyb702 = r.CheckBreak()
	}
	if yyb702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj702++
		if yyhl702 {
			yyb702 = yyj702 > l
		} else {
			yyb702 = r.CheckBreak()
		}
		if yyb702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym709 := z.EncBinary()
		_ = yym709
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep710 := !z.EncBinary()
			yy2arr710 := z.EncBasicHandle().StructToArray
			var yyq710 [5]bool
			_, _, _ = yysep710, yyq710, yy2arr710
			const yyr710 bool = false
			yyq710[1] = x.FSType != ""
			yyq710[2] = x.SecretRef != nil
			yyq710[3] = x.ReadOnly != false
			yyq710[4] = len(x.Options) != 0
			var yynn710 int
			if yyr710 || yy2arr710 {
				r.EncodeArrayStart(5)
			} else {
				yynn710 = 1
				for _, b := range yyq710 {
					if b {
						yynn710++
					}
				}
				r.EncodeMapStart(yynn710)
				yynn710 = 0
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym713 := z.EncBinary()
				_ = yym713
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq710[1] {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq710[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq710[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq710[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq710[3] {
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq710[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq710[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym722 := z.EncBinary()
						_ = yym722
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq710[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym723 := z.EncBinary()
						_ = yym723
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr710 || yy2arr710 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym724 := z.DecBinary()
	_ = yym724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct725 := r.ContainerType()
		if yyct725 == codecSelferValueTypeMap1234 {
			yyl725 := r.ReadMapStart()
			if yyl725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl725, d)
			}
		} else if yyct725 == codecSelferValueTypeArray1234 {
			yyl725 := r.ReadArrayStart()
			if yyl725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys726Slc
	var yyhl726 bool = l >= 0
	for yyj726 := 0; ; yyj726++ {
		if yyhl726 {
			if yyj726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys726Slc = r.DecodeBytes(yys726Slc, true, true)
		yys726 := string(yys726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys726 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv731 := &x.Options
				yym732 := z.DecBinary()
				_ = yym732
				if false {
				} else {
					z.F.DecMapStringStringX(yyv731, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys726)
		} // end switch yys726
	} // end for yyj726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj733 int
	var yyb733 bool
	var yyhl733 bool = l >= 0
	yyj733++
	if yyhl733 {
		yyb733 = yyj733 > l
	} else {
		yyb733 = r.CheckBreak()
	}
	if yyb733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj733++
	if yyhl733 {
		yyb733 = yyj733 > l
	} else {
		yyb733 = r.CheckBreak()
	}
	if yyb733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj733++
	if yyhl733 {
		yyb733 = yyj733 > l
	} else {
		yyb733 = r.CheckBreak()
	}
	if yyb733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj733++
	if yyhl733 {
		yyb733 = yyj733 > l
	} else {
		yyb733 = r.CheckBreak()
	}
	if yyb733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj733++
	if yyhl733 {
		yyb733 = yyj733 > l
	} else {
		yyb733 = r.CheckBreak()
	}
	if yyb733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv738 := &x.Options
		yym739 := z.DecBinary()
		_ = yym739
		if false {
		} else {
			z.F.DecMapStringStringX(yyv738, false, d)
		}
	}
	for {
		yyj733++
		if yyhl733 {
			yyb733 = yyj733 > l
		} else {
			yyb733 = r.CheckBreak()
		}
		if yyb733 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj733-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym740 := z.EncBinary()
		_ = yym740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep741 := !z.EncBinary()
			yy2arr741 := z.EncBasicHandle().StructToArray
			var yyq741 [4]bool
			_, _, _ = yysep741, yyq741, yy2arr741
			const yyr741 bool = false
			yyq741[1] = x.FSType != ""
			yyq741[2] = x.Partition != 0
			yyq741[3] = x.ReadOnly != false
			var yynn741 int
			if yyr741 || yy2arr741 {
				r.EncodeArrayStart(4)
			} else {
				yynn741 = 1
				for _, b := range yyq741 {
					if b {
						yynn741++
					}
				}
				r.EncodeMapStart(yynn741)
				yynn741 = 0
			}
			if yyr741 || yy2arr741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym743 := z.EncBinary()
				_ = yym743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym744 := z.EncBinary()
				_ = yym744
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr741 || yy2arr741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq741[1] {
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq741[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr741 || yy2arr741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq741[2] {
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq741[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym750 := z.EncBinary()
					_ = yym750
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr741 || yy2arr741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq741[3] {
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq741[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr741 || yy2arr741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym754 := z.DecBinary()
	_ = yym754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct755 := r.ContainerType()
		if yyct755 == codecSelferValueTypeMap1234 {
			yyl755 := r.ReadMapStart()
			if yyl755 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl755, d)
			}
		} else if yyct755 == codecSelferValueTypeArray1234 {
			yyl755 := r.ReadArrayStart()
			if yyl755 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl755, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys756Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys756Slc
	var yyhl756 bool = l >= 0
	for yyj756 := 0; ; yyj756++ {
		if yyhl756 {
			if yyj756 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys756Slc = r.DecodeBytes(yys756Slc, true, true)
		yys756 := string(yys756Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys756 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys756)
		} // end switch yys756
	} // end for yyj756
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj761 int
	var yyb761 bool
	var yyhl761 bool = l >= 0
	yyj761++
	if yyhl761 {
		yyb761 = yyj761 > l
	} else {
		yyb761 = r.CheckBreak()
	}
	if yyb761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj761++
	if yyhl761 {
		yyb761 = yyj761 > l
	} else {
		yyb761 = r.CheckBreak()
	}
	if yyb761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj761++
	if yyhl761 {
		yyb761 = yyj761 > l
	} else {
		yyb761 = r.CheckBreak()
	}
	if yyb761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj761++
	if yyhl761 {
		yyb761 = yyj761 > l
	} else {
		yyb761 = r.CheckBreak()
	}
	if yyb761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj761++
		if yyhl761 {
			yyb761 = yyj761 > l
		} else {
			yyb761 = r.CheckBreak()
		}
		if yyb761 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj761-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym766 := z.EncBinary()
		_ = yym766
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep767 := !z.EncBinary()
			yy2arr767 := z.EncBasicHandle().StructToArray
			var yyq767 [3]bool
			_, _, _ = yysep767, yyq767, yy2arr767
			const yyr767 bool = false
			yyq767[1] = x.Revision != ""
			yyq767[2] = x.Directory != ""
			var yynn767 int
			if yyr767 || yy2arr767 {
				r.EncodeArrayStart(3)
			} else {
				yynn767 = 1
				for _, b := range yyq767 {
					if b {
						yynn767++
					}
				}
				r.EncodeMapStart(yynn767)
				yynn767 = 0
			}
			if yyr767 || yy2arr767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym769 := z.EncBinary()
				_ = yym769
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym770 := z.EncBinary()
				_ = yym770
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr767 || yy2arr767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq767[1] {
					yym772 := z.EncBinary()
					_ = yym772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq767[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr767 || yy2arr767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq767[2] {
					yym775 := z.EncBinary()
					_ = yym775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq767[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr767 || yy2arr767 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym777 := z.DecBinary()
	_ = yym777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct778 := r.ContainerType()
		if yyct778 == codecSelferValueTypeMap1234 {
			yyl778 := r.ReadMapStart()
			if yyl778 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl778, d)
			}
		} else if yyct778 == codecSelferValueTypeArray1234 {
			yyl778 := r.ReadArrayStart()
			if yyl778 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys779Slc
	var yyhl779 bool = l >= 0
	for yyj779 := 0; ; yyj779++ {
		if yyhl779 {
			if yyj779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys779Slc = r.DecodeBytes(yys779Slc, true, true)
		yys779 := string(yys779Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys779 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys779)
		} // end switch yys779
	} // end for yyj779
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj783 int
	var yyb783 bool
	var yyhl783 bool = l >= 0
	yyj783++
	if yyhl783 {
		yyb783 = yyj783 > l
	} else {
		yyb783 = r.CheckBreak()
	}
	if yyb783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj783++
	if yyhl783 {
		yyb783 = yyj783 > l
	} else {
		yyb783 = r.CheckBreak()
	}
	if yyb783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj783++
	if yyhl783 {
		yyb783 = yyj783 > l
	} else {
		yyb783 = r.CheckBreak()
	}
	if yyb783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj783++
		if yyhl783 {
			yyb783 = yyj783 > l
		} else {
			yyb783 = r.CheckBreak()
		}
		if yyb783 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj783-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym787 := z.EncBinary()
		_ = yym787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep788 := !z.EncBinary()
			yy2arr788 := z.EncBasicHandle().StructToArray
			var yyq788 [3]bool
			_, _, _ = yysep788, yyq788, yy2arr788
			const yyr788 bool = false
			yyq788[0] = x.SecretName != ""
			yyq788[1] = len(x.Items) != 0
			yyq788[2] = x.DefaultMode != nil
			var yynn788 int
			if yyr788 || yy2arr788 {
				r.EncodeArrayStart(3)
			} else {
				yynn788 = 0
				for _, b := range yyq788 {
					if b {
						yynn788++
					}
				}
				r.EncodeMapStart(yynn788)
				yynn788 = 0
			}
			if yyr788 || yy2arr788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq788[0] {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq788[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr788 || yy2arr788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq788[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym793 := z.EncBinary()
						_ = yym793
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq788[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym794 := z.EncBinary()
						_ = yym794
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr788 || yy2arr788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq788[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy796 := *x.DefaultMode
						yym797 := z.EncBinary()
						_ = yym797
						if false {
						} else {
							r.EncodeInt(int64(yy796))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq788[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy798 := *x.DefaultMode
						yym799 := z.EncBinary()
						_ = yym799
						if false {
						} else {
							r.EncodeInt(int64(yy798))
						}
					}
				}
			}
			if yyr788 || yy2arr788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct801 := r.ContainerType()
		if yyct801 == codecSelferValueTypeMap1234 {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if yyct801 == codecSelferValueTypeArray1234 {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys802 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv804 := &x.Items
				yym805 := z.DecBinary()
				_ = yym805
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv804), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym807 := z.DecBinary()
				_ = yym807
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj808 int
	var yyb808 bool
	var yyhl808 bool = l >= 0
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv810 := &x.Items
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv810), d)
		}
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym813 := z.DecBinary()
		_ = yym813
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj808++
		if yyhl808 {
			yyb808 = yyj808 > l
		} else {
			yyb808 = r.CheckBreak()
		}
		if yyb808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym814 := z.EncBinary()
		_ = yym814
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep815 := !z.EncBinary()
			yy2arr815 := z.EncBasicHandle().StructToArray
			var yyq815 [3]bool
			_, _, _ = yysep815, yyq815, yy2arr815
			const yyr815 bool = false
			yyq815[2] = x.ReadOnly != false
			var yynn815 int
			if yyr815 || yy2arr815 {
				r.EncodeArrayStart(3)
			} else {
				yynn815 = 2
				for _, b := range yyq815 {
					if b {
						yynn815++
					}
				}
				r.EncodeMapStart(yynn815)
				yynn815 = 0
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym817 := z.EncBinary()
				_ = yym817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym818 := z.EncBinary()
				_ = yym818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym820 := z.EncBinary()
				_ = yym820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym821 := z.EncBinary()
				_ = yym821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[2] {
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq815[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym825 := z.DecBinary()
	_ = yym825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct826 := r.ContainerType()
		if yyct826 == codecSelferValueTypeMap1234 {
			yyl826 := r.ReadMapStart()
			if yyl826 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl826, d)
			}
		} else if yyct826 == codecSelferValueTypeArray1234 {
			yyl826 := r.ReadArrayStart()
			if yyl826 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys827Slc
	var yyhl827 bool = l >= 0
	for yyj827 := 0; ; yyj827++ {
		if yyhl827 {
			if yyj827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys827Slc = r.DecodeBytes(yys827Slc, true, true)
		yys827 := string(yys827Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys827 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys827)
		} // end switch yys827
	} // end for yyj827
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj831 int
	var yyb831 bool
	var yyhl831 bool = l >= 0
	yyj831++
	if yyhl831 {
		yyb831 = yyj831 > l
	} else {
		yyb831 = r.CheckBreak()
	}
	if yyb831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj831++
	if yyhl831 {
		yyb831 = yyj831 > l
	} else {
		yyb831 = r.CheckBreak()
	}
	if yyb831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj831++
	if yyhl831 {
		yyb831 = yyj831 > l
	} else {
		yyb831 = r.CheckBreak()
	}
	if yyb831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj831++
		if yyhl831 {
			yyb831 = yyj831 > l
		} else {
			yyb831 = r.CheckBreak()
		}
		if yyb831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym835 := z.EncBinary()
		_ = yym835
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep836 := !z.EncBinary()
			yy2arr836 := z.EncBasicHandle().StructToArray
			var yyq836 [5]bool
			_, _, _ = yysep836, yyq836, yy2arr836
			const yyr836 bool = false
			yyq836[2] = x.ReadOnly != false
			yyq836[3] = x.User != ""
			yyq836[4] = x.Group != ""
			var yynn836 int
			if yyr836 || yy2arr836 {
				r.EncodeArrayStart(5)
			} else {
				yynn836 = 2
				for _, b := range yyq836 {
					if b {
						yynn836++
					}
				}
				r.EncodeMapStart(yynn836)
				yynn836 = 0
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym838 := z.EncBinary()
				_ = yym838
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym839 := z.EncBinary()
				_ = yym839
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym841 := z.EncBinary()
				_ = yym841
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym842 := z.EncBinary()
				_ = yym842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq836[2] {
					yym844 := z.EncBinary()
					_ = yym844
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq836[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq836[3] {
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq836[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq836[4] {
					yym850 := z.EncBinary()
					_ = yym850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq836[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym852 := z.DecBinary()
	_ = yym852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct853 := r.ContainerType()
		if yyct853 == codecSelferValueTypeMap1234 {
			yyl853 := r.ReadMapStart()
			if yyl853 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl853, d)
			}
		} else if yyct853 == codecSelferValueTypeArray1234 {
			yyl853 := r.ReadArrayStart()
			if yyl853 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl853, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys854Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys854Slc
	var yyhl854 bool = l >= 0
	for yyj854 := 0; ; yyj854++ {
		if yyhl854 {
			if yyj854 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys854Slc = r.DecodeBytes(yys854Slc, true, true)
		yys854 := string(yys854Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys854 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys854)
		} // end switch yys854
	} // end for yyj854
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj860 int
	var yyb860 bool
	var yyhl860 bool = l >= 0
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj860++
		if yyhl860 {
			yyb860 = yyj860 > l
		} else {
			yyb860 = r.CheckBreak()
		}
		if yyb860 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj860-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym866 := z.EncBinary()
		_ = yym866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep867 := !z.EncBinary()
			yy2arr867 := z.EncBasicHandle().StructToArray
			var yyq867 [4]bool
			_, _, _ = yysep867, yyq867, yy2arr867
			const yyr867 bool = false
			yyq867[1] = len(x.Servers) != 0
			yyq867[3] = x.ReadOnly != false
			var yynn867 int
			if yyr867 || yy2arr867 {
				r.EncodeArrayStart(4)
			} else {
				yynn867 = 2
				for _, b := range yyq867 {
					if b {
						yynn867++
					}
				}
				r.EncodeMapStart(yynn867)
				yynn867 = 0
			}
			if yyr867 || yy2arr867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym869 := z.EncBinary()
				_ = yym869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr867 || yy2arr867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq867[1] {
					if x.Servers == nil {
						r.EncodeNil()
					} else {
						yym872 := z.EncBinary()
						_ = yym872
						if false {
						} else {
							z.F.EncSliceStringV(x.Servers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("servers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Servers == nil {
						r.EncodeNil()
					} else {
						yym873 := z.EncBinary()
						_ = yym873
						if false {
						} else {
							z.F.EncSliceStringV(x.Servers, false, e)
						}
					}
				}
			}
			if yyr867 || yy2arr867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym875 := z.EncBinary()
				_ = yym875
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym876 := z.EncBinary()
				_ = yym876
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr867 || yy2arr867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq867[3] {
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq867[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr867 || yy2arr867 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym880 := z.DecBinary()
	_ = yym880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct881 := r.ContainerType()
		if yyct881 == codecSelferValueTypeMap1234 {
			yyl881 := r.ReadMapStart()
			if yyl881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl881, d)
			}
		} else if yyct881 == codecSelferValueTypeArray1234 {
			yyl881 := r.ReadArrayStart()
			if yyl881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys882Slc
	var yyhl882 bool = l >= 0
	for yyj882 := 0; ; yyj882++ {
		if yyhl882 {
			if yyj882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys882Slc = r.DecodeBytes(yys882Slc, true, true)
		yys882 := string(yys882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys882 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "servers":
			if r.TryDecodeAsNil() {
				x.Servers = nil
			} else {
				yyv884 := &x.Servers
				yym885 := z.DecBinary()
				_ = yym885
				if false {
				} else {
					z.F.DecSliceStringX(yyv884, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys882)
		} // end switch yys882
	} // end for yyj882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj888 int
	var yyb888 bool
	var yyhl888 bool = l >= 0
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Servers = nil
	} else {
		yyv890 := &x.Servers
		yym891 := z.DecBinary()
		_ = yym891
		if false {
		} else {
			z.F.DecSliceStringX(yyv890, false, d)
		}
	}
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj888++
		if yyhl888 {
			yyb888 = yyj888 > l
		} else {
			yyb888 = r.CheckBreak()
		}
		if yyb888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [8]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[2] = x.FSType != ""
			yyq895[3] = x.RBDPool != ""
			yyq895[4] = x.RadosUser != ""
			yyq895[5] = x.Keyring != ""
			yyq895[6] = x.SecretRef != nil
			yyq895[7] = x.ReadOnly != false
			var yynn895 int
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(8)
			} else {
				yynn895 = 2
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
				yynn895 = 0
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym900 := z.EncBinary()
				_ = yym900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[2] {
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[3] {
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[4] {
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym910 := z.EncBinary()
					_ = yym910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[5] {
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq895[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[7] {
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq895[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym918 := z.DecBinary()
	_ = yym918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct919 := r.ContainerType()
		if yyct919 == codecSelferValueTypeMap1234 {
			yyl919 := r.ReadMapStart()
			if yyl919 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl919, d)
			}
		} else if yyct919 == codecSelferValueTypeArray1234 {
			yyl919 := r.ReadArrayStart()
			if yyl919 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys920Slc
	var yyhl920 bool = l >= 0
	for yyj920 := 0; ; yyj920++ {
		if yyhl920 {
			if yyj920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys920Slc = r.DecodeBytes(yys920Slc, true, true)
		yys920 := string(yys920Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys920 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv921 := &x.CephMonitors
				yym922 := z.DecBinary()
				_ = yym922
				if false {
				} else {
					z.F.DecSliceStringX(yyv921, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys920)
		} // end switch yys920
	} // end for yyj920
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj930 int
	var yyb930 bool
	var yyhl930 bool = l >= 0
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv931 := &x.CephMonitors
		yym932 := z.DecBinary()
		_ = yym932
		if false {
		} else {
			z.F.DecSliceStringX(yyv931, false, d)
		}
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj930++
		if yyhl930 {
			yyb930 = yyj930 > l
		} else {
			yyb930 = r.CheckBreak()
		}
		if yyb930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [3]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			yyq941[1] = x.FSType != ""
			yyq941[2] = x.ReadOnly != false
			var yynn941 int
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(3)
			} else {
				yynn941 = 1
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
				yynn941 = 0
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym943 := z.EncBinary()
				_ = yym943
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq941[1] {
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq941[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq941[2] {
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq941[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym951 := z.DecBinary()
	_ = yym951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct952 := r.ContainerType()
		if yyct952 == codecSelferValueTypeMap1234 {
			yyl952 := r.ReadMapStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl952, d)
			}
		} else if yyct952 == codecSelferValueTypeArray1234 {
			yyl952 := r.ReadArrayStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys953Slc
	var yyhl953 bool = l >= 0
	for yyj953 := 0; ; yyj953++ {
		if yyhl953 {
			if yyj953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys953Slc = r.DecodeBytes(yys953Slc, true, true)
		yys953 := string(yys953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys953 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys953)
		} // end switch yys953
	} // end for yyj953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj957 int
	var yyb957 bool
	var yyhl957 bool = l >= 0
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj957++
		if yyhl957 {
			yyb957 = yyj957 > l
		} else {
			yyb957 = r.CheckBreak()
		}
		if yyb957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym961 := z.EncBinary()
		_ = yym961
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep962 := !z.EncBinary()
			yy2arr962 := z.EncBasicHandle().StructToArray
			var yyq962 [6]bool
			_, _, _ = yysep962, yyq962, yy2arr962
			const yyr962 bool = false
			yyq962[1] = x.Path != ""
			yyq962[2] = x.User != ""
			yyq962[3] = x.SecretFile != ""
			yyq962[4] = x.SecretRef != nil
			yyq962[5] = x.ReadOnly != false
			var yynn962 int
			if yyr962 || yy2arr962 {
				r.EncodeArrayStart(6)
			} else {
				yynn962 = 1
				for _, b := range yyq962 {
					if b {
						yynn962++
					}
				}
				r.EncodeMapStart(yynn962)
				yynn962 = 0
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym965 := z.EncBinary()
					_ = yym965
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq962[1] {
					yym967 := z.EncBinary()
					_ = yym967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq962[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym968 := z.EncBinary()
					_ = yym968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq962[2] {
					yym970 := z.EncBinary()
					_ = yym970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq962[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym971 := z.EncBinary()
					_ = yym971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq962[3] {
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq962[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq962[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq962[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq962[5] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq962[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr962 || yy2arr962 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym979 := z.DecBinary()
	_ = yym979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct980 := r.ContainerType()
		if yyct980 == codecSelferValueTypeMap1234 {
			yyl980 := r.ReadMapStart()
			if yyl980 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl980, d)
			}
		} else if yyct980 == codecSelferValueTypeArray1234 {
			yyl980 := r.ReadArrayStart()
			if yyl980 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys981Slc
	var yyhl981 bool = l >= 0
	for yyj981 := 0; ; yyj981++ {
		if yyhl981 {
			if yyj981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys981Slc = r.DecodeBytes(yys981Slc, true, true)
		yys981 := string(yys981Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys981 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv982 := &x.Monitors
				yym983 := z.DecBinary()
				_ = yym983
				if false {
				} else {
					z.F.DecSliceStringX(yyv982, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys981)
		} // end switch yys981
	} // end for yyj981
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj989 int
	var yyb989 bool
	var yyhl989 bool = l >= 0
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv990 := &x.Monitors
		yym991 := z.DecBinary()
		_ = yym991
		if false {
		} else {
			z.F.DecSliceStringX(yyv990, false, d)
		}
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj989++
		if yyhl989 {
			yyb989 = yyj989 > l
		} else {
			yyb989 = r.CheckBreak()
		}
		if yyb989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [1]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			var yynn998 int
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(1)
			} else {
				yynn998 = 1
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
				yynn998 = 0
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1000 := z.EncBinary()
				_ = yym1000
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1001 := z.EncBinary()
				_ = yym1001
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1002 := z.DecBinary()
	_ = yym1002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1003 := r.ContainerType()
		if yyct1003 == codecSelferValueTypeMap1234 {
			yyl1003 := r.ReadMapStart()
			if yyl1003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1003, d)
			}
		} else if yyct1003 == codecSelferValueTypeArray1234 {
			yyl1003 := r.ReadArrayStart()
			if yyl1003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1004Slc
	var yyhl1004 bool = l >= 0
	for yyj1004 := 0; ; yyj1004++ {
		if yyhl1004 {
			if yyj1004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1004Slc = r.DecodeBytes(yys1004Slc, true, true)
		yys1004 := string(yys1004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1004 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1004)
		} // end switch yys1004
	} // end for yyj1004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1006 int
	var yyb1006 bool
	var yyhl1006 bool = l >= 0
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj1006++
		if yyhl1006 {
			yyb1006 = yyj1006 > l
		} else {
			yyb1006 = r.CheckBreak()
		}
		if yyb1006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1008 := z.EncBinary()
		_ = yym1008
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1009 := !z.EncBinary()
			yy2arr1009 := z.EncBasicHandle().StructToArray
			var yyq1009 [2]bool
			_, _, _ = yysep1009, yyq1009, yy2arr1009
			const yyr1009 bool = false
			yyq1009[0] = len(x.Items) != 0
			yyq1009[1] = x.DefaultMode != nil
			var yynn1009 int
			if yyr1009 || yy2arr1009 {
				r.EncodeArrayStart(2)
			} else {
				yynn1009 = 0
				for _, b := range yyq1009 {
					if b {
						yynn1009++
					}
				}
				r.EncodeMapStart(yynn1009)
				yynn1009 = 0
			}
			if yyr1009 || yy2arr1009 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1009[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1011 := z.EncBinary()
						_ = yym1011
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1009[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1012 := z.EncBinary()
						_ = yym1012
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr1009 || yy2arr1009 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1009[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1014 := *x.DefaultMode
						yym1015 := z.EncBinary()
						_ = yym1015
						if false {
						} else {
							r.EncodeInt(int64(yy1014))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1009[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1016 := *x.DefaultMode
						yym1017 := z.EncBinary()
						_ = yym1017
						if false {
						} else {
							r.EncodeInt(int64(yy1016))
						}
					}
				}
			}
			if yyr1009 || yy2arr1009 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1018 := z.DecBinary()
	_ = yym1018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1019 := r.ContainerType()
		if yyct1019 == codecSelferValueTypeMap1234 {
			yyl1019 := r.ReadMapStart()
			if yyl1019 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1019, d)
			}
		} else if yyct1019 == codecSelferValueTypeArray1234 {
			yyl1019 := r.ReadArrayStart()
			if yyl1019 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1019, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1020Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1020Slc
	var yyhl1020 bool = l >= 0
	for yyj1020 := 0; ; yyj1020++ {
		if yyhl1020 {
			if yyj1020 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1020Slc = r.DecodeBytes(yys1020Slc, true, true)
		yys1020 := string(yys1020Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1020 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1021 := &x.Items
				yym1022 := z.DecBinary()
				_ = yym1022
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1021), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1024 := z.DecBinary()
				_ = yym1024
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1020)
		} // end switch yys1020
	} // end for yyj1020
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1025 int
	var yyb1025 bool
	var yyhl1025 bool = l >= 0
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1026 := &x.Items
		yym1027 := z.DecBinary()
		_ = yym1027
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1026), d)
		}
	}
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1029 := z.DecBinary()
		_ = yym1029
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1025++
		if yyhl1025 {
			yyb1025 = yyj1025 > l
		} else {
			yyb1025 = r.CheckBreak()
		}
		if yyb1025 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1025-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1030 := z.EncBinary()
		_ = yym1030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1031 := !z.EncBinary()
			yy2arr1031 := z.EncBasicHandle().StructToArray
			var yyq1031 [4]bool
			_, _, _ = yysep1031, yyq1031, yy2arr1031
			const yyr1031 bool = false
			yyq1031[1] = x.FieldRef != nil
			yyq1031[2] = x.ResourceFieldRef != nil
			yyq1031[3] = x.Mode != nil
			var yynn1031 int
			if yyr1031 || yy2arr1031 {
				r.EncodeArrayStart(4)
			} else {
				yynn1031 = 1
				for _, b := range yyq1031 {
					if b {
						yynn1031++
					}
				}
				r.EncodeMapStart(yynn1031)
				yynn1031 = 0
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1034 := z.EncBinary()
				_ = yym1034
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1031[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1031[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1038 := *x.Mode
						yym1039 := z.EncBinary()
						_ = yym1039
						if false {
						} else {
							r.EncodeInt(int64(yy1038))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1031[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1040 := *x.Mode
						yym1041 := z.EncBinary()
						_ = yym1041
						if false {
						} else {
							r.EncodeInt(int64(yy1040))
						}
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1042 := z.DecBinary()
	_ = yym1042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1043 := r.ContainerType()
		if yyct1043 == codecSelferValueTypeMap1234 {
			yyl1043 := r.ReadMapStart()
			if yyl1043 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1043, d)
			}
		} else if yyct1043 == codecSelferValueTypeArray1234 {
			yyl1043 := r.ReadArrayStart()
			if yyl1043 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1043, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1044Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1044Slc
	var yyhl1044 bool = l >= 0
	for yyj1044 := 0; ; yyj1044++ {
		if yyhl1044 {
			if yyj1044 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1044Slc = r.DecodeBytes(yys1044Slc, true, true)
		yys1044 := string(yys1044Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1044 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1049 := z.DecBinary()
				_ = yym1049
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1044)
		} // end switch yys1044
	} // end for yyj1044
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1050 int
	var yyb1050 bool
	var yyhl1050 bool = l >= 0
	yyj1050++
	if yyhl1050 {
		yyb1050 = yyj1050 > l
	} else {
		yyb1050 = r.CheckBreak()
	}
	if yyb1050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1050++
	if yyhl1050 {
		yyb1050 = yyj1050 > l
	} else {
		yyb1050 = r.CheckBreak()
	}
	if yyb1050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1050++
	if yyhl1050 {
		yyb1050 = yyj1050 > l
	} else {
		yyb1050 = r.CheckBreak()
	}
	if yyb1050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1050++
	if yyhl1050 {
		yyb1050 = yyj1050 > l
	} else {
		yyb1050 = r.CheckBreak()
	}
	if yyb1050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1055 := z.DecBinary()
		_ = yym1055
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1050++
		if yyhl1050 {
			yyb1050 = yyj1050 > l
		} else {
			yyb1050 = r.CheckBreak()
		}
		if yyb1050 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1050-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1056 := z.EncBinary()
		_ = yym1056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1057 := !z.EncBinary()
			yy2arr1057 := z.EncBasicHandle().StructToArray
			var yyq1057 [3]bool
			_, _, _ = yysep1057, yyq1057, yy2arr1057
			const yyr1057 bool = false
			yyq1057[2] = x.ReadOnly != false
			var yynn1057 int
			if yyr1057 || yy2arr1057 {
				r.EncodeArrayStart(3)
			} else {
				yynn1057 = 2
				for _, b := range yyq1057 {
					if b {
						yynn1057++
					}
				}
				r.EncodeMapStart(yynn1057)
				yynn1057 = 0
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1060 := z.EncBinary()
				_ = yym1060
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1063 := z.EncBinary()
				_ = yym1063
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[2] {
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1057[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1067 := z.DecBinary()
	_ = yym1067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1068 := r.ContainerType()
		if yyct1068 == codecSelferValueTypeMap1234 {
			yyl1068 := r.ReadMapStart()
			if yyl1068 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1068, d)
			}
		} else if yyct1068 == codecSelferValueTypeArray1234 {
			yyl1068 := r.ReadArrayStart()
			if yyl1068 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1069Slc
	var yyhl1069 bool = l >= 0
	for yyj1069 := 0; ; yyj1069++ {
		if yyhl1069 {
			if yyj1069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1069Slc = r.DecodeBytes(yys1069Slc, true, true)
		yys1069 := string(yys1069Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1069 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1069)
		} // end switch yys1069
	} // end for yyj1069
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1073 int
	var yyb1073 bool
	var yyhl1073 bool = l >= 0
	yyj1073++
	if yyhl1073 {
		yyb1073 = yyj1073 > l
	} else {
		yyb1073 = r.CheckBreak()
	}
	if yyb1073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1073++
	if yyhl1073 {
		yyb1073 = yyj1073 > l
	} else {
		yyb1073 = r.CheckBreak()
	}
	if yyb1073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1073++
	if yyhl1073 {
		yyb1073 = yyj1073 > l
	} else {
		yyb1073 = r.CheckBreak()
	}
	if yyb1073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1073++
		if yyhl1073 {
			yyb1073 = yyj1073 > l
		} else {
			yyb1073 = r.CheckBreak()
		}
		if yyb1073 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1073-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1077 := z.EncBinary()
		_ = yym1077
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1078 := !z.EncBinary()
			yy2arr1078 := z.EncBasicHandle().StructToArray
			var yyq1078 [2]bool
			_, _, _ = yysep1078, yyq1078, yy2arr1078
			const yyr1078 bool = false
			yyq1078[1] = x.FSType != ""
			var yynn1078 int
			if yyr1078 || yy2arr1078 {
				r.EncodeArrayStart(2)
			} else {
				yynn1078 = 1
				for _, b := range yyq1078 {
					if b {
						yynn1078++
					}
				}
				r.EncodeMapStart(yynn1078)
				yynn1078 = 0
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1080 := z.EncBinary()
				_ = yym1080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1081 := z.EncBinary()
				_ = yym1081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[1] {
					yym1083 := z.EncBinary()
					_ = yym1083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1078[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1084 := z.EncBinary()
					_ = yym1084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1085 := z.DecBinary()
	_ = yym1085
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1086 := r.ContainerType()
		if yyct1086 == codecSelferValueTypeMap1234 {
			yyl1086 := r.ReadMapStart()
			if yyl1086 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1086, d)
			}
		} else if yyct1086 == codecSelferValueTypeArray1234 {
			yyl1086 := r.ReadArrayStart()
			if yyl1086 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1086, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1087Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1087Slc
	var yyhl1087 bool = l >= 0
	for yyj1087 := 0; ; yyj1087++ {
		if yyhl1087 {
			if yyj1087 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1087Slc = r.DecodeBytes(yys1087Slc, true, true)
		yys1087 := string(yys1087Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1087 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1087)
		} // end switch yys1087
	} // end for yyj1087
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1090 int
	var yyb1090 bool
	var yyhl1090 bool = l >= 0
	yyj1090++
	if yyhl1090 {
		yyb1090 = yyj1090 > l
	} else {
		yyb1090 = r.CheckBreak()
	}
	if yyb1090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1090++
	if yyhl1090 {
		yyb1090 = yyj1090 > l
	} else {
		yyb1090 = r.CheckBreak()
	}
	if yyb1090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1090++
		if yyhl1090 {
			yyb1090 = yyj1090 > l
		} else {
			yyb1090 = r.CheckBreak()
		}
		if yyb1090 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1090-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1093 := z.EncBinary()
	_ = yym1093
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1094 := z.DecBinary()
	_ = yym1094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1095 := z.EncBinary()
		_ = yym1095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1096 := !z.EncBinary()
			yy2arr1096 := z.EncBasicHandle().StructToArray
			var yyq1096 [5]bool
			_, _, _ = yysep1096, yyq1096, yy2arr1096
			const yyr1096 bool = false
			yyq1096[2] = x.CachingMode != nil
			yyq1096[3] = x.FSType != nil
			yyq1096[4] = x.ReadOnly != nil
			var yynn1096 int
			if yyr1096 || yy2arr1096 {
				r.EncodeArrayStart(5)
			} else {
				yynn1096 = 2
				for _, b := range yyq1096 {
					if b {
						yynn1096++
					}
				}
				r.EncodeMapStart(yynn1096)
				yynn1096 = 0
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1098 := z.EncBinary()
				_ = yym1098
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1099 := z.EncBinary()
				_ = yym1099
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1101 := z.EncBinary()
				_ = yym1101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1102 := z.EncBinary()
				_ = yym1102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1096[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1104 := *x.CachingMode
						yy1104.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1096[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1105 := *x.CachingMode
						yy1105.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1096[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1107 := *x.FSType
						yym1108 := z.EncBinary()
						_ = yym1108
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1107))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1096[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1109 := *x.FSType
						yym1110 := z.EncBinary()
						_ = yym1110
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1109))
						}
					}
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1096[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1112 := *x.ReadOnly
						yym1113 := z.EncBinary()
						_ = yym1113
						if false {
						} else {
							r.EncodeBool(bool(yy1112))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1096[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1114 := *x.ReadOnly
						yym1115 := z.EncBinary()
						_ = yym1115
						if false {
						} else {
							r.EncodeBool(bool(yy1114))
						}
					}
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1116 := z.DecBinary()
	_ = yym1116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1117 := r.ContainerType()
		if yyct1117 == codecSelferValueTypeMap1234 {
			yyl1117 := r.ReadMapStart()
			if yyl1117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1117, d)
			}
		} else if yyct1117 == codecSelferValueTypeArray1234 {
			yyl1117 := r.ReadArrayStart()
			if yyl1117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1118Slc
	var yyhl1118 bool = l >= 0
	for yyj1118 := 0; ; yyj1118++ {
		if yyhl1118 {
			if yyj1118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1118Slc = r.DecodeBytes(yys1118Slc, true, true)
		yys1118 := string(yys1118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1118 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1123 := z.DecBinary()
				_ = yym1123
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1125 := z.DecBinary()
				_ = yym1125
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1118)
		} // end switch yys1118
	} // end for yyj1118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1126 int
	var yyb1126 bool
	var yyhl1126 bool = l >= 0
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1131 := z.DecBinary()
		_ = yym1131
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1133 := z.DecBinary()
		_ = yym1133
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1126++
		if yyhl1126 {
			yyb1126 = yyj1126 > l
		} else {
			yyb1126 = r.CheckBreak()
		}
		if yyb1126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1134 := z.EncBinary()
		_ = yym1134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1135 := !z.EncBinary()
			yy2arr1135 := z.EncBasicHandle().StructToArray
			var yyq1135 [3]bool
			_, _, _ = yysep1135, yyq1135, yy2arr1135
			const yyr1135 bool = false
			yyq1135[1] = len(x.Items) != 0
			yyq1135[2] = x.DefaultMode != nil
			var yynn1135 int
			if yyr1135 || yy2arr1135 {
				r.EncodeArrayStart(3)
			} else {
				yynn1135 = 1
				for _, b := range yyq1135 {
					if b {
						yynn1135++
					}
				}
				r.EncodeMapStart(yynn1135)
				yynn1135 = 0
			}
			if yyr1135 || yy2arr1135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1137 := z.EncBinary()
				_ = yym1137
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1138 := z.EncBinary()
				_ = yym1138
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1135 || yy2arr1135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1135[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1140 := z.EncBinary()
						_ = yym1140
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1135[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1141 := z.EncBinary()
						_ = yym1141
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1135 || yy2arr1135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1135[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1143 := *x.DefaultMode
						yym1144 := z.EncBinary()
						_ = yym1144
						if false {
						} else {
							r.EncodeInt(int64(yy1143))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1135[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1145 := *x.DefaultMode
						yym1146 := z.EncBinary()
						_ = yym1146
						if false {
						} else {
							r.EncodeInt(int64(yy1145))
						}
					}
				}
			}
			if yyr1135 || yy2arr1135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1147 := z.DecBinary()
	_ = yym1147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1148 := r.ContainerType()
		if yyct1148 == codecSelferValueTypeMap1234 {
			yyl1148 := r.ReadMapStart()
			if yyl1148 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1148, d)
			}
		} else if yyct1148 == codecSelferValueTypeArray1234 {
			yyl1148 := r.ReadArrayStart()
			if yyl1148 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1148, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1149Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1149Slc
	var yyhl1149 bool = l >= 0
	for yyj1149 := 0; ; yyj1149++ {
		if yyhl1149 {
			if yyj1149 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1149Slc = r.DecodeBytes(yys1149Slc, true, true)
		yys1149 := string(yys1149Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1149 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1151 := &x.Items
				yym1152 := z.DecBinary()
				_ = yym1152
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1151), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1154 := z.DecBinary()
				_ = yym1154
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1149)
		} // end switch yys1149
	} // end for yyj1149
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1155 int
	var yyb1155 bool
	var yyhl1155 bool = l >= 0
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1157 := &x.Items
		yym1158 := z.DecBinary()
		_ = yym1158
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1157), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1160 := z.DecBinary()
		_ = yym1160
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1155++
		if yyhl1155 {
			yyb1155 = yyj1155 > l
		} else {
			yyb1155 = r.CheckBreak()
		}
		if yyb1155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1161 := z.EncBinary()
		_ = yym1161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1162 := !z.EncBinary()
			yy2arr1162 := z.EncBasicHandle().StructToArray
			var yyq1162 [3]bool
			_, _, _ = yysep1162, yyq1162, yy2arr1162
			const yyr1162 bool = false
			yyq1162[2] = x.Mode != nil
			var yynn1162 int
			if yyr1162 || yy2arr1162 {
				r.EncodeArrayStart(3)
			} else {
				yynn1162 = 2
				for _, b := range yyq1162 {
					if b {
						yynn1162++
					}
				}
				r.EncodeMapStart(yynn1162)
				yynn1162 = 0
			}
			if yyr1162 || yy2arr1162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1164 := z.EncBinary()
				_ = yym1164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1165 := z.EncBinary()
				_ = yym1165
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1162 || yy2arr1162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1167 := z.EncBinary()
				_ = yym1167
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1168 := z.EncBinary()
				_ = yym1168
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1162 || yy2arr1162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1162[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1170 := *x.Mode
						yym1171 := z.EncBinary()
						_ = yym1171
						if false {
						} else {
							r.EncodeInt(int64(yy1170))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1162[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1172 := *x.Mode
						yym1173 := z.EncBinary()
						_ = yym1173
						if false {
						} else {
							r.EncodeInt(int64(yy1172))
						}
					}
				}
			}
			if yyr1162 || yy2arr1162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1174 := z.DecBinary()
	_ = yym1174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1175 := r.ContainerType()
		if yyct1175 == codecSelferValueTypeMap1234 {
			yyl1175 := r.ReadMapStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1175, d)
			}
		} else if yyct1175 == codecSelferValueTypeArray1234 {
			yyl1175 := r.ReadArrayStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1176Slc
	var yyhl1176 bool = l >= 0
	for yyj1176 := 0; ; yyj1176++ {
		if yyhl1176 {
			if yyj1176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1176Slc = r.DecodeBytes(yys1176Slc, true, true)
		yys1176 := string(yys1176Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1176 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1180 := z.DecBinary()
				_ = yym1180
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1176)
		} // end switch yys1176
	} // end for yyj1176
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1181 int
	var yyb1181 bool
	var yyhl1181 bool = l >= 0
	yyj1181++
	if yyhl1181 {
		yyb1181 = yyj1181 > l
	} else {
		yyb1181 = r.CheckBreak()
	}
	if yyb1181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1181++
	if yyhl1181 {
		yyb1181 = yyj1181 > l
	} else {
		yyb1181 = r.CheckBreak()
	}
	if yyb1181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1181++
	if yyhl1181 {
		yyb1181 = yyj1181 > l
	} else {
		yyb1181 = r.CheckBreak()
	}
	if yyb1181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1185 := z.DecBinary()
		_ = yym1185
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1181++
		if yyhl1181 {
			yyb1181 = yyj1181 > l
		} else {
			yyb1181 = r.CheckBreak()
		}
		if yyb1181 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1181-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1186 := z.EncBinary()
		_ = yym1186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1187 := !z.EncBinary()
			yy2arr1187 := z.EncBasicHandle().StructToArray
			var yyq1187 [5]bool
			_, _, _ = yysep1187, yyq1187, yy2arr1187
			const yyr1187 bool = false
			yyq1187[0] = x.Name != ""
			yyq1187[1] = x.HostPort != 0
			yyq1187[3] = x.Protocol != ""
			yyq1187[4] = x.HostIP != ""
			var yynn1187 int
			if yyr1187 || yy2arr1187 {
				r.EncodeArrayStart(5)
			} else {
				yynn1187 = 1
				for _, b := range yyq1187 {
					if b {
						yynn1187++
					}
				}
				r.EncodeMapStart(yynn1187)
				yynn1187 = 0
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1187[0] {
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1187[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1190 := z.EncBinary()
					_ = yym1190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1187[1] {
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1187[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1193 := z.EncBinary()
					_ = yym1193
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1195 := z.EncBinary()
				_ = yym1195
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1187[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1187[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1187[4] {
					yym1199 := z.EncBinary()
					_ = yym1199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1187[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1200 := z.EncBinary()
					_ = yym1200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1187 || yy2arr1187 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1201 := z.DecBinary()
	_ = yym1201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1202 := r.ContainerType()
		if yyct1202 == codecSelferValueTypeMap1234 {
			yyl1202 := r.ReadMapStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1202, d)
			}
		} else if yyct1202 == codecSelferValueTypeArray1234 {
			yyl1202 := r.ReadArrayStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1203Slc
	var yyhl1203 bool = l >= 0
	for yyj1203 := 0; ; yyj1203++ {
		if yyhl1203 {
			if yyj1203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1203Slc = r.DecodeBytes(yys1203Slc, true, true)
		yys1203 := string(yys1203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1203 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1203)
		} // end switch yys1203
	} // end for yyj1203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1209 int
	var yyb1209 bool
	var yyhl1209 bool = l >= 0
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1209++
		if yyhl1209 {
			yyb1209 = yyj1209 > l
		} else {
			yyb1209 = r.CheckBreak()
		}
		if yyb1209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1215 := z.EncBinary()
		_ = yym1215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1216 := !z.EncBinary()
			yy2arr1216 := z.EncBasicHandle().StructToArray
			var yyq1216 [4]bool
			_, _, _ = yysep1216, yyq1216, yy2arr1216
			const yyr1216 bool = false
			yyq1216[1] = x.ReadOnly != false
			yyq1216[3] = x.SubPath != ""
			var yynn1216 int
			if yyr1216 || yy2arr1216 {
				r.EncodeArrayStart(4)
			} else {
				yynn1216 = 2
				for _, b := range yyq1216 {
					if b {
						yynn1216++
					}
				}
				r.EncodeMapStart(yynn1216)
				yynn1216 = 0
			}
			if yyr1216 || yy2arr1216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1218 := z.EncBinary()
				_ = yym1218
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1219 := z.EncBinary()
				_ = yym1219
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1216 || yy2arr1216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1216[1] {
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1216[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1222 := z.EncBinary()
					_ = yym1222
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1216 || yy2arr1216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1224 := z.EncBinary()
				_ = yym1224
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1225 := z.EncBinary()
				_ = yym1225
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1216 || yy2arr1216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1216[3] {
					yym1227 := z.EncBinary()
					_ = yym1227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1216[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1216 || yy2arr1216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1229 := z.DecBinary()
	_ = yym1229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1230 := r.ContainerType()
		if yyct1230 == codecSelferValueTypeMap1234 {
			yyl1230 := r.ReadMapStart()
			if yyl1230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1230, d)
			}
		} else if yyct1230 == codecSelferValueTypeArray1234 {
			yyl1230 := r.ReadArrayStart()
			if yyl1230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1231Slc
	var yyhl1231 bool = l >= 0
	for yyj1231 := 0; ; yyj1231++ {
		if yyhl1231 {
			if yyj1231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1231Slc = r.DecodeBytes(yys1231Slc, true, true)
		yys1231 := string(yys1231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1231 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1231)
		} // end switch yys1231
	} // end for yyj1231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1236 int
	var yyb1236 bool
	var yyhl1236 bool = l >= 0
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1236++
		if yyhl1236 {
			yyb1236 = yyj1236 > l
		} else {
			yyb1236 = r.CheckBreak()
		}
		if yyb1236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1241 := z.EncBinary()
		_ = yym1241
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1242 := !z.EncBinary()
			yy2arr1242 := z.EncBasicHandle().StructToArray
			var yyq1242 [3]bool
			_, _, _ = yysep1242, yyq1242, yy2arr1242
			const yyr1242 bool = false
			yyq1242[1] = x.Value != ""
			yyq1242[2] = x.ValueFrom != nil
			var yynn1242 int
			if yyr1242 || yy2arr1242 {
				r.EncodeArrayStart(3)
			} else {
				yynn1242 = 1
				for _, b := range yyq1242 {
					if b {
						yynn1242++
					}
				}
				r.EncodeMapStart(yynn1242)
				yynn1242 = 0
			}
			if yyr1242 || yy2arr1242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1244 := z.EncBinary()
				_ = yym1244
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1245 := z.EncBinary()
				_ = yym1245
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1242 || yy2arr1242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1242[1] {
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1242[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1242 || yy2arr1242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1242[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1242[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1242 || yy2arr1242 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1250 := z.DecBinary()
	_ = yym1250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1251 := r.ContainerType()
		if yyct1251 == codecSelferValueTypeMap1234 {
			yyl1251 := r.ReadMapStart()
			if yyl1251 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1251, d)
			}
		} else if yyct1251 == codecSelferValueTypeArray1234 {
			yyl1251 := r.ReadArrayStart()
			if yyl1251 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1252Slc
	var yyhl1252 bool = l >= 0
	for yyj1252 := 0; ; yyj1252++ {
		if yyhl1252 {
			if yyj1252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1252Slc = r.DecodeBytes(yys1252Slc, true, true)
		yys1252 := string(yys1252Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1252 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1252)
		} // end switch yys1252
	} // end for yyj1252
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1256 int
	var yyb1256 bool
	var yyhl1256 bool = l >= 0
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1256++
		if yyhl1256 {
			yyb1256 = yyj1256 > l
		} else {
			yyb1256 = r.CheckBreak()
		}
		if yyb1256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1260 := z.EncBinary()
		_ = yym1260
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1261 := !z.EncBinary()
			yy2arr1261 := z.EncBasicHandle().StructToArray
			var yyq1261 [4]bool
			_, _, _ = yysep1261, yyq1261, yy2arr1261
			const yyr1261 bool = false
			yyq1261[0] = x.FieldRef != nil
			yyq1261[1] = x.ResourceFieldRef != nil
			yyq1261[2] = x.ConfigMapKeyRef != nil
			yyq1261[3] = x.SecretKeyRef != nil
			var yynn1261 int
			if yyr1261 || yy2arr1261 {
				r.EncodeArrayStart(4)
			} else {
				yynn1261 = 0
				for _, b := range yyq1261 {
					if b {
						yynn1261++
					}
				}
				r.EncodeMapStart(yynn1261)
				yynn1261 = 0
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1266 := z.DecBinary()
	_ = yym1266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1267 := r.ContainerType()
		if yyct1267 == codecSelferValueTypeMap1234 {
			yyl1267 := r.ReadMapStart()
			if yyl1267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1267, d)
			}
		} else if yyct1267 == codecSelferValueTypeArray1234 {
			yyl1267 := r.ReadArrayStart()
			if yyl1267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1268Slc
	var yyhl1268 bool = l >= 0
	for yyj1268 := 0; ; yyj1268++ {
		if yyhl1268 {
			if yyj1268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1268Slc = r.DecodeBytes(yys1268Slc, true, true)
		yys1268 := string(yys1268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1268 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1268)
		} // end switch yys1268
	} // end for yyj1268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1273 int
	var yyb1273 bool
	var yyhl1273 bool = l >= 0
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1273++
		if yyhl1273 {
			yyb1273 = yyj1273 > l
		} else {
			yyb1273 = r.CheckBreak()
		}
		if yyb1273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1278 := z.EncBinary()
		_ = yym1278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1279 := !z.EncBinary()
			yy2arr1279 := z.EncBasicHandle().StructToArray
			var yyq1279 [2]bool
			_, _, _ = yysep1279, yyq1279, yy2arr1279
			const yyr1279 bool = false
			var yynn1279 int
			if yyr1279 || yy2arr1279 {
				r.EncodeArrayStart(2)
			} else {
				yynn1279 = 2
				for _, b := range yyq1279 {
					if b {
						yynn1279++
					}
				}
				r.EncodeMapStart(yynn1279)
				yynn1279 = 0
			}
			if yyr1279 || yy2arr1279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1281 := z.EncBinary()
				_ = yym1281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1282 := z.EncBinary()
				_ = yym1282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1279 || yy2arr1279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1284 := z.EncBinary()
				_ = yym1284
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1285 := z.EncBinary()
				_ = yym1285
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1279 || yy2arr1279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1286 := z.DecBinary()
	_ = yym1286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1287 := r.ContainerType()
		if yyct1287 == codecSelferValueTypeMap1234 {
			yyl1287 := r.ReadMapStart()
			if yyl1287 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1287, d)
			}
		} else if yyct1287 == codecSelferValueTypeArray1234 {
			yyl1287 := r.ReadArrayStart()
			if yyl1287 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1288Slc
	var yyhl1288 bool = l >= 0
	for yyj1288 := 0; ; yyj1288++ {
		if yyhl1288 {
			if yyj1288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1288Slc = r.DecodeBytes(yys1288Slc, true, true)
		yys1288 := string(yys1288Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1288 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1288)
		} // end switch yys1288
	} // end for yyj1288
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1291 int
	var yyb1291 bool
	var yyhl1291 bool = l >= 0
	yyj1291++
	if yyhl1291 {
		yyb1291 = yyj1291 > l
	} else {
		yyb1291 = r.CheckBreak()
	}
	if yyb1291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1291++
	if yyhl1291 {
		yyb1291 = yyj1291 > l
	} else {
		yyb1291 = r.CheckBreak()
	}
	if yyb1291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1291++
		if yyhl1291 {
			yyb1291 = yyj1291 > l
		} else {
			yyb1291 = r.CheckBreak()
		}
		if yyb1291 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1291-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1294 := z.EncBinary()
		_ = yym1294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1295 := !z.EncBinary()
			yy2arr1295 := z.EncBasicHandle().StructToArray
			var yyq1295 [3]bool
			_, _, _ = yysep1295, yyq1295, yy2arr1295
			const yyr1295 bool = false
			yyq1295[0] = x.ContainerName != ""
			yyq1295[2] = true
			var yynn1295 int
			if yyr1295 || yy2arr1295 {
				r.EncodeArrayStart(3)
			} else {
				yynn1295 = 1
				for _, b := range yyq1295 {
					if b {
						yynn1295++
					}
				}
				r.EncodeMapStart(yynn1295)
				yynn1295 = 0
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[0] {
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1295[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1300 := z.EncBinary()
				_ = yym1300
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1301 := z.EncBinary()
				_ = yym1301
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[2] {
					yy1303 := &x.Divisor
					yym1304 := z.EncBinary()
					_ = yym1304
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1303) {
					} else if !yym1304 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1303)
					} else {
						z.EncFallback(yy1303)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1305 := &x.Divisor
					yym1306 := z.EncBinary()
					_ = yym1306
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1305) {
					} else if !yym1306 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1305)
					} else {
						z.EncFallback(yy1305)
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1307 := z.DecBinary()
	_ = yym1307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1308 := r.ContainerType()
		if yyct1308 == codecSelferValueTypeMap1234 {
			yyl1308 := r.ReadMapStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1308, d)
			}
		} else if yyct1308 == codecSelferValueTypeArray1234 {
			yyl1308 := r.ReadArrayStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1309Slc
	var yyhl1309 bool = l >= 0
	for yyj1309 := 0; ; yyj1309++ {
		if yyhl1309 {
			if yyj1309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1309Slc = r.DecodeBytes(yys1309Slc, true, true)
		yys1309 := string(yys1309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1309 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1312 := &x.Divisor
				yym1313 := z.DecBinary()
				_ = yym1313
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1312) {
				} else if !yym1313 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1312)
				} else {
					z.DecFallback(yyv1312, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1309)
		} // end switch yys1309
	} // end for yyj1309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1314 int
	var yyb1314 bool
	var yyhl1314 bool = l >= 0
	yyj1314++
	if yyhl1314 {
		yyb1314 = yyj1314 > l
	} else {
		yyb1314 = r.CheckBreak()
	}
	if yyb1314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1314++
	if yyhl1314 {
		yyb1314 = yyj1314 > l
	} else {
		yyb1314 = r.CheckBreak()
	}
	if yyb1314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1314++
	if yyhl1314 {
		yyb1314 = yyj1314 > l
	} else {
		yyb1314 = r.CheckBreak()
	}
	if yyb1314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1317 := &x.Divisor
		yym1318 := z.DecBinary()
		_ = yym1318
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1317) {
		} else if !yym1318 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1317)
		} else {
			z.DecFallback(yyv1317, false)
		}
	}
	for {
		yyj1314++
		if yyhl1314 {
			yyb1314 = yyj1314 > l
		} else {
			yyb1314 = r.CheckBreak()
		}
		if yyb1314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1319 := z.EncBinary()
		_ = yym1319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1320 := !z.EncBinary()
			yy2arr1320 := z.EncBasicHandle().StructToArray
			var yyq1320 [2]bool
			_, _, _ = yysep1320, yyq1320, yy2arr1320
			const yyr1320 bool = false
			var yynn1320 int
			if yyr1320 || yy2arr1320 {
				r.EncodeArrayStart(2)
			} else {
				yynn1320 = 2
				for _, b := range yyq1320 {
					if b {
						yynn1320++
					}
				}
				r.EncodeMapStart(yynn1320)
				yynn1320 = 0
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1322 := z.EncBinary()
				_ = yym1322
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1323 := z.EncBinary()
				_ = yym1323
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1325 := z.EncBinary()
				_ = yym1325
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1326 := z.EncBinary()
				_ = yym1326
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1327 := z.DecBinary()
	_ = yym1327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1328 := r.ContainerType()
		if yyct1328 == codecSelferValueTypeMap1234 {
			yyl1328 := r.ReadMapStart()
			if yyl1328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1328, d)
			}
		} else if yyct1328 == codecSelferValueTypeArray1234 {
			yyl1328 := r.ReadArrayStart()
			if yyl1328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1329Slc
	var yyhl1329 bool = l >= 0
	for yyj1329 := 0; ; yyj1329++ {
		if yyhl1329 {
			if yyj1329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1329Slc = r.DecodeBytes(yys1329Slc, true, true)
		yys1329 := string(yys1329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1329 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1329)
		} // end switch yys1329
	} // end for yyj1329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1332 int
	var yyb1332 bool
	var yyhl1332 bool = l >= 0
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1332++
		if yyhl1332 {
			yyb1332 = yyj1332 > l
		} else {
			yyb1332 = r.CheckBreak()
		}
		if yyb1332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1335 := z.EncBinary()
		_ = yym1335
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1336 := !z.EncBinary()
			yy2arr1336 := z.EncBasicHandle().StructToArray
			var yyq1336 [2]bool
			_, _, _ = yysep1336, yyq1336, yy2arr1336
			const yyr1336 bool = false
			var yynn1336 int
			if yyr1336 || yy2arr1336 {
				r.EncodeArrayStart(2)
			} else {
				yynn1336 = 2
				for _, b := range yyq1336 {
					if b {
						yynn1336++
					}
				}
				r.EncodeMapStart(yynn1336)
				yynn1336 = 0
			}
			if yyr1336 || yy2arr1336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1338 := z.EncBinary()
				_ = yym1338
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1339 := z.EncBinary()
				_ = yym1339
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1336 || yy2arr1336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1341 := z.EncBinary()
				_ = yym1341
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1342 := z.EncBinary()
				_ = yym1342
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1336 || yy2arr1336 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1343 := z.DecBinary()
	_ = yym1343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1344 := r.ContainerType()
		if yyct1344 == codecSelferValueTypeMap1234 {
			yyl1344 := r.ReadMapStart()
			if yyl1344 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1344, d)
			}
		} else if yyct1344 == codecSelferValueTypeArray1234 {
			yyl1344 := r.ReadArrayStart()
			if yyl1344 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1345Slc
	var yyhl1345 bool = l >= 0
	for yyj1345 := 0; ; yyj1345++ {
		if yyhl1345 {
			if yyj1345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1345Slc = r.DecodeBytes(yys1345Slc, true, true)
		yys1345 := string(yys1345Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1345 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1345)
		} // end switch yys1345
	} // end for yyj1345
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1348 int
	var yyb1348 bool
	var yyhl1348 bool = l >= 0
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1348++
		if yyhl1348 {
			yyb1348 = yyj1348 > l
		} else {
			yyb1348 = r.CheckBreak()
		}
		if yyb1348 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1348-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1351 := z.EncBinary()
		_ = yym1351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1352 := !z.EncBinary()
			yy2arr1352 := z.EncBasicHandle().StructToArray
			var yyq1352 [2]bool
			_, _, _ = yysep1352, yyq1352, yy2arr1352
			const yyr1352 bool = false
			var yynn1352 int
			if yyr1352 || yy2arr1352 {
				r.EncodeArrayStart(2)
			} else {
				yynn1352 = 2
				for _, b := range yyq1352 {
					if b {
						yynn1352++
					}
				}
				r.EncodeMapStart(yynn1352)
				yynn1352 = 0
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1354 := z.EncBinary()
				_ = yym1354
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1355 := z.EncBinary()
				_ = yym1355
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1357 := z.EncBinary()
				_ = yym1357
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1358 := z.EncBinary()
				_ = yym1358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1352 || yy2arr1352 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1359 := z.DecBinary()
	_ = yym1359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1360 := r.ContainerType()
		if yyct1360 == codecSelferValueTypeMap1234 {
			yyl1360 := r.ReadMapStart()
			if yyl1360 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1360, d)
			}
		} else if yyct1360 == codecSelferValueTypeArray1234 {
			yyl1360 := r.ReadArrayStart()
			if yyl1360 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1361Slc
	var yyhl1361 bool = l >= 0
	for yyj1361 := 0; ; yyj1361++ {
		if yyhl1361 {
			if yyj1361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1361Slc = r.DecodeBytes(yys1361Slc, true, true)
		yys1361 := string(yys1361Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1361 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1361)
		} // end switch yys1361
	} // end for yyj1361
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1364 int
	var yyb1364 bool
	var yyhl1364 bool = l >= 0
	yyj1364++
	if yyhl1364 {
		yyb1364 = yyj1364 > l
	} else {
		yyb1364 = r.CheckBreak()
	}
	if yyb1364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1364++
	if yyhl1364 {
		yyb1364 = yyj1364 > l
	} else {
		yyb1364 = r.CheckBreak()
	}
	if yyb1364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1364++
		if yyhl1364 {
			yyb1364 = yyj1364 > l
		} else {
			yyb1364 = r.CheckBreak()
		}
		if yyb1364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1367 := z.EncBinary()
		_ = yym1367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1368 := !z.EncBinary()
			yy2arr1368 := z.EncBasicHandle().StructToArray
			var yyq1368 [5]bool
			_, _, _ = yysep1368, yyq1368, yy2arr1368
			const yyr1368 bool = false
			yyq1368[0] = x.Path != ""
			yyq1368[1] = true
			yyq1368[2] = x.Host != ""
			yyq1368[3] = x.Scheme != ""
			yyq1368[4] = len(x.HTTPHeaders) != 0
			var yynn1368 int
			if yyr1368 || yy2arr1368 {
				r.EncodeArrayStart(5)
			} else {
				yynn1368 = 0
				for _, b := range yyq1368 {
					if b {
						yynn1368++
					}
				}
				r.EncodeMapStart(yynn1368)
				yynn1368 = 0
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[0] {
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1368[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[1] {
					yy1373 := &x.Port
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1373) {
					} else if !yym1374 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1373)
					} else {
						z.EncFallback(yy1373)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1368[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1375 := &x.Port
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1375) {
					} else if !yym1376 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1375)
					} else {
						z.EncFallback(yy1375)
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[2] {
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1368[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1368[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1382 := z.EncBinary()
						_ = yym1382
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1368[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1383 := z.EncBinary()
						_ = yym1383
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1384 := z.DecBinary()
	_ = yym1384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1385 := r.ContainerType()
		if yyct1385 == codecSelferValueTypeMap1234 {
			yyl1385 := r.ReadMapStart()
			if yyl1385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1385, d)
			}
		} else if yyct1385 == codecSelferValueTypeArray1234 {
			yyl1385 := r.ReadArrayStart()
			if yyl1385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1386Slc
	var yyhl1386 bool = l >= 0
	for yyj1386 := 0; ; yyj1386++ {
		if yyhl1386 {
			if yyj1386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1386Slc = r.DecodeBytes(yys1386Slc, true, true)
		yys1386 := string(yys1386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1386 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1388 := &x.Port
				yym1389 := z.DecBinary()
				_ = yym1389
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1388) {
				} else if !yym1389 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1388)
				} else {
					z.DecFallback(yyv1388, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1392 := &x.HTTPHeaders
				yym1393 := z.DecBinary()
				_ = yym1393
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1392), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1386)
		} // end switch yys1386
	} // end for yyj1386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1394 int
	var yyb1394 bool
	var yyhl1394 bool = l >= 0
	yyj1394++
	if yyhl1394 {
		yyb1394 = yyj1394 > l
	} else {
		yyb1394 = r.CheckBreak()
	}
	if yyb1394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1394++
	if yyhl1394 {
		yyb1394 = yyj1394 > l
	} else {
		yyb1394 = r.CheckBreak()
	}
	if yyb1394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1396 := &x.Port
		yym1397 := z.DecBinary()
		_ = yym1397
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1396) {
		} else if !yym1397 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1396)
		} else {
			z.DecFallback(yyv1396, false)
		}
	}
	yyj1394++
	if yyhl1394 {
		yyb1394 = yyj1394 > l
	} else {
		yyb1394 = r.CheckBreak()
	}
	if yyb1394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1394++
	if yyhl1394 {
		yyb1394 = yyj1394 > l
	} else {
		yyb1394 = r.CheckBreak()
	}
	if yyb1394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1394++
	if yyhl1394 {
		yyb1394 = yyj1394 > l
	} else {
		yyb1394 = r.CheckBreak()
	}
	if yyb1394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1400 := &x.HTTPHeaders
		yym1401 := z.DecBinary()
		_ = yym1401
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1400), d)
		}
	}
	for {
		yyj1394++
		if yyhl1394 {
			yyb1394 = yyj1394 > l
		} else {
			yyb1394 = r.CheckBreak()
		}
		if yyb1394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1402 := z.EncBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1403 := z.DecBinary()
	_ = yym1403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1404 := z.EncBinary()
		_ = yym1404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1405 := !z.EncBinary()
			yy2arr1405 := z.EncBasicHandle().StructToArray
			var yyq1405 [1]bool
			_, _, _ = yysep1405, yyq1405, yy2arr1405
			const yyr1405 bool = false
			yyq1405[0] = true
			var yynn1405 int
			if yyr1405 || yy2arr1405 {
				r.EncodeArrayStart(1)
			} else {
				yynn1405 = 0
				for _, b := range yyq1405 {
					if b {
						yynn1405++
					}
				}
				r.EncodeMapStart(yynn1405)
				yynn1405 = 0
			}
			if yyr1405 || yy2arr1405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1405[0] {
					yy1407 := &x.Port
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1407) {
					} else if !yym1408 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1407)
					} else {
						z.EncFallback(yy1407)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1409 := &x.Port
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1409) {
					} else if !yym1410 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1409)
					} else {
						z.EncFallback(yy1409)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1411 := z.DecBinary()
	_ = yym1411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1412 := r.ContainerType()
		if yyct1412 == codecSelferValueTypeMap1234 {
			yyl1412 := r.ReadMapStart()
			if yyl1412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1412, d)
			}
		} else if yyct1412 == codecSelferValueTypeArray1234 {
			yyl1412 := r.ReadArrayStart()
			if yyl1412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1413Slc
	var yyhl1413 bool = l >= 0
	for yyj1413 := 0; ; yyj1413++ {
		if yyhl1413 {
			if yyj1413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1413Slc = r.DecodeBytes(yys1413Slc, true, true)
		yys1413 := string(yys1413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1413 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1414 := &x.Port
				yym1415 := z.DecBinary()
				_ = yym1415
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1414) {
				} else if !yym1415 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1414)
				} else {
					z.DecFallback(yyv1414, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1413)
		} // end switch yys1413
	} // end for yyj1413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1416 int
	var yyb1416 bool
	var yyhl1416 bool = l >= 0
	yyj1416++
	if yyhl1416 {
		yyb1416 = yyj1416 > l
	} else {
		yyb1416 = r.CheckBreak()
	}
	if yyb1416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1417 := &x.Port
		yym1418 := z.DecBinary()
		_ = yym1418
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1417) {
		} else if !yym1418 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1417)
		} else {
			z.DecFallback(yyv1417, false)
		}
	}
	for {
		yyj1416++
		if yyhl1416 {
			yyb1416 = yyj1416 > l
		} else {
			yyb1416 = r.CheckBreak()
		}
		if yyb1416 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1416-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1419 := z.EncBinary()
		_ = yym1419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1420 := !z.EncBinary()
			yy2arr1420 := z.EncBasicHandle().StructToArray
			var yyq1420 [1]bool
			_, _, _ = yysep1420, yyq1420, yy2arr1420
			const yyr1420 bool = false
			yyq1420[0] = len(x.Command) != 0
			var yynn1420 int
			if yyr1420 || yy2arr1420 {
				r.EncodeArrayStart(1)
			} else {
				yynn1420 = 0
				for _, b := range yyq1420 {
					if b {
						yynn1420++
					}
				}
				r.EncodeMapStart(yynn1420)
				yynn1420 = 0
			}
			if yyr1420 || yy2arr1420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1420[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1422 := z.EncBinary()
						_ = yym1422
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1423 := z.EncBinary()
						_ = yym1423
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1424 := z.DecBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1425 := r.ContainerType()
		if yyct1425 == codecSelferValueTypeMap1234 {
			yyl1425 := r.ReadMapStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1425, d)
			}
		} else if yyct1425 == codecSelferValueTypeArray1234 {
			yyl1425 := r.ReadArrayStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1425, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1426Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1426Slc
	var yyhl1426 bool = l >= 0
	for yyj1426 := 0; ; yyj1426++ {
		if yyhl1426 {
			if yyj1426 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1426Slc = r.DecodeBytes(yys1426Slc, true, true)
		yys1426 := string(yys1426Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1426 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1427 := &x.Command
				yym1428 := z.DecBinary()
				_ = yym1428
				if false {
				} else {
					z.F.DecSliceStringX(yyv1427, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1426)
		} // end switch yys1426
	} // end for yyj1426
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1429 int
	var yyb1429 bool
	var yyhl1429 bool = l >= 0
	yyj1429++
	if yyhl1429 {
		yyb1429 = yyj1429 > l
	} else {
		yyb1429 = r.CheckBreak()
	}
	if yyb1429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1430 := &x.Command
		yym1431 := z.DecBinary()
		_ = yym1431
		if false {
		} else {
			z.F.DecSliceStringX(yyv1430, false, d)
		}
	}
	for {
		yyj1429++
		if yyhl1429 {
			yyb1429 = yyj1429 > l
		} else {
			yyb1429 = r.CheckBreak()
		}
		if yyb1429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1432 := z.EncBinary()
		_ = yym1432
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1433 := !z.EncBinary()
			yy2arr1433 := z.EncBasicHandle().StructToArray
			var yyq1433 [8]bool
			_, _, _ = yysep1433, yyq1433, yy2arr1433
			const yyr1433 bool = false
			yyq1433[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1433[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1433[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1433[3] = x.InitialDelaySeconds != 0
			yyq1433[4] = x.TimeoutSeconds != 0
			yyq1433[5] = x.PeriodSeconds != 0
			yyq1433[6] = x.SuccessThreshold != 0
			yyq1433[7] = x.FailureThreshold != 0
			var yynn1433 int
			if yyr1433 || yy2arr1433 {
				r.EncodeArrayStart(8)
			} else {
				yynn1433 = 0
				for _, b := range yyq1433 {
					if b {
						yynn1433++
					}
				}
				r.EncodeMapStart(yynn1433)
				yynn1433 = 0
			}
			var yyn1434 bool
			if x.Handler.Exec == nil {
				yyn1434 = true
				goto LABEL1434
			}
		LABEL1434:
			if yyr1433 || yy2arr1433 {
				if yyn1434 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1433[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1433[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1434 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1435 bool
			if x.Handler.HTTPGet == nil {
				yyn1435 = true
				goto LABEL1435
			}
		LABEL1435:
			if yyr1433 || yy2arr1433 {
				if yyn1435 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1433[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1433[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1435 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1436 bool
			if x.Handler.TCPSocket == nil {
				yyn1436 = true
				goto LABEL1436
			}
		LABEL1436:
			if yyr1433 || yy2arr1433 {
				if yyn1436 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1433[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1433[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1436 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1433[3] {
					yym1438 := z.EncBinary()
					_ = yym1438
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1433[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1439 := z.EncBinary()
					_ = yym1439
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1433[4] {
					yym1441 := z.EncBinary()
					_ = yym1441
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1433[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1442 := z.EncBinary()
					_ = yym1442
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1433[5] {
					yym1444 := z.EncBinary()
					_ = yym1444
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1433[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1445 := z.EncBinary()
					_ = yym1445
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1433[6] {
					yym1447 := z.EncBinary()
					_ = yym1447
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1433[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1448 := z.EncBinary()
					_ = yym1448
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1433[7] {
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1433[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1451 := z.EncBinary()
					_ = yym1451
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1452 := z.DecBinary()
	_ = yym1452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1453 := r.ContainerType()
		if yyct1453 == codecSelferValueTypeMap1234 {
			yyl1453 := r.ReadMapStart()
			if yyl1453 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1453, d)
			}
		} else if yyct1453 == codecSelferValueTypeArray1234 {
			yyl1453 := r.ReadArrayStart()
			if yyl1453 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1453, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1454Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1454Slc
	var yyhl1454 bool = l >= 0
	for yyj1454 := 0; ; yyj1454++ {
		if yyhl1454 {
			if yyj1454 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1454Slc = r.DecodeBytes(yys1454Slc, true, true)
		yys1454 := string(yys1454Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1454 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1454)
		} // end switch yys1454
	} // end for yyj1454
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1463 int
	var yyb1463 bool
	var yyhl1463 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1463++
		if yyhl1463 {
			yyb1463 = yyj1463 > l
		} else {
			yyb1463 = r.CheckBreak()
		}
		if yyb1463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1472 := z.EncBinary()
	_ = yym1472
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1473 := z.DecBinary()
	_ = yym1473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1474 := z.EncBinary()
	_ = yym1474
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1475 := z.DecBinary()
	_ = yym1475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1476 := z.EncBinary()
		_ = yym1476
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1477 := !z.EncBinary()
			yy2arr1477 := z.EncBasicHandle().StructToArray
			var yyq1477 [2]bool
			_, _, _ = yysep1477, yyq1477, yy2arr1477
			const yyr1477 bool = false
			yyq1477[0] = len(x.Add) != 0
			yyq1477[1] = len(x.Drop) != 0
			var yynn1477 int
			if yyr1477 || yy2arr1477 {
				r.EncodeArrayStart(2)
			} else {
				yynn1477 = 0
				for _, b := range yyq1477 {
					if b {
						yynn1477++
					}
				}
				r.EncodeMapStart(yynn1477)
				yynn1477 = 0
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1479 := z.EncBinary()
						_ = yym1479
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1477[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1480 := z.EncBinary()
						_ = yym1480
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1482 := z.EncBinary()
						_ = yym1482
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1477[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1483 := z.EncBinary()
						_ = yym1483
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1484 := z.DecBinary()
	_ = yym1484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1485 := r.ContainerType()
		if yyct1485 == codecSelferValueTypeMap1234 {
			yyl1485 := r.ReadMapStart()
			if yyl1485 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1485, d)
			}
		} else if yyct1485 == codecSelferValueTypeArray1234 {
			yyl1485 := r.ReadArrayStart()
			if yyl1485 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1486Slc
	var yyhl1486 bool = l >= 0
	for yyj1486 := 0; ; yyj1486++ {
		if yyhl1486 {
			if yyj1486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1486Slc = r.DecodeBytes(yys1486Slc, true, true)
		yys1486 := string(yys1486Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1486 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1487 := &x.Add
				yym1488 := z.DecBinary()
				_ = yym1488
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1487), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1489 := &x.Drop
				yym1490 := z.DecBinary()
				_ = yym1490
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1489), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1486)
		} // end switch yys1486
	} // end for yyj1486
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1491 int
	var yyb1491 bool
	var yyhl1491 bool = l >= 0
	yyj1491++
	if yyhl1491 {
		yyb1491 = yyj1491 > l
	} else {
		yyb1491 = r.CheckBreak()
	}
	if yyb1491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1492 := &x.Add
		yym1493 := z.DecBinary()
		_ = yym1493
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1492), d)
		}
	}
	yyj1491++
	if yyhl1491 {
		yyb1491 = yyj1491 > l
	} else {
		yyb1491 = r.CheckBreak()
	}
	if yyb1491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1494 := &x.Drop
		yym1495 := z.DecBinary()
		_ = yym1495
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1494), d)
		}
	}
	for {
		yyj1491++
		if yyhl1491 {
			yyb1491 = yyj1491 > l
		} else {
			yyb1491 = r.CheckBreak()
		}
		if yyb1491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1496 := z.EncBinary()
		_ = yym1496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1497 := !z.EncBinary()
			yy2arr1497 := z.EncBasicHandle().StructToArray
			var yyq1497 [2]bool
			_, _, _ = yysep1497, yyq1497, yy2arr1497
			const yyr1497 bool = false
			yyq1497[0] = len(x.Limits) != 0
			yyq1497[1] = len(x.Requests) != 0
			var yynn1497 int
			if yyr1497 || yy2arr1497 {
				r.EncodeArrayStart(2)
			} else {
				yynn1497 = 0
				for _, b := range yyq1497 {
					if b {
						yynn1497++
					}
				}
				r.EncodeMapStart(yynn1497)
				yynn1497 = 0
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1500 := z.DecBinary()
	_ = yym1500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1501 := r.ContainerType()
		if yyct1501 == codecSelferValueTypeMap1234 {
			yyl1501 := r.ReadMapStart()
			if yyl1501 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1501, d)
			}
		} else if yyct1501 == codecSelferValueTypeArray1234 {
			yyl1501 := r.ReadArrayStart()
			if yyl1501 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1501, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1502Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1502Slc
	var yyhl1502 bool = l >= 0
	for yyj1502 := 0; ; yyj1502++ {
		if yyhl1502 {
			if yyj1502 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1502Slc = r.DecodeBytes(yys1502Slc, true, true)
		yys1502 := string(yys1502Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1502 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1503 := &x.Limits
				yyv1503.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1504 := &x.Requests
				yyv1504.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1502)
		} // end switch yys1502
	} // end for yyj1502
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1505 int
	var yyb1505 bool
	var yyhl1505 bool = l >= 0
	yyj1505++
	if yyhl1505 {
		yyb1505 = yyj1505 > l
	} else {
		yyb1505 = r.CheckBreak()
	}
	if yyb1505 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1506 := &x.Limits
		yyv1506.CodecDecodeSelf(d)
	}
	yyj1505++
	if yyhl1505 {
		yyb1505 = yyj1505 > l
	} else {
		yyb1505 = r.CheckBreak()
	}
	if yyb1505 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1507 := &x.Requests
		yyv1507.CodecDecodeSelf(d)
	}
	for {
		yyj1505++
		if yyhl1505 {
			yyb1505 = yyj1505 > l
		} else {
			yyb1505 = r.CheckBreak()
		}
		if yyb1505 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1505-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1508 := z.EncBinary()
		_ = yym1508
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1509 := !z.EncBinary()
			yy2arr1509 := z.EncBasicHandle().StructToArray
			var yyq1509 [18]bool
			_, _, _ = yysep1509, yyq1509, yy2arr1509
			const yyr1509 bool = false
			yyq1509[2] = len(x.Command) != 0
			yyq1509[3] = len(x.Args) != 0
			yyq1509[4] = x.WorkingDir != ""
			yyq1509[5] = len(x.Ports) != 0
			yyq1509[6] = len(x.Env) != 0
			yyq1509[7] = true
			yyq1509[8] = len(x.VolumeMounts) != 0
			yyq1509[9] = x.LivenessProbe != nil
			yyq1509[10] = x.ReadinessProbe != nil
			yyq1509[11] = x.Lifecycle != nil
			yyq1509[12] = x.TerminationMessagePath != ""
			yyq1509[14] = x.SecurityContext != nil
			yyq1509[15] = x.Stdin != false
			yyq1509[16] = x.StdinOnce != false
			yyq1509[17] = x.TTY != false
			var yynn1509 int
			if yyr1509 || yy2arr1509 {
				r.EncodeArrayStart(18)
			} else {
				yynn1509 = 3
				for _, b := range yyq1509 {
					if b {
						yynn1509++
					}
				}
				r.EncodeMapStart(yynn1509)
				yynn1509 = 0
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1511 := z.EncBinary()
				_ = yym1511
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1512 := z.EncBinary()
				_ = yym1512
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1514 := z.EncBinary()
				_ = yym1514
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1515 := z.EncBinary()
				_ = yym1515
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1517 := z.EncBinary()
						_ = yym1517
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1518 := z.EncBinary()
						_ = yym1518
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1520 := z.EncBinary()
						_ = yym1520
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[4] {
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1509[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1526 := z.EncBinary()
						_ = yym1526
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1527 := z.EncBinary()
						_ = yym1527
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1530 := z.EncBinary()
						_ = yym1530
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[7] {
					yy1532 := &x.Resources
					yy1532.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1533 := &x.Resources
					yy1533.CodecEncodeSelf(e)
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1535 := z.EncBinary()
						_ = yym1535
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1536 := z.EncBinary()
						_ = yym1536
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[12] {
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1509[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1542 := z.EncBinary()
					_ = yym1542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1509[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[15] {
					yym1546 := z.EncBinary()
					_ = yym1546
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1509[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1547 := z.EncBinary()
					_ = yym1547
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[16] {
					yym1549 := z.EncBinary()
					_ = yym1549
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1509[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[17] {
					yym1552 := z.EncBinary()
					_ = yym1552
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1509[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1553 := z.EncBinary()
					_ = yym1553
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1554 := z.DecBinary()
	_ = yym1554
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1555 := r.ContainerType()
		if yyct1555 == codecSelferValueTypeMap1234 {
			yyl1555 := r.ReadMapStart()
			if yyl1555 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1555, d)
			}
		} else if yyct1555 == codecSelferValueTypeArray1234 {
			yyl1555 := r.ReadArrayStart()
			if yyl1555 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1555, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1556Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1556Slc
	var yyhl1556 bool = l >= 0
	for yyj1556 := 0; ; yyj1556++ {
		if yyhl1556 {
			if yyj1556 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1556Slc = r.DecodeBytes(yys1556Slc, true, true)
		yys1556 := string(yys1556Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1556 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1559 := &x.Command
				yym1560 := z.DecBinary()
				_ = yym1560
				if false {
				} else {
					z.F.DecSliceStringX(yyv1559, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1561 := &x.Args
				yym1562 := z.DecBinary()
				_ = yym1562
				if false {
				} else {
					z.F.DecSliceStringX(yyv1561, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1564 := &x.Ports
				yym1565 := z.DecBinary()
				_ = yym1565
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1564), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1566 := &x.Env
				yym1567 := z.DecBinary()
				_ = yym1567
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1566), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1568 := &x.Resources
				yyv1568.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1569 := &x.VolumeMounts
				yym1570 := z.DecBinary()
				_ = yym1570
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1569), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1556)
		} // end switch yys1556
	} // end for yyj1556
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1580 int
	var yyb1580 bool
	var yyhl1580 bool = l >= 0
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1583 := &x.Command
		yym1584 := z.DecBinary()
		_ = yym1584
		if false {
		} else {
			z.F.DecSliceStringX(yyv1583, false, d)
		}
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1585 := &x.Args
		yym1586 := z.DecBinary()
		_ = yym1586
		if false {
		} else {
			z.F.DecSliceStringX(yyv1585, false, d)
		}
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1588 := &x.Ports
		yym1589 := z.DecBinary()
		_ = yym1589
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1588), d)
		}
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1590 := &x.Env
		yym1591 := z.DecBinary()
		_ = yym1591
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1590), d)
		}
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1592 := &x.Resources
		yyv1592.CodecDecodeSelf(d)
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1593 := &x.VolumeMounts
		yym1594 := z.DecBinary()
		_ = yym1594
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1593), d)
		}
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1580++
		if yyhl1580 {
			yyb1580 = yyj1580 > l
		} else {
			yyb1580 = r.CheckBreak()
		}
		if yyb1580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1604 := z.EncBinary()
		_ = yym1604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1605 := !z.EncBinary()
			yy2arr1605 := z.EncBasicHandle().StructToArray
			var yyq1605 [3]bool
			_, _, _ = yysep1605, yyq1605, yy2arr1605
			const yyr1605 bool = false
			yyq1605[0] = x.Exec != nil
			yyq1605[1] = x.HTTPGet != nil
			yyq1605[2] = x.TCPSocket != nil
			var yynn1605 int
			if yyr1605 || yy2arr1605 {
				r.EncodeArrayStart(3)
			} else {
				yynn1605 = 0
				for _, b := range yyq1605 {
					if b {
						yynn1605++
					}
				}
				r.EncodeMapStart(yynn1605)
				yynn1605 = 0
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1609 := z.DecBinary()
	_ = yym1609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1610 := r.ContainerType()
		if yyct1610 == codecSelferValueTypeMap1234 {
			yyl1610 := r.ReadMapStart()
			if yyl1610 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1610, d)
			}
		} else if yyct1610 == codecSelferValueTypeArray1234 {
			yyl1610 := r.ReadArrayStart()
			if yyl1610 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1611Slc
	var yyhl1611 bool = l >= 0
	for yyj1611 := 0; ; yyj1611++ {
		if yyhl1611 {
			if yyj1611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1611Slc = r.DecodeBytes(yys1611Slc, true, true)
		yys1611 := string(yys1611Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1611 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1611)
		} // end switch yys1611
	} // end for yyj1611
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1615 int
	var yyb1615 bool
	var yyhl1615 bool = l >= 0
	yyj1615++
	if yyhl1615 {
		yyb1615 = yyj1615 > l
	} else {
		yyb1615 = r.CheckBreak()
	}
	if yyb1615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1615++
	if yyhl1615 {
		yyb1615 = yyj1615 > l
	} else {
		yyb1615 = r.CheckBreak()
	}
	if yyb1615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1615++
	if yyhl1615 {
		yyb1615 = yyj1615 > l
	} else {
		yyb1615 = r.CheckBreak()
	}
	if yyb1615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1615++
		if yyhl1615 {
			yyb1615 = yyj1615 > l
		} else {
			yyb1615 = r.CheckBreak()
		}
		if yyb1615 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1615-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1619 := z.EncBinary()
		_ = yym1619
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1620 := !z.EncBinary()
			yy2arr1620 := z.EncBasicHandle().StructToArray
			var yyq1620 [2]bool
			_, _, _ = yysep1620, yyq1620, yy2arr1620
			const yyr1620 bool = false
			yyq1620[0] = x.PostStart != nil
			yyq1620[1] = x.PreStop != nil
			var yynn1620 int
			if yyr1620 || yy2arr1620 {
				r.EncodeArrayStart(2)
			} else {
				yynn1620 = 0
				for _, b := range yyq1620 {
					if b {
						yynn1620++
					}
				}
				r.EncodeMapStart(yynn1620)
				yynn1620 = 0
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1620[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1620[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1620[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1620[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1620 || yy2arr1620 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1623 := z.DecBinary()
	_ = yym1623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1624 := r.ContainerType()
		if yyct1624 == codecSelferValueTypeMap1234 {
			yyl1624 := r.ReadMapStart()
			if yyl1624 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1624, d)
			}
		} else if yyct1624 == codecSelferValueTypeArray1234 {
			yyl1624 := r.ReadArrayStart()
			if yyl1624 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1624, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1625Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1625Slc
	var yyhl1625 bool = l >= 0
	for yyj1625 := 0; ; yyj1625++ {
		if yyhl1625 {
			if yyj1625 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1625Slc = r.DecodeBytes(yys1625Slc, true, true)
		yys1625 := string(yys1625Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1625 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1625)
		} // end switch yys1625
	} // end for yyj1625
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1628 int
	var yyb1628 bool
	var yyhl1628 bool = l >= 0
	yyj1628++
	if yyhl1628 {
		yyb1628 = yyj1628 > l
	} else {
		yyb1628 = r.CheckBreak()
	}
	if yyb1628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1628++
	if yyhl1628 {
		yyb1628 = yyj1628 > l
	} else {
		yyb1628 = r.CheckBreak()
	}
	if yyb1628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1628++
		if yyhl1628 {
			yyb1628 = yyj1628 > l
		} else {
			yyb1628 = r.CheckBreak()
		}
		if yyb1628 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1628-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1631 := z.EncBinary()
	_ = yym1631
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1632 := z.DecBinary()
	_ = yym1632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1633 := z.EncBinary()
		_ = yym1633
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1634 := !z.EncBinary()
			yy2arr1634 := z.EncBasicHandle().StructToArray
			var yyq1634 [2]bool
			_, _, _ = yysep1634, yyq1634, yy2arr1634
			const yyr1634 bool = false
			yyq1634[0] = x.Reason != ""
			yyq1634[1] = x.Message != ""
			var yynn1634 int
			if yyr1634 || yy2arr1634 {
				r.EncodeArrayStart(2)
			} else {
				yynn1634 = 0
				for _, b := range yyq1634 {
					if b {
						yynn1634++
					}
				}
				r.EncodeMapStart(yynn1634)
				yynn1634 = 0
			}
			if yyr1634 || yy2arr1634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1634[0] {
					yym1636 := z.EncBinary()
					_ = yym1636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1634[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1637 := z.EncBinary()
					_ = yym1637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1634 || yy2arr1634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1634[1] {
					yym1639 := z.EncBinary()
					_ = yym1639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1634[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1640 := z.EncBinary()
					_ = yym1640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1634 || yy2arr1634 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1641 := z.DecBinary()
	_ = yym1641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1642 := r.ContainerType()
		if yyct1642 == codecSelferValueTypeMap1234 {
			yyl1642 := r.ReadMapStart()
			if yyl1642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1642, d)
			}
		} else if yyct1642 == codecSelferValueTypeArray1234 {
			yyl1642 := r.ReadArrayStart()
			if yyl1642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1643Slc
	var yyhl1643 bool = l >= 0
	for yyj1643 := 0; ; yyj1643++ {
		if yyhl1643 {
			if yyj1643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1643Slc = r.DecodeBytes(yys1643Slc, true, true)
		yys1643 := string(yys1643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1643 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1643)
		} // end switch yys1643
	} // end for yyj1643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1646 int
	var yyb1646 bool
	var yyhl1646 bool = l >= 0
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1646++
		if yyhl1646 {
			yyb1646 = yyj1646 > l
		} else {
			yyb1646 = r.CheckBreak()
		}
		if yyb1646 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1646-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1649 := z.EncBinary()
		_ = yym1649
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1650 := !z.EncBinary()
			yy2arr1650 := z.EncBasicHandle().StructToArray
			var yyq1650 [1]bool
			_, _, _ = yysep1650, yyq1650, yy2arr1650
			const yyr1650 bool = false
			yyq1650[0] = true
			var yynn1650 int
			if yyr1650 || yy2arr1650 {
				r.EncodeArrayStart(1)
			} else {
				yynn1650 = 0
				for _, b := range yyq1650 {
					if b {
						yynn1650++
					}
				}
				r.EncodeMapStart(yynn1650)
				yynn1650 = 0
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[0] {
					yy1652 := &x.StartedAt
					yym1653 := z.EncBinary()
					_ = yym1653
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1652) {
					} else if yym1653 {
						z.EncBinaryMarshal(yy1652)
					} else if !yym1653 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1652)
					} else {
						z.EncFallback(yy1652)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1650[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1654 := &x.StartedAt
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1654) {
					} else if yym1655 {
						z.EncBinaryMarshal(yy1654)
					} else if !yym1655 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1654)
					} else {
						z.EncFallback(yy1654)
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1656 := z.DecBinary()
	_ = yym1656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1657 := r.ContainerType()
		if yyct1657 == codecSelferValueTypeMap1234 {
			yyl1657 := r.ReadMapStart()
			if yyl1657 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1657, d)
			}
		} else if yyct1657 == codecSelferValueTypeArray1234 {
			yyl1657 := r.ReadArrayStart()
			if yyl1657 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1658Slc
	var yyhl1658 bool = l >= 0
	for yyj1658 := 0; ; yyj1658++ {
		if yyhl1658 {
			if yyj1658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1658Slc = r.DecodeBytes(yys1658Slc, true, true)
		yys1658 := string(yys1658Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1658 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1659 := &x.StartedAt
				yym1660 := z.DecBinary()
				_ = yym1660
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1659) {
				} else if yym1660 {
					z.DecBinaryUnmarshal(yyv1659)
				} else if !yym1660 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1659)
				} else {
					z.DecFallback(yyv1659, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1658)
		} // end switch yys1658
	} // end for yyj1658
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1661 int
	var yyb1661 bool
	var yyhl1661 bool = l >= 0
	yyj1661++
	if yyhl1661 {
		yyb1661 = yyj1661 > l
	} else {
		yyb1661 = r.CheckBreak()
	}
	if yyb1661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1662 := &x.StartedAt
		yym1663 := z.DecBinary()
		_ = yym1663
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1662) {
		} else if yym1663 {
			z.DecBinaryUnmarshal(yyv1662)
		} else if !yym1663 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1662)
		} else {
			z.DecFallback(yyv1662, false)
		}
	}
	for {
		yyj1661++
		if yyhl1661 {
			yyb1661 = yyj1661 > l
		} else {
			yyb1661 = r.CheckBreak()
		}
		if yyb1661 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1661-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1664 := z.EncBinary()
		_ = yym1664
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1665 := !z.EncBinary()
			yy2arr1665 := z.EncBasicHandle().StructToArray
			var yyq1665 [7]bool
			_, _, _ = yysep1665, yyq1665, yy2arr1665
			const yyr1665 bool = false
			yyq1665[1] = x.Signal != 0
			yyq1665[2] = x.Reason != ""
			yyq1665[3] = x.Message != ""
			yyq1665[4] = true
			yyq1665[5] = true
			yyq1665[6] = x.ContainerID != ""
			var yynn1665 int
			if yyr1665 || yy2arr1665 {
				r.EncodeArrayStart(7)
			} else {
				yynn1665 = 1
				for _, b := range yyq1665 {
					if b {
						yynn1665++
					}
				}
				r.EncodeMapStart(yynn1665)
				yynn1665 = 0
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1667 := z.EncBinary()
				_ = yym1667
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1668 := z.EncBinary()
				_ = yym1668
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1665[1] {
					yym1670 := z.EncBinary()
					_ = yym1670
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1665[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1671 := z.EncBinary()
					_ = yym1671
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1665[2] {
					yym1673 := z.EncBinary()
					_ = yym1673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1665[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1674 := z.EncBinary()
					_ = yym1674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1665[3] {
					yym1676 := z.EncBinary()
					_ = yym1676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1665[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1677 := z.EncBinary()
					_ = yym1677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1665[4] {
					yy1679 := &x.StartedAt
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1679) {
					} else if yym1680 {
						z.EncBinaryMarshal(yy1679)
					} else if !yym1680 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1679)
					} else {
						z.EncFallback(yy1679)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1665[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1681 := &x.StartedAt
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1681) {
					} else if yym1682 {
						z.EncBinaryMarshal(yy1681)
					} else if !yym1682 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1681)
					} else {
						z.EncFallback(yy1681)
					}
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1665[5] {
					yy1684 := &x.FinishedAt
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1684) {
					} else if yym1685 {
						z.EncBinaryMarshal(yy1684)
					} else if !yym1685 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1684)
					} else {
						z.EncFallback(yy1684)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1665[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1686 := &x.FinishedAt
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1686) {
					} else if yym1687 {
						z.EncBinaryMarshal(yy1686)
					} else if !yym1687 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1686)
					} else {
						z.EncFallback(yy1686)
					}
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1665[6] {
					yym1689 := z.EncBinary()
					_ = yym1689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1665[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1691 := z.DecBinary()
	_ = yym1691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1692 := r.ContainerType()
		if yyct1692 == codecSelferValueTypeMap1234 {
			yyl1692 := r.ReadMapStart()
			if yyl1692 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1692, d)
			}
		} else if yyct1692 == codecSelferValueTypeArray1234 {
			yyl1692 := r.ReadArrayStart()
			if yyl1692 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1692, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1693Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1693Slc
	var yyhl1693 bool = l >= 0
	for yyj1693 := 0; ; yyj1693++ {
		if yyhl1693 {
			if yyj1693 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1693Slc = r.DecodeBytes(yys1693Slc, true, true)
		yys1693 := string(yys1693Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1693 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1698 := &x.StartedAt
				yym1699 := z.DecBinary()
				_ = yym1699
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1698) {
				} else if yym1699 {
					z.DecBinaryUnmarshal(yyv1698)
				} else if !yym1699 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1698)
				} else {
					z.DecFallback(yyv1698, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1700 := &x.FinishedAt
				yym1701 := z.DecBinary()
				_ = yym1701
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1700) {
				} else if yym1701 {
					z.DecBinaryUnmarshal(yyv1700)
				} else if !yym1701 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1700)
				} else {
					z.DecFallback(yyv1700, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1693)
		} // end switch yys1693
	} // end for yyj1693
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1703 int
	var yyb1703 bool
	var yyhl1703 bool = l >= 0
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1708 := &x.StartedAt
		yym1709 := z.DecBinary()
		_ = yym1709
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1708) {
		} else if yym1709 {
			z.DecBinaryUnmarshal(yyv1708)
		} else if !yym1709 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1708)
		} else {
			z.DecFallback(yyv1708, false)
		}
	}
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1710 := &x.FinishedAt
		yym1711 := z.DecBinary()
		_ = yym1711
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1710) {
		} else if yym1711 {
			z.DecBinaryUnmarshal(yyv1710)
		} else if !yym1711 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1710)
		} else {
			z.DecFallback(yyv1710, false)
		}
	}
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1703++
		if yyhl1703 {
			yyb1703 = yyj1703 > l
		} else {
			yyb1703 = r.CheckBreak()
		}
		if yyb1703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1713 := z.EncBinary()
		_ = yym1713
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1714 := !z.EncBinary()
			yy2arr1714 := z.EncBasicHandle().StructToArray
			var yyq1714 [3]bool
			_, _, _ = yysep1714, yyq1714, yy2arr1714
			const yyr1714 bool = false
			yyq1714[0] = x.Waiting != nil
			yyq1714[1] = x.Running != nil
			yyq1714[2] = x.Terminated != nil
			var yynn1714 int
			if yyr1714 || yy2arr1714 {
				r.EncodeArrayStart(3)
			} else {
				yynn1714 = 0
				for _, b := range yyq1714 {
					if b {
						yynn1714++
					}
				}
				r.EncodeMapStart(yynn1714)
				yynn1714 = 0
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1718 := z.DecBinary()
	_ = yym1718
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1719 := r.ContainerType()
		if yyct1719 == codecSelferValueTypeMap1234 {
			yyl1719 := r.ReadMapStart()
			if yyl1719 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1719, d)
			}
		} else if yyct1719 == codecSelferValueTypeArray1234 {
			yyl1719 := r.ReadArrayStart()
			if yyl1719 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1719, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1720Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1720Slc
	var yyhl1720 bool = l >= 0
	for yyj1720 := 0; ; yyj1720++ {
		if yyhl1720 {
			if yyj1720 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1720Slc = r.DecodeBytes(yys1720Slc, true, true)
		yys1720 := string(yys1720Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1720 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1720)
		} // end switch yys1720
	} // end for yyj1720
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1724 int
	var yyb1724 bool
	var yyhl1724 bool = l >= 0
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1724++
		if yyhl1724 {
			yyb1724 = yyj1724 > l
		} else {
			yyb1724 = r.CheckBreak()
		}
		if yyb1724 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1724-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1728 := z.EncBinary()
		_ = yym1728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1729 := !z.EncBinary()
			yy2arr1729 := z.EncBasicHandle().StructToArray
			var yyq1729 [8]bool
			_, _, _ = yysep1729, yyq1729, yy2arr1729
			const yyr1729 bool = false
			yyq1729[1] = true
			yyq1729[2] = true
			yyq1729[7] = x.ContainerID != ""
			var yynn1729 int
			if yyr1729 || yy2arr1729 {
				r.EncodeArrayStart(8)
			} else {
				yynn1729 = 5
				for _, b := range yyq1729 {
					if b {
						yynn1729++
					}
				}
				r.EncodeMapStart(yynn1729)
				yynn1729 = 0
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1731 := z.EncBinary()
				_ = yym1731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1732 := z.EncBinary()
				_ = yym1732
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[1] {
					yy1734 := &x.State
					yy1734.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1729[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1735 := &x.State
					yy1735.CodecEncodeSelf(e)
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[2] {
					yy1737 := &x.LastTerminationState
					yy1737.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1729[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1738 := &x.LastTerminationState
					yy1738.CodecEncodeSelf(e)
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1740 := z.EncBinary()
				_ = yym1740
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1741 := z.EncBinary()
				_ = yym1741
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1743 := z.EncBinary()
				_ = yym1743
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1744 := z.EncBinary()
				_ = yym1744
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1746 := z.EncBinary()
				_ = yym1746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1747 := z.EncBinary()
				_ = yym1747
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1749 := z.EncBinary()
				_ = yym1749
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1750 := z.EncBinary()
				_ = yym1750
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[7] {
					yym1752 := z.EncBinary()
					_ = yym1752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1729[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1753 := z.EncBinary()
					_ = yym1753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1754 := z.DecBinary()
	_ = yym1754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1755 := r.ContainerType()
		if yyct1755 == codecSelferValueTypeMap1234 {
			yyl1755 := r.ReadMapStart()
			if yyl1755 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1755, d)
			}
		} else if yyct1755 == codecSelferValueTypeArray1234 {
			yyl1755 := r.ReadArrayStart()
			if yyl1755 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1755, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1756Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1756Slc
	var yyhl1756 bool = l >= 0
	for yyj1756 := 0; ; yyj1756++ {
		if yyhl1756 {
			if yyj1756 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1756Slc = r.DecodeBytes(yys1756Slc, true, true)
		yys1756 := string(yys1756Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1756 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1758 := &x.State
				yyv1758.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1759 := &x.LastTerminationState
				yyv1759.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1756)
		} // end switch yys1756
	} // end for yyj1756
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1765 int
	var yyb1765 bool
	var yyhl1765 bool = l >= 0
	yyj1765++
	if yyhl1765 {
		yyb1765 = yyj1765 > l
	} else {
		yyb1765 = r.CheckBreak()
	}
	if yyb1765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1765++
	if yyhl1765 {
		yyb1765 = yyj1765 > l
	} else {
		yyb1765 = r.CheckBreak()
	}
	if yyb1765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1767 := &x.State
		yyv1767.CodecDecodeSelf(d)
	}
	yyj1765++
	if yyhl1765 {
		yyb1765 = yyj1765 > l
	} else {
		yyb1765 = r.CheckBreak()
	}
	if yyb1765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1768 := &x.LastTerminationState
		yyv1768.CodecDecodeSelf(d)
	}
	yyj1765++
	if yyhl1765 {
		yyb1765 = yyj1765 > l
	} else {
		yyb1765 = r.CheckBreak()
	}
	if yyb1765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1765++
	if yyhl1765 {
		yyb1765 = yyj1765 > l
	} else {
		yyb1765 = r.CheckBreak()
	}
	if yyb1765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1765++
	if yyhl1765 {
		yyb1765 = yyj1765 > l
	} else {
		yyb1765 = r.CheckBreak()
	}
	if yyb1765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1765++
	if yyhl1765 {
		yyb1765 = yyj1765 > l
	} else {
		yyb1765 = r.CheckBreak()
	}
	if yyb1765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1765++
	if yyhl1765 {
		yyb1765 = yyj1765 > l
	} else {
		yyb1765 = r.CheckBreak()
	}
	if yyb1765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1765++
		if yyhl1765 {
			yyb1765 = yyj1765 > l
		} else {
			yyb1765 = r.CheckBreak()
		}
		if yyb1765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1774 := z.EncBinary()
	_ = yym1774
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1775 := z.DecBinary()
	_ = yym1775
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1776 := z.EncBinary()
	_ = yym1776
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1777 := z.DecBinary()
	_ = yym1777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1778 := z.EncBinary()
		_ = yym1778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1779 := !z.EncBinary()
			yy2arr1779 := z.EncBasicHandle().StructToArray
			var yyq1779 [6]bool
			_, _, _ = yysep1779, yyq1779, yy2arr1779
			const yyr1779 bool = false
			yyq1779[2] = true
			yyq1779[3] = true
			yyq1779[4] = x.Reason != ""
			yyq1779[5] = x.Message != ""
			var yynn1779 int
			if yyr1779 || yy2arr1779 {
				r.EncodeArrayStart(6)
			} else {
				yynn1779 = 2
				for _, b := range yyq1779 {
					if b {
						yynn1779++
					}
				}
				r.EncodeMapStart(yynn1779)
				yynn1779 = 0
			}
			if yyr1779 || yy2arr1779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1779 || yy2arr1779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1779 || yy2arr1779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1779[2] {
					yy1783 := &x.LastProbeTime
					yym1784 := z.EncBinary()
					_ = yym1784
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1783) {
					} else if yym1784 {
						z.EncBinaryMarshal(yy1783)
					} else if !yym1784 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1783)
					} else {
						z.EncFallback(yy1783)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1779[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1785 := &x.LastProbeTime
					yym1786 := z.EncBinary()
					_ = yym1786
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1785) {
					} else if yym1786 {
						z.EncBinaryMarshal(yy1785)
					} else if !yym1786 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1785)
					} else {
						z.EncFallback(yy1785)
					}
				}
			}
			if yyr1779 || yy2arr1779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1779[3] {
					yy1788 := &x.LastTransitionTime
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1788) {
					} else if yym1789 {
						z.EncBinaryMarshal(yy1788)
					} else if !yym1789 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1788)
					} else {
						z.EncFallback(yy1788)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1779[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1790 := &x.LastTransitionTime
					yym1791 := z.EncBinary()
					_ = yym1791
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1790) {
					} else if yym1791 {
						z.EncBinaryMarshal(yy1790)
					} else if !yym1791 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1790)
					} else {
						z.EncFallback(yy1790)
					}
				}
			}
			if yyr1779 || yy2arr1779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1779[4] {
					yym1793 := z.EncBinary()
					_ = yym1793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1779[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1779 || yy2arr1779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1779[5] {
					yym1796 := z.EncBinary()
					_ = yym1796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1779[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1797 := z.EncBinary()
					_ = yym1797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1779 || yy2arr1779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1798 := z.DecBinary()
	_ = yym1798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1799 := r.ContainerType()
		if yyct1799 == codecSelferValueTypeMap1234 {
			yyl1799 := r.ReadMapStart()
			if yyl1799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1799, d)
			}
		} else if yyct1799 == codecSelferValueTypeArray1234 {
			yyl1799 := r.ReadArrayStart()
			if yyl1799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1800Slc
	var yyhl1800 bool = l >= 0
	for yyj1800 := 0; ; yyj1800++ {
		if yyhl1800 {
			if yyj1800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1800Slc = r.DecodeBytes(yys1800Slc, true, true)
		yys1800 := string(yys1800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1800 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1803 := &x.LastProbeTime
				yym1804 := z.DecBinary()
				_ = yym1804
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1803) {
				} else if yym1804 {
					z.DecBinaryUnmarshal(yyv1803)
				} else if !yym1804 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1803)
				} else {
					z.DecFallback(yyv1803, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1805 := &x.LastTransitionTime
				yym1806 := z.DecBinary()
				_ = yym1806
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1805) {
				} else if yym1806 {
					z.DecBinaryUnmarshal(yyv1805)
				} else if !yym1806 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1805)
				} else {
					z.DecFallback(yyv1805, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1800)
		} // end switch yys1800
	} // end for yyj1800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1809 int
	var yyb1809 bool
	var yyhl1809 bool = l >= 0
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1812 := &x.LastProbeTime
		yym1813 := z.DecBinary()
		_ = yym1813
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1812) {
		} else if yym1813 {
			z.DecBinaryUnmarshal(yyv1812)
		} else if !yym1813 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1812)
		} else {
			z.DecFallback(yyv1812, false)
		}
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1814 := &x.LastTransitionTime
		yym1815 := z.DecBinary()
		_ = yym1815
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1814) {
		} else if yym1815 {
			z.DecBinaryUnmarshal(yyv1814)
		} else if !yym1815 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1814)
		} else {
			z.DecFallback(yyv1814, false)
		}
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1809++
		if yyhl1809 {
			yyb1809 = yyj1809 > l
		} else {
			yyb1809 = r.CheckBreak()
		}
		if yyb1809 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1809-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1818 := z.EncBinary()
	_ = yym1818
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1819 := z.DecBinary()
	_ = yym1819
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1820 := z.EncBinary()
		_ = yym1820
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1821 := !z.EncBinary()
			yy2arr1821 := z.EncBasicHandle().StructToArray
			var yyq1821 [4]bool
			_, _, _ = yysep1821, yyq1821, yy2arr1821
			const yyr1821 bool = false
			yyq1821[0] = x.Kind != ""
			yyq1821[1] = x.APIVersion != ""
			yyq1821[2] = true
			var yynn1821 int
			if yyr1821 || yy2arr1821 {
				r.EncodeArrayStart(4)
			} else {
				yynn1821 = 1
				for _, b := range yyq1821 {
					if b {
						yynn1821++
					}
				}
				r.EncodeMapStart(yynn1821)
				yynn1821 = 0
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1821[0] {
					yym1823 := z.EncBinary()
					_ = yym1823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1821[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1824 := z.EncBinary()
					_ = yym1824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1821[1] {
					yym1826 := z.EncBinary()
					_ = yym1826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1821[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1827 := z.EncBinary()
					_ = yym1827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1821[2] {
					yy1829 := &x.ListMeta
					yym1830 := z.EncBinary()
					_ = yym1830
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1829) {
					} else {
						z.EncFallback(yy1829)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1821[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1831 := &x.ListMeta
					yym1832 := z.EncBinary()
					_ = yym1832
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1831) {
					} else {
						z.EncFallback(yy1831)
					}
				}
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1834 := z.EncBinary()
					_ = yym1834
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1835 := z.EncBinary()
					_ = yym1835
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1836 := z.DecBinary()
	_ = yym1836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1837 := r.ContainerType()
		if yyct1837 == codecSelferValueTypeMap1234 {
			yyl1837 := r.ReadMapStart()
			if yyl1837 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1837, d)
			}
		} else if yyct1837 == codecSelferValueTypeArray1234 {
			yyl1837 := r.ReadArrayStart()
			if yyl1837 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1837, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1838Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1838Slc
	var yyhl1838 bool = l >= 0
	for yyj1838 := 0; ; yyj1838++ {
		if yyhl1838 {
			if yyj1838 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1838Slc = r.DecodeBytes(yys1838Slc, true, true)
		yys1838 := string(yys1838Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1838 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1841 := &x.ListMeta
				yym1842 := z.DecBinary()
				_ = yym1842
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1841) {
				} else {
					z.DecFallback(yyv1841, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1843 := &x.Items
				yym1844 := z.DecBinary()
				_ = yym1844
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1843), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1838)
		} // end switch yys1838
	} // end for yyj1838
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1845 int
	var yyb1845 bool
	var yyhl1845 bool = l >= 0
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1848 := &x.ListMeta
		yym1849 := z.DecBinary()
		_ = yym1849
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1848) {
		} else {
			z.DecFallback(yyv1848, false)
		}
	}
	yyj1845++
	if yyhl1845 {
		yyb1845 = yyj1845 > l
	} else {
		yyb1845 = r.CheckBreak()
	}
	if yyb1845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1850 := &x.Items
		yym1851 := z.DecBinary()
		_ = yym1851
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1850), d)
		}
	}
	for {
		yyj1845++
		if yyhl1845 {
			yyb1845 = yyj1845 > l
		} else {
			yyb1845 = r.CheckBreak()
		}
		if yyb1845 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1845-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1852 := z.EncBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1853 := z.DecBinary()
	_ = yym1853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1854 := z.EncBinary()
		_ = yym1854
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1855 := !z.EncBinary()
			yy2arr1855 := z.EncBasicHandle().StructToArray
			var yyq1855 [1]bool
			_, _, _ = yysep1855, yyq1855, yy2arr1855
			const yyr1855 bool = false
			var yynn1855 int
			if yyr1855 || yy2arr1855 {
				r.EncodeArrayStart(1)
			} else {
				yynn1855 = 1
				for _, b := range yyq1855 {
					if b {
						yynn1855++
					}
				}
				r.EncodeMapStart(yynn1855)
				yynn1855 = 0
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1857 := z.EncBinary()
					_ = yym1857
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1859 := z.DecBinary()
	_ = yym1859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1860 := r.ContainerType()
		if yyct1860 == codecSelferValueTypeMap1234 {
			yyl1860 := r.ReadMapStart()
			if yyl1860 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1860, d)
			}
		} else if yyct1860 == codecSelferValueTypeArray1234 {
			yyl1860 := r.ReadArrayStart()
			if yyl1860 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1861Slc
	var yyhl1861 bool = l >= 0
	for yyj1861 := 0; ; yyj1861++ {
		if yyhl1861 {
			if yyj1861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1861Slc = r.DecodeBytes(yys1861Slc, true, true)
		yys1861 := string(yys1861Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1861 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1862 := &x.NodeSelectorTerms
				yym1863 := z.DecBinary()
				_ = yym1863
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1862), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1861)
		} // end switch yys1861
	} // end for yyj1861
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1864 int
	var yyb1864 bool
	var yyhl1864 bool = l >= 0
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1865 := &x.NodeSelectorTerms
		yym1866 := z.DecBinary()
		_ = yym1866
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1865), d)
		}
	}
	for {
		yyj1864++
		if yyhl1864 {
			yyb1864 = yyj1864 > l
		} else {
			yyb1864 = r.CheckBreak()
		}
		if yyb1864 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1864-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1867 := z.EncBinary()
		_ = yym1867
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1868 := !z.EncBinary()
			yy2arr1868 := z.EncBasicHandle().StructToArray
			var yyq1868 [1]bool
			_, _, _ = yysep1868, yyq1868, yy2arr1868
			const yyr1868 bool = false
			var yynn1868 int
			if yyr1868 || yy2arr1868 {
				r.EncodeArrayStart(1)
			} else {
				yynn1868 = 1
				for _, b := range yyq1868 {
					if b {
						yynn1868++
					}
				}
				r.EncodeMapStart(yynn1868)
				yynn1868 = 0
			}
			if yyr1868 || yy2arr1868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1870 := z.EncBinary()
					_ = yym1870
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1871 := z.EncBinary()
					_ = yym1871
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1868 || yy2arr1868 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1872 := z.DecBinary()
	_ = yym1872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1873 := r.ContainerType()
		if yyct1873 == codecSelferValueTypeMap1234 {
			yyl1873 := r.ReadMapStart()
			if yyl1873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1873, d)
			}
		} else if yyct1873 == codecSelferValueTypeArray1234 {
			yyl1873 := r.ReadArrayStart()
			if yyl1873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1874Slc
	var yyhl1874 bool = l >= 0
	for yyj1874 := 0; ; yyj1874++ {
		if yyhl1874 {
			if yyj1874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1874Slc = r.DecodeBytes(yys1874Slc, true, true)
		yys1874 := string(yys1874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1874 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1875 := &x.MatchExpressions
				yym1876 := z.DecBinary()
				_ = yym1876
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1875), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1874)
		} // end switch yys1874
	} // end for yyj1874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1877 int
	var yyb1877 bool
	var yyhl1877 bool = l >= 0
	yyj1877++
	if yyhl1877 {
		yyb1877 = yyj1877 > l
	} else {
		yyb1877 = r.CheckBreak()
	}
	if yyb1877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1878 := &x.MatchExpressions
		yym1879 := z.DecBinary()
		_ = yym1879
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1878), d)
		}
	}
	for {
		yyj1877++
		if yyhl1877 {
			yyb1877 = yyj1877 > l
		} else {
			yyb1877 = r.CheckBreak()
		}
		if yyb1877 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1877-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1880 := z.EncBinary()
		_ = yym1880
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1881 := !z.EncBinary()
			yy2arr1881 := z.EncBasicHandle().StructToArray
			var yyq1881 [3]bool
			_, _, _ = yysep1881, yyq1881, yy2arr1881
			const yyr1881 bool = false
			yyq1881[2] = len(x.Values) != 0
			var yynn1881 int
			if yyr1881 || yy2arr1881 {
				r.EncodeArrayStart(3)
			} else {
				yynn1881 = 2
				for _, b := range yyq1881 {
					if b {
						yynn1881++
					}
				}
				r.EncodeMapStart(yynn1881)
				yynn1881 = 0
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1883 := z.EncBinary()
				_ = yym1883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1884 := z.EncBinary()
				_ = yym1884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1887 := z.EncBinary()
						_ = yym1887
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1881[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1888 := z.EncBinary()
						_ = yym1888
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1889 := z.DecBinary()
	_ = yym1889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1890 := r.ContainerType()
		if yyct1890 == codecSelferValueTypeMap1234 {
			yyl1890 := r.ReadMapStart()
			if yyl1890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1890, d)
			}
		} else if yyct1890 == codecSelferValueTypeArray1234 {
			yyl1890 := r.ReadArrayStart()
			if yyl1890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1891Slc
	var yyhl1891 bool = l >= 0
	for yyj1891 := 0; ; yyj1891++ {
		if yyhl1891 {
			if yyj1891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1891Slc = r.DecodeBytes(yys1891Slc, true, true)
		yys1891 := string(yys1891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1891 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1894 := &x.Values
				yym1895 := z.DecBinary()
				_ = yym1895
				if false {
				} else {
					z.F.DecSliceStringX(yyv1894, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1891)
		} // end switch yys1891
	} // end for yyj1891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1896 int
	var yyb1896 bool
	var yyhl1896 bool = l >= 0
	yyj1896++
	if yyhl1896 {
		yyb1896 = yyj1896 > l
	} else {
		yyb1896 = r.CheckBreak()
	}
	if yyb1896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1896++
	if yyhl1896 {
		yyb1896 = yyj1896 > l
	} else {
		yyb1896 = r.CheckBreak()
	}
	if yyb1896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1896++
	if yyhl1896 {
		yyb1896 = yyj1896 > l
	} else {
		yyb1896 = r.CheckBreak()
	}
	if yyb1896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1899 := &x.Values
		yym1900 := z.DecBinary()
		_ = yym1900
		if false {
		} else {
			z.F.DecSliceStringX(yyv1899, false, d)
		}
	}
	for {
		yyj1896++
		if yyhl1896 {
			yyb1896 = yyj1896 > l
		} else {
			yyb1896 = r.CheckBreak()
		}
		if yyb1896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1901 := z.EncBinary()
	_ = yym1901
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1902 := z.DecBinary()
	_ = yym1902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1903 := z.EncBinary()
		_ = yym1903
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1904 := !z.EncBinary()
			yy2arr1904 := z.EncBasicHandle().StructToArray
			var yyq1904 [3]bool
			_, _, _ = yysep1904, yyq1904, yy2arr1904
			const yyr1904 bool = false
			yyq1904[0] = x.NodeAffinity != nil
			yyq1904[1] = x.PodAffinity != nil
			yyq1904[2] = x.PodAntiAffinity != nil
			var yynn1904 int
			if yyr1904 || yy2arr1904 {
				r.EncodeArrayStart(3)
			} else {
				yynn1904 = 0
				for _, b := range yyq1904 {
					if b {
						yynn1904++
					}
				}
				r.EncodeMapStart(yynn1904)
				yynn1904 = 0
			}
			if yyr1904 || yy2arr1904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1904[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1904[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1904 || yy2arr1904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1904[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1904[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1904 || yy2arr1904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1904[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1904[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1904 || yy2arr1904 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1908 := z.DecBinary()
	_ = yym1908
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1909 := r.ContainerType()
		if yyct1909 == codecSelferValueTypeMap1234 {
			yyl1909 := r.ReadMapStart()
			if yyl1909 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1909, d)
			}
		} else if yyct1909 == codecSelferValueTypeArray1234 {
			yyl1909 := r.ReadArrayStart()
			if yyl1909 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1909, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1910Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1910Slc
	var yyhl1910 bool = l >= 0
	for yyj1910 := 0; ; yyj1910++ {
		if yyhl1910 {
			if yyj1910 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1910Slc = r.DecodeBytes(yys1910Slc, true, true)
		yys1910 := string(yys1910Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1910 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1910)
		} // end switch yys1910
	} // end for yyj1910
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1914 int
	var yyb1914 bool
	var yyhl1914 bool = l >= 0
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1914++
		if yyhl1914 {
			yyb1914 = yyj1914 > l
		} else {
			yyb1914 = r.CheckBreak()
		}
		if yyb1914 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1914-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1918 := z.EncBinary()
		_ = yym1918
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1919 := !z.EncBinary()
			yy2arr1919 := z.EncBasicHandle().StructToArray
			var yyq1919 [2]bool
			_, _, _ = yysep1919, yyq1919, yy2arr1919
			const yyr1919 bool = false
			yyq1919[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1919[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1919 int
			if yyr1919 || yy2arr1919 {
				r.EncodeArrayStart(2)
			} else {
				yynn1919 = 0
				for _, b := range yyq1919 {
					if b {
						yynn1919++
					}
				}
				r.EncodeMapStart(yynn1919)
				yynn1919 = 0
			}
			if yyr1919 || yy2arr1919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1919[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1921 := z.EncBinary()
						_ = yym1921
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1919[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1922 := z.EncBinary()
						_ = yym1922
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1919 || yy2arr1919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1919[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1924 := z.EncBinary()
						_ = yym1924
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1919[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1925 := z.EncBinary()
						_ = yym1925
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1919 || yy2arr1919 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1926 := z.DecBinary()
	_ = yym1926
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1927 := r.ContainerType()
		if yyct1927 == codecSelferValueTypeMap1234 {
			yyl1927 := r.ReadMapStart()
			if yyl1927 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1927, d)
			}
		} else if yyct1927 == codecSelferValueTypeArray1234 {
			yyl1927 := r.ReadArrayStart()
			if yyl1927 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1927, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1928Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1928Slc
	var yyhl1928 bool = l >= 0
	for yyj1928 := 0; ; yyj1928++ {
		if yyhl1928 {
			if yyj1928 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1928Slc = r.DecodeBytes(yys1928Slc, true, true)
		yys1928 := string(yys1928Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1928 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1929 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1930 := z.DecBinary()
				_ = yym1930
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1929), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1931 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1932 := z.DecBinary()
				_ = yym1932
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1931), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1928)
		} // end switch yys1928
	} // end for yyj1928
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1933 int
	var yyb1933 bool
	var yyhl1933 bool = l >= 0
	yyj1933++
	if yyhl1933 {
		yyb1933 = yyj1933 > l
	} else {
		yyb1933 = r.CheckBreak()
	}
	if yyb1933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1934 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1935 := z.DecBinary()
		_ = yym1935
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1934), d)
		}
	}
	yyj1933++
	if yyhl1933 {
		yyb1933 = yyj1933 > l
	} else {
		yyb1933 = r.CheckBreak()
	}
	if yyb1933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1936 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1937 := z.DecBinary()
		_ = yym1937
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1936), d)
		}
	}
	for {
		yyj1933++
		if yyhl1933 {
			yyb1933 = yyj1933 > l
		} else {
			yyb1933 = r.CheckBreak()
		}
		if yyb1933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1938 := z.EncBinary()
		_ = yym1938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1939 := !z.EncBinary()
			yy2arr1939 := z.EncBasicHandle().StructToArray
			var yyq1939 [2]bool
			_, _, _ = yysep1939, yyq1939, yy2arr1939
			const yyr1939 bool = false
			yyq1939[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1939[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1939 int
			if yyr1939 || yy2arr1939 {
				r.EncodeArrayStart(2)
			} else {
				yynn1939 = 0
				for _, b := range yyq1939 {
					if b {
						yynn1939++
					}
				}
				r.EncodeMapStart(yynn1939)
				yynn1939 = 0
			}
			if yyr1939 || yy2arr1939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1939[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1941 := z.EncBinary()
						_ = yym1941
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1939[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1942 := z.EncBinary()
						_ = yym1942
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1939 || yy2arr1939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1939[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1944 := z.EncBinary()
						_ = yym1944
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1939[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1945 := z.EncBinary()
						_ = yym1945
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1939 || yy2arr1939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1946 := z.DecBinary()
	_ = yym1946
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1947 := r.ContainerType()
		if yyct1947 == codecSelferValueTypeMap1234 {
			yyl1947 := r.ReadMapStart()
			if yyl1947 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1947, d)
			}
		} else if yyct1947 == codecSelferValueTypeArray1234 {
			yyl1947 := r.ReadArrayStart()
			if yyl1947 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1947, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1948Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1948Slc
	var yyhl1948 bool = l >= 0
	for yyj1948 := 0; ; yyj1948++ {
		if yyhl1948 {
			if yyj1948 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1948Slc = r.DecodeBytes(yys1948Slc, true, true)
		yys1948 := string(yys1948Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1948 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1949 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1950 := z.DecBinary()
				_ = yym1950
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1949), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1951 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1952 := z.DecBinary()
				_ = yym1952
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1951), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1948)
		} // end switch yys1948
	} // end for yyj1948
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1953 int
	var yyb1953 bool
	var yyhl1953 bool = l >= 0
	yyj1953++
	if yyhl1953 {
		yyb1953 = yyj1953 > l
	} else {
		yyb1953 = r.CheckBreak()
	}
	if yyb1953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1954 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1955 := z.DecBinary()
		_ = yym1955
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1954), d)
		}
	}
	yyj1953++
	if yyhl1953 {
		yyb1953 = yyj1953 > l
	} else {
		yyb1953 = r.CheckBreak()
	}
	if yyb1953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1956 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1957 := z.DecBinary()
		_ = yym1957
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1956), d)
		}
	}
	for {
		yyj1953++
		if yyhl1953 {
			yyb1953 = yyj1953 > l
		} else {
			yyb1953 = r.CheckBreak()
		}
		if yyb1953 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1953-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1958 := z.EncBinary()
		_ = yym1958
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1959 := !z.EncBinary()
			yy2arr1959 := z.EncBasicHandle().StructToArray
			var yyq1959 [2]bool
			_, _, _ = yysep1959, yyq1959, yy2arr1959
			const yyr1959 bool = false
			var yynn1959 int
			if yyr1959 || yy2arr1959 {
				r.EncodeArrayStart(2)
			} else {
				yynn1959 = 2
				for _, b := range yyq1959 {
					if b {
						yynn1959++
					}
				}
				r.EncodeMapStart(yynn1959)
				yynn1959 = 0
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1961 := z.EncBinary()
				_ = yym1961
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1962 := z.EncBinary()
				_ = yym1962
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1964 := &x.PodAffinityTerm
				yy1964.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1965 := &x.PodAffinityTerm
				yy1965.CodecEncodeSelf(e)
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1966 := z.DecBinary()
	_ = yym1966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1967 := r.ContainerType()
		if yyct1967 == codecSelferValueTypeMap1234 {
			yyl1967 := r.ReadMapStart()
			if yyl1967 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1967, d)
			}
		} else if yyct1967 == codecSelferValueTypeArray1234 {
			yyl1967 := r.ReadArrayStart()
			if yyl1967 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1967, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1968Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1968Slc
	var yyhl1968 bool = l >= 0
	for yyj1968 := 0; ; yyj1968++ {
		if yyhl1968 {
			if yyj1968 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1968Slc = r.DecodeBytes(yys1968Slc, true, true)
		yys1968 := string(yys1968Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1968 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1970 := &x.PodAffinityTerm
				yyv1970.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1968)
		} // end switch yys1968
	} // end for yyj1968
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1971 int
	var yyb1971 bool
	var yyhl1971 bool = l >= 0
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1973 := &x.PodAffinityTerm
		yyv1973.CodecDecodeSelf(d)
	}
	for {
		yyj1971++
		if yyhl1971 {
			yyb1971 = yyj1971 > l
		} else {
			yyb1971 = r.CheckBreak()
		}
		if yyb1971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1974 := z.EncBinary()
		_ = yym1974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1975 := !z.EncBinary()
			yy2arr1975 := z.EncBasicHandle().StructToArray
			var yyq1975 [3]bool
			_, _, _ = yysep1975, yyq1975, yy2arr1975
			const yyr1975 bool = false
			yyq1975[0] = x.LabelSelector != nil
			yyq1975[2] = x.TopologyKey != ""
			var yynn1975 int
			if yyr1975 || yy2arr1975 {
				r.EncodeArrayStart(3)
			} else {
				yynn1975 = 1
				for _, b := range yyq1975 {
					if b {
						yynn1975++
					}
				}
				r.EncodeMapStart(yynn1975)
				yynn1975 = 0
			}
			if yyr1975 || yy2arr1975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1975[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1977 := z.EncBinary()
						_ = yym1977
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1975[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1978 := z.EncBinary()
						_ = yym1978
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1975 || yy2arr1975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1981 := z.EncBinary()
					_ = yym1981
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1975 || yy2arr1975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1975[2] {
					yym1983 := z.EncBinary()
					_ = yym1983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1975[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1975 || yy2arr1975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1985 := z.DecBinary()
	_ = yym1985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1986 := r.ContainerType()
		if yyct1986 == codecSelferValueTypeMap1234 {
			yyl1986 := r.ReadMapStart()
			if yyl1986 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1986, d)
			}
		} else if yyct1986 == codecSelferValueTypeArray1234 {
			yyl1986 := r.ReadArrayStart()
			if yyl1986 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1987Slc
	var yyhl1987 bool = l >= 0
	for yyj1987 := 0; ; yyj1987++ {
		if yyhl1987 {
			if yyj1987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1987Slc = r.DecodeBytes(yys1987Slc, true, true)
		yys1987 := string(yys1987Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1987 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1989 := z.DecBinary()
				_ = yym1989
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1990 := &x.Namespaces
				yym1991 := z.DecBinary()
				_ = yym1991
				if false {
				} else {
					z.F.DecSliceStringX(yyv1990, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1987)
		} // end switch yys1987
	} // end for yyj1987
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1993 int
	var yyb1993 bool
	var yyhl1993 bool = l >= 0
	yyj1993++
	if yyhl1993 {
		yyb1993 = yyj1993 > l
	} else {
		yyb1993 = r.CheckBreak()
	}
	if yyb1993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1995 := z.DecBinary()
		_ = yym1995
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1993++
	if yyhl1993 {
		yyb1993 = yyj1993 > l
	} else {
		yyb1993 = r.CheckBreak()
	}
	if yyb1993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1996 := &x.Namespaces
		yym1997 := z.DecBinary()
		_ = yym1997
		if false {
		} else {
			z.F.DecSliceStringX(yyv1996, false, d)
		}
	}
	yyj1993++
	if yyhl1993 {
		yyb1993 = yyj1993 > l
	} else {
		yyb1993 = r.CheckBreak()
	}
	if yyb1993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1993++
		if yyhl1993 {
			yyb1993 = yyj1993 > l
		} else {
			yyb1993 = r.CheckBreak()
		}
		if yyb1993 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1993-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1999 := z.EncBinary()
		_ = yym1999
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2000 := !z.EncBinary()
			yy2arr2000 := z.EncBasicHandle().StructToArray
			var yyq2000 [2]bool
			_, _, _ = yysep2000, yyq2000, yy2arr2000
			const yyr2000 bool = false
			yyq2000[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq2000[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2000 int
			if yyr2000 || yy2arr2000 {
				r.EncodeArrayStart(2)
			} else {
				yynn2000 = 0
				for _, b := range yyq2000 {
					if b {
						yynn2000++
					}
				}
				r.EncodeMapStart(yynn2000)
				yynn2000 = 0
			}
			if yyr2000 || yy2arr2000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2000[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2000[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2000 || yy2arr2000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2000[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2003 := z.EncBinary()
						_ = yym2003
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2000[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2004 := z.EncBinary()
						_ = yym2004
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2000 || yy2arr2000 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2005 := z.DecBinary()
	_ = yym2005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2006 := r.ContainerType()
		if yyct2006 == codecSelferValueTypeMap1234 {
			yyl2006 := r.ReadMapStart()
			if yyl2006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2006, d)
			}
		} else if yyct2006 == codecSelferValueTypeArray1234 {
			yyl2006 := r.ReadArrayStart()
			if yyl2006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2007Slc
	var yyhl2007 bool = l >= 0
	for yyj2007 := 0; ; yyj2007++ {
		if yyhl2007 {
			if yyj2007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2007Slc = r.DecodeBytes(yys2007Slc, true, true)
		yys2007 := string(yys2007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2007 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2009 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2010 := z.DecBinary()
				_ = yym2010
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2009), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2007)
		} // end switch yys2007
	} // end for yyj2007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2011 int
	var yyb2011 bool
	var yyhl2011 bool = l >= 0
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2013 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2014 := z.DecBinary()
		_ = yym2014
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2013), d)
		}
	}
	for {
		yyj2011++
		if yyhl2011 {
			yyb2011 = yyj2011 > l
		} else {
			yyb2011 = r.CheckBreak()
		}
		if yyb2011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2015 := z.EncBinary()
		_ = yym2015
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2016 := !z.EncBinary()
			yy2arr2016 := z.EncBasicHandle().StructToArray
			var yyq2016 [2]bool
			_, _, _ = yysep2016, yyq2016, yy2arr2016
			const yyr2016 bool = false
			var yynn2016 int
			if yyr2016 || yy2arr2016 {
				r.EncodeArrayStart(2)
			} else {
				yynn2016 = 2
				for _, b := range yyq2016 {
					if b {
						yynn2016++
					}
				}
				r.EncodeMapStart(yynn2016)
				yynn2016 = 0
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2018 := z.EncBinary()
				_ = yym2018
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2019 := z.EncBinary()
				_ = yym2019
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2021 := &x.Preference
				yy2021.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2022 := &x.Preference
				yy2022.CodecEncodeSelf(e)
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2023 := z.DecBinary()
	_ = yym2023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2024 := r.ContainerType()
		if yyct2024 == codecSelferValueTypeMap1234 {
			yyl2024 := r.ReadMapStart()
			if yyl2024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2024, d)
			}
		} else if yyct2024 == codecSelferValueTypeArray1234 {
			yyl2024 := r.ReadArrayStart()
			if yyl2024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2025Slc
	var yyhl2025 bool = l >= 0
	for yyj2025 := 0; ; yyj2025++ {
		if yyhl2025 {
			if yyj2025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2025Slc = r.DecodeBytes(yys2025Slc, true, true)
		yys2025 := string(yys2025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2025 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2027 := &x.Preference
				yyv2027.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2025)
		} // end switch yys2025
	} // end for yyj2025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2028 int
	var yyb2028 bool
	var yyhl2028 bool = l >= 0
	yyj2028++
	if yyhl2028 {
		yyb2028 = yyj2028 > l
	} else {
		yyb2028 = r.CheckBreak()
	}
	if yyb2028 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2028++
	if yyhl2028 {
		yyb2028 = yyj2028 > l
	} else {
		yyb2028 = r.CheckBreak()
	}
	if yyb2028 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2030 := &x.Preference
		yyv2030.CodecDecodeSelf(d)
	}
	for {
		yyj2028++
		if yyhl2028 {
			yyb2028 = yyj2028 > l
		} else {
			yyb2028 = r.CheckBreak()
		}
		if yyb2028 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2028-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2031 := z.EncBinary()
		_ = yym2031
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2032 := !z.EncBinary()
			yy2arr2032 := z.EncBasicHandle().StructToArray
			var yyq2032 [3]bool
			_, _, _ = yysep2032, yyq2032, yy2arr2032
			const yyr2032 bool = false
			yyq2032[1] = x.Value != ""
			var yynn2032 int
			if yyr2032 || yy2arr2032 {
				r.EncodeArrayStart(3)
			} else {
				yynn2032 = 2
				for _, b := range yyq2032 {
					if b {
						yynn2032++
					}
				}
				r.EncodeMapStart(yynn2032)
				yynn2032 = 0
			}
			if yyr2032 || yy2arr2032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2034 := z.EncBinary()
				_ = yym2034
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2035 := z.EncBinary()
				_ = yym2035
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2032 || yy2arr2032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2032[1] {
					yym2037 := z.EncBinary()
					_ = yym2037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2032[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2032 || yy2arr2032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2032 || yy2arr2032 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2040 := z.DecBinary()
	_ = yym2040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2041 := r.ContainerType()
		if yyct2041 == codecSelferValueTypeMap1234 {
			yyl2041 := r.ReadMapStart()
			if yyl2041 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2041, d)
			}
		} else if yyct2041 == codecSelferValueTypeArray1234 {
			yyl2041 := r.ReadArrayStart()
			if yyl2041 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2041, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2042Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2042Slc
	var yyhl2042 bool = l >= 0
	for yyj2042 := 0; ; yyj2042++ {
		if yyhl2042 {
			if yyj2042 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2042Slc = r.DecodeBytes(yys2042Slc, true, true)
		yys2042 := string(yys2042Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2042 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2042)
		} // end switch yys2042
	} // end for yyj2042
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2046 int
	var yyb2046 bool
	var yyhl2046 bool = l >= 0
	yyj2046++
	if yyhl2046 {
		yyb2046 = yyj2046 > l
	} else {
		yyb2046 = r.CheckBreak()
	}
	if yyb2046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2046++
	if yyhl2046 {
		yyb2046 = yyj2046 > l
	} else {
		yyb2046 = r.CheckBreak()
	}
	if yyb2046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2046++
	if yyhl2046 {
		yyb2046 = yyj2046 > l
	} else {
		yyb2046 = r.CheckBreak()
	}
	if yyb2046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2046++
		if yyhl2046 {
			yyb2046 = yyj2046 > l
		} else {
			yyb2046 = r.CheckBreak()
		}
		if yyb2046 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2046-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2050 := z.EncBinary()
	_ = yym2050
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2051 := z.DecBinary()
	_ = yym2051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2052 := z.EncBinary()
		_ = yym2052
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2053 := !z.EncBinary()
			yy2arr2053 := z.EncBasicHandle().StructToArray
			var yyq2053 [4]bool
			_, _, _ = yysep2053, yyq2053, yy2arr2053
			const yyr2053 bool = false
			yyq2053[0] = x.Key != ""
			yyq2053[1] = x.Operator != ""
			yyq2053[2] = x.Value != ""
			yyq2053[3] = x.Effect != ""
			var yynn2053 int
			if yyr2053 || yy2arr2053 {
				r.EncodeArrayStart(4)
			} else {
				yynn2053 = 0
				for _, b := range yyq2053 {
					if b {
						yynn2053++
					}
				}
				r.EncodeMapStart(yynn2053)
				yynn2053 = 0
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2053[0] {
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2053[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2056 := z.EncBinary()
					_ = yym2056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2053[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2053[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2053[2] {
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2053[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2053[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2053[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2062 := z.DecBinary()
	_ = yym2062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2063 := r.ContainerType()
		if yyct2063 == codecSelferValueTypeMap1234 {
			yyl2063 := r.ReadMapStart()
			if yyl2063 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2063, d)
			}
		} else if yyct2063 == codecSelferValueTypeArray1234 {
			yyl2063 := r.ReadArrayStart()
			if yyl2063 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2063, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2064Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2064Slc
	var yyhl2064 bool = l >= 0
	for yyj2064 := 0; ; yyj2064++ {
		if yyhl2064 {
			if yyj2064 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2064Slc = r.DecodeBytes(yys2064Slc, true, true)
		yys2064 := string(yys2064Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2064 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2064)
		} // end switch yys2064
	} // end for yyj2064
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2069 int
	var yyb2069 bool
	var yyhl2069 bool = l >= 0
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2069++
		if yyhl2069 {
			yyb2069 = yyj2069 > l
		} else {
			yyb2069 = r.CheckBreak()
		}
		if yyb2069 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2069-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2074 := z.EncBinary()
	_ = yym2074
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2075 := z.DecBinary()
	_ = yym2075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2076 := z.EncBinary()
		_ = yym2076
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2077 := !z.EncBinary()
			yy2arr2077 := z.EncBasicHandle().StructToArray
			var yyq2077 [13]bool
			_, _, _ = yysep2077, yyq2077, yy2arr2077
			const yyr2077 bool = false
			yyq2077[2] = x.RestartPolicy != ""
			yyq2077[3] = x.TerminationGracePeriodSeconds != nil
			yyq2077[4] = x.ActiveDeadlineSeconds != nil
			yyq2077[5] = x.DNSPolicy != ""
			yyq2077[6] = len(x.NodeSelector) != 0
			yyq2077[8] = x.NodeName != ""
			yyq2077[9] = x.SecurityContext != nil
			yyq2077[10] = len(x.ImagePullSecrets) != 0
			yyq2077[11] = x.Hostname != ""
			yyq2077[12] = x.Subdomain != ""
			var yynn2077 int
			if yyr2077 || yy2arr2077 {
				r.EncodeArrayStart(13)
			} else {
				yynn2077 = 3
				for _, b := range yyq2077 {
					if b {
						yynn2077++
					}
				}
				r.EncodeMapStart(yynn2077)
				yynn2077 = 0
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2080 := z.EncBinary()
					_ = yym2080
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2086 := *x.TerminationGracePeriodSeconds
						yym2087 := z.EncBinary()
						_ = yym2087
						if false {
						} else {
							r.EncodeInt(int64(yy2086))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2088 := *x.TerminationGracePeriodSeconds
						yym2089 := z.EncBinary()
						_ = yym2089
						if false {
						} else {
							r.EncodeInt(int64(yy2088))
						}
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2091 := *x.ActiveDeadlineSeconds
						yym2092 := z.EncBinary()
						_ = yym2092
						if false {
						} else {
							r.EncodeInt(int64(yy2091))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2093 := *x.ActiveDeadlineSeconds
						yym2094 := z.EncBinary()
						_ = yym2094
						if false {
						} else {
							r.EncodeInt(int64(yy2093))
						}
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2097 := z.EncBinary()
						_ = yym2097
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2098 := z.EncBinary()
						_ = yym2098
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2100 := z.EncBinary()
				_ = yym2100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2101 := z.EncBinary()
				_ = yym2101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[8] {
					yym2103 := z.EncBinary()
					_ = yym2103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2104 := z.EncBinary()
					_ = yym2104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2107 := z.EncBinary()
						_ = yym2107
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2108 := z.EncBinary()
						_ = yym2108
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[11] {
					yym2110 := z.EncBinary()
					_ = yym2110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2111 := z.EncBinary()
					_ = yym2111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[12] {
					yym2113 := z.EncBinary()
					_ = yym2113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2115 := z.DecBinary()
	_ = yym2115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2116 := r.ContainerType()
		if yyct2116 == codecSelferValueTypeMap1234 {
			yyl2116 := r.ReadMapStart()
			if yyl2116 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2116, d)
			}
		} else if yyct2116 == codecSelferValueTypeArray1234 {
			yyl2116 := r.ReadArrayStart()
			if yyl2116 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2116, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2117Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2117Slc
	var yyhl2117 bool = l >= 0
	for yyj2117 := 0; ; yyj2117++ {
		if yyhl2117 {
			if yyj2117 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2117Slc = r.DecodeBytes(yys2117Slc, true, true)
		yys2117 := string(yys2117Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2117 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2118 := &x.Volumes
				yym2119 := z.DecBinary()
				_ = yym2119
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2118), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2120 := &x.Containers
				yym2121 := z.DecBinary()
				_ = yym2121
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2120), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2124 := z.DecBinary()
				_ = yym2124
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2126 := z.DecBinary()
				_ = yym2126
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2128 := &x.NodeSelector
				yym2129 := z.DecBinary()
				_ = yym2129
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2128, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2133 := &x.ImagePullSecrets
				yym2134 := z.DecBinary()
				_ = yym2134
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2133), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2117)
		} // end switch yys2117
	} // end for yyj2117
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2137 int
	var yyb2137 bool
	var yyhl2137 bool = l >= 0
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2138 := &x.Volumes
		yym2139 := z.DecBinary()
		_ = yym2139
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2138), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2140 := &x.Containers
		yym2141 := z.DecBinary()
		_ = yym2141
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2140), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2144 := z.DecBinary()
		_ = yym2144
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2146 := z.DecBinary()
		_ = yym2146
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2148 := &x.NodeSelector
		yym2149 := z.DecBinary()
		_ = yym2149
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2148, false, d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2153 := &x.ImagePullSecrets
		yym2154 := z.DecBinary()
		_ = yym2154
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2153), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2137++
		if yyhl2137 {
			yyb2137 = yyj2137 > l
		} else {
			yyb2137 = r.CheckBreak()
		}
		if yyb2137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Sysctl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2157 := z.EncBinary()
		_ = yym2157
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2158 := !z.EncBinary()
			yy2arr2158 := z.EncBasicHandle().StructToArray
			var yyq2158 [2]bool
			_, _, _ = yysep2158, yyq2158, yy2arr2158
			const yyr2158 bool = false
			var yynn2158 int
			if yyr2158 || yy2arr2158 {
				r.EncodeArrayStart(2)
			} else {
				yynn2158 = 2
				for _, b := range yyq2158 {
					if b {
						yynn2158++
					}
				}
				r.EncodeMapStart(yynn2158)
				yynn2158 = 0
			}
			if yyr2158 || yy2arr2158 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2160 := z.EncBinary()
				_ = yym2160
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2161 := z.EncBinary()
				_ = yym2161
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2158 || yy2arr2158 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2163 := z.EncBinary()
				_ = yym2163
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2164 := z.EncBinary()
				_ = yym2164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr2158 || yy2arr2158 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Sysctl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2165 := z.DecBinary()
	_ = yym2165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2166 := r.ContainerType()
		if yyct2166 == codecSelferValueTypeMap1234 {
			yyl2166 := r.ReadMapStart()
			if yyl2166 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2166, d)
			}
		} else if yyct2166 == codecSelferValueTypeArray1234 {
			yyl2166 := r.ReadArrayStart()
			if yyl2166 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Sysctl) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2167Slc
	var yyhl2167 bool = l >= 0
	for yyj2167 := 0; ; yyj2167++ {
		if yyhl2167 {
			if yyj2167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2167Slc = r.DecodeBytes(yys2167Slc, true, true)
		yys2167 := string(yys2167Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2167 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2167)
		} // end switch yys2167
	} // end for yyj2167
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Sysctl) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2170 int
	var yyb2170 bool
	var yyhl2170 bool = l >= 0
	yyj2170++
	if yyhl2170 {
		yyb2170 = yyj2170 > l
	} else {
		yyb2170 = r.CheckBreak()
	}
	if yyb2170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2170++
	if yyhl2170 {
		yyb2170 = yyj2170 > l
	} else {
		yyb2170 = r.CheckBreak()
	}
	if yyb2170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj2170++
		if yyhl2170 {
			yyb2170 = yyj2170 > l
		} else {
			yyb2170 = r.CheckBreak()
		}
		if yyb2170 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2170-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2173 := z.EncBinary()
		_ = yym2173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2174 := !z.EncBinary()
			yy2arr2174 := z.EncBasicHandle().StructToArray
			var yyq2174 [8]bool
			_, _, _ = yysep2174, yyq2174, yy2arr2174
			const yyr2174 bool = false
			yyq2174[0] = x.HostNetwork != false
			yyq2174[1] = x.HostPID != false
			yyq2174[2] = x.HostIPC != false
			yyq2174[3] = x.SELinuxOptions != nil
			yyq2174[4] = x.RunAsUser != nil
			yyq2174[5] = x.RunAsNonRoot != nil
			yyq2174[6] = len(x.SupplementalGroups) != 0
			yyq2174[7] = x.FSGroup != nil
			var yynn2174 int
			if yyr2174 || yy2arr2174 {
				r.EncodeArrayStart(8)
			} else {
				yynn2174 = 0
				for _, b := range yyq2174 {
					if b {
						yynn2174++
					}
				}
				r.EncodeMapStart(yynn2174)
				yynn2174 = 0
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[0] {
					yym2176 := z.EncBinary()
					_ = yym2176
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2174[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[1] {
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2174[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[2] {
					yym2182 := z.EncBinary()
					_ = yym2182
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2174[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2174[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2186 := *x.RunAsUser
						yym2187 := z.EncBinary()
						_ = yym2187
						if false {
						} else {
							r.EncodeInt(int64(yy2186))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2174[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2188 := *x.RunAsUser
						yym2189 := z.EncBinary()
						_ = yym2189
						if false {
						} else {
							r.EncodeInt(int64(yy2188))
						}
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2191 := *x.RunAsNonRoot
						yym2192 := z.EncBinary()
						_ = yym2192
						if false {
						} else {
							r.EncodeBool(bool(yy2191))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2174[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2193 := *x.RunAsNonRoot
						yym2194 := z.EncBinary()
						_ = yym2194
						if false {
						} else {
							r.EncodeBool(bool(yy2193))
						}
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2196 := z.EncBinary()
						_ = yym2196
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2174[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2197 := z.EncBinary()
						_ = yym2197
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2199 := *x.FSGroup
						yym2200 := z.EncBinary()
						_ = yym2200
						if false {
						} else {
							r.EncodeInt(int64(yy2199))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2174[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2201 := *x.FSGroup
						yym2202 := z.EncBinary()
						_ = yym2202
						if false {
						} else {
							r.EncodeInt(int64(yy2201))
						}
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2203 := z.DecBinary()
	_ = yym2203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2204 := r.ContainerType()
		if yyct2204 == codecSelferValueTypeMap1234 {
			yyl2204 := r.ReadMapStart()
			if yyl2204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2204, d)
			}
		} else if yyct2204 == codecSelferValueTypeArray1234 {
			yyl2204 := r.ReadArrayStart()
			if yyl2204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2205Slc
	var yyhl2205 bool = l >= 0
	for yyj2205 := 0; ; yyj2205++ {
		if yyhl2205 {
			if yyj2205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2205Slc = r.DecodeBytes(yys2205Slc, true, true)
		yys2205 := string(yys2205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2205 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2211 := z.DecBinary()
				_ = yym2211
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2213 := z.DecBinary()
				_ = yym2213
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2214 := &x.SupplementalGroups
				yym2215 := z.DecBinary()
				_ = yym2215
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2214, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2217 := z.DecBinary()
				_ = yym2217
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2205)
		} // end switch yys2205
	} // end for yyj2205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2218 int
	var yyb2218 bool
	var yyhl2218 bool = l >= 0
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2224 := z.DecBinary()
		_ = yym2224
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2226 := z.DecBinary()
		_ = yym2226
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2227 := &x.SupplementalGroups
		yym2228 := z.DecBinary()
		_ = yym2228
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2227, false, d)
		}
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2230 := z.DecBinary()
		_ = yym2230
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2218++
		if yyhl2218 {
			yyb2218 = yyj2218 > l
		} else {
			yyb2218 = r.CheckBreak()
		}
		if yyb2218 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2218-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2231 := z.EncBinary()
		_ = yym2231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2232 := !z.EncBinary()
			yy2arr2232 := z.EncBasicHandle().StructToArray
			var yyq2232 [8]bool
			_, _, _ = yysep2232, yyq2232, yy2arr2232
			const yyr2232 bool = false
			yyq2232[0] = x.Phase != ""
			yyq2232[1] = len(x.Conditions) != 0
			yyq2232[2] = x.Message != ""
			yyq2232[3] = x.Reason != ""
			yyq2232[4] = x.HostIP != ""
			yyq2232[5] = x.PodIP != ""
			yyq2232[6] = x.StartTime != nil
			yyq2232[7] = len(x.ContainerStatuses) != 0
			var yynn2232 int
			if yyr2232 || yy2arr2232 {
				r.EncodeArrayStart(8)
			} else {
				yynn2232 = 0
				for _, b := range yyq2232 {
					if b {
						yynn2232++
					}
				}
				r.EncodeMapStart(yynn2232)
				yynn2232 = 0
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2235 := z.EncBinary()
						_ = yym2235
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2232[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2236 := z.EncBinary()
						_ = yym2236
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[2] {
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2239 := z.EncBinary()
					_ = yym2239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[3] {
					yym2241 := z.EncBinary()
					_ = yym2241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2242 := z.EncBinary()
					_ = yym2242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[4] {
					yym2244 := z.EncBinary()
					_ = yym2244
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2245 := z.EncBinary()
					_ = yym2245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[5] {
					yym2247 := z.EncBinary()
					_ = yym2247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2248 := z.EncBinary()
					_ = yym2248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2250 := z.EncBinary()
						_ = yym2250
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2250 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2250 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2232[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2251 := z.EncBinary()
						_ = yym2251
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2251 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2251 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2253 := z.EncBinary()
						_ = yym2253
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2232[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2254 := z.EncBinary()
						_ = yym2254
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2255 := z.DecBinary()
	_ = yym2255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2256 := r.ContainerType()
		if yyct2256 == codecSelferValueTypeMap1234 {
			yyl2256 := r.ReadMapStart()
			if yyl2256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2256, d)
			}
		} else if yyct2256 == codecSelferValueTypeArray1234 {
			yyl2256 := r.ReadArrayStart()
			if yyl2256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2257Slc
	var yyhl2257 bool = l >= 0
	for yyj2257 := 0; ; yyj2257++ {
		if yyhl2257 {
			if yyj2257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2257Slc = r.DecodeBytes(yys2257Slc, true, true)
		yys2257 := string(yys2257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2257 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2259 := &x.Conditions
				yym2260 := z.DecBinary()
				_ = yym2260
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2259), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2266 := z.DecBinary()
				_ = yym2266
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2266 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2266 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2267 := &x.ContainerStatuses
				yym2268 := z.DecBinary()
				_ = yym2268
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2267), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2257)
		} // end switch yys2257
	} // end for yyj2257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2269 int
	var yyb2269 bool
	var yyhl2269 bool = l >= 0
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2271 := &x.Conditions
		yym2272 := z.DecBinary()
		_ = yym2272
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2271), d)
		}
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2278 := z.DecBinary()
		_ = yym2278
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2278 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2278 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2279 := &x.ContainerStatuses
		yym2280 := z.DecBinary()
		_ = yym2280
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2279), d)
		}
	}
	for {
		yyj2269++
		if yyhl2269 {
			yyb2269 = yyj2269 > l
		} else {
			yyb2269 = r.CheckBreak()
		}
		if yyb2269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2281 := z.EncBinary()
		_ = yym2281
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2282 := !z.EncBinary()
			yy2arr2282 := z.EncBasicHandle().StructToArray
			var yyq2282 [4]bool
			_, _, _ = yysep2282, yyq2282, yy2arr2282
			const yyr2282 bool = false
			yyq2282[0] = x.Kind != ""
			yyq2282[1] = x.APIVersion != ""
			yyq2282[2] = true
			yyq2282[3] = true
			var yynn2282 int
			if yyr2282 || yy2arr2282 {
				r.EncodeArrayStart(4)
			} else {
				yynn2282 = 0
				for _, b := range yyq2282 {
					if b {
						yynn2282++
					}
				}
				r.EncodeMapStart(yynn2282)
				yynn2282 = 0
			}
			if yyr2282 || yy2arr2282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2282[0] {
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2282[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2285 := z.EncBinary()
					_ = yym2285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2282 || yy2arr2282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2282[1] {
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2282[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2288 := z.EncBinary()
					_ = yym2288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2282 || yy2arr2282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2282[2] {
					yy2290 := &x.ObjectMeta
					yy2290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2282[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2291 := &x.ObjectMeta
					yy2291.CodecEncodeSelf(e)
				}
			}
			if yyr2282 || yy2arr2282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2282[3] {
					yy2293 := &x.Status
					yy2293.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2282[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2294 := &x.Status
					yy2294.CodecEncodeSelf(e)
				}
			}
			if yyr2282 || yy2arr2282 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2295 := z.DecBinary()
	_ = yym2295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2296 := r.ContainerType()
		if yyct2296 == codecSelferValueTypeMap1234 {
			yyl2296 := r.ReadMapStart()
			if yyl2296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2296, d)
			}
		} else if yyct2296 == codecSelferValueTypeArray1234 {
			yyl2296 := r.ReadArrayStart()
			if yyl2296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2297Slc
	var yyhl2297 bool = l >= 0
	for yyj2297 := 0; ; yyj2297++ {
		if yyhl2297 {
			if yyj2297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2297Slc = r.DecodeBytes(yys2297Slc, true, true)
		yys2297 := string(yys2297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2297 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2300 := &x.ObjectMeta
				yyv2300.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2301 := &x.Status
				yyv2301.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2297)
		} // end switch yys2297
	} // end for yyj2297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2302 int
	var yyb2302 bool
	var yyhl2302 bool = l >= 0
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2305 := &x.ObjectMeta
		yyv2305.CodecDecodeSelf(d)
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2306 := &x.Status
		yyv2306.CodecDecodeSelf(d)
	}
	for {
		yyj2302++
		if yyhl2302 {
			yyb2302 = yyj2302 > l
		} else {
			yyb2302 = r.CheckBreak()
		}
		if yyb2302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2307 := z.EncBinary()
		_ = yym2307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2308 := !z.EncBinary()
			yy2arr2308 := z.EncBasicHandle().StructToArray
			var yyq2308 [5]bool
			_, _, _ = yysep2308, yyq2308, yy2arr2308
			const yyr2308 bool = false
			yyq2308[0] = x.Kind != ""
			yyq2308[1] = x.APIVersion != ""
			yyq2308[2] = true
			yyq2308[3] = true
			yyq2308[4] = true
			var yynn2308 int
			if yyr2308 || yy2arr2308 {
				r.EncodeArrayStart(5)
			} else {
				yynn2308 = 0
				for _, b := range yyq2308 {
					if b {
						yynn2308++
					}
				}
				r.EncodeMapStart(yynn2308)
				yynn2308 = 0
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[0] {
					yym2310 := z.EncBinary()
					_ = yym2310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2308[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2311 := z.EncBinary()
					_ = yym2311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[1] {
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2308[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2314 := z.EncBinary()
					_ = yym2314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[2] {
					yy2316 := &x.ObjectMeta
					yy2316.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2308[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2317 := &x.ObjectMeta
					yy2317.CodecEncodeSelf(e)
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[3] {
					yy2319 := &x.Spec
					yy2319.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2308[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2320 := &x.Spec
					yy2320.CodecEncodeSelf(e)
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[4] {
					yy2322 := &x.Status
					yy2322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2308[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2323 := &x.Status
					yy2323.CodecEncodeSelf(e)
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2324 := z.DecBinary()
	_ = yym2324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2325 := r.ContainerType()
		if yyct2325 == codecSelferValueTypeMap1234 {
			yyl2325 := r.ReadMapStart()
			if yyl2325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2325, d)
			}
		} else if yyct2325 == codecSelferValueTypeArray1234 {
			yyl2325 := r.ReadArrayStart()
			if yyl2325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2326Slc
	var yyhl2326 bool = l >= 0
	for yyj2326 := 0; ; yyj2326++ {
		if yyhl2326 {
			if yyj2326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2326Slc = r.DecodeBytes(yys2326Slc, true, true)
		yys2326 := string(yys2326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2326 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2329 := &x.ObjectMeta
				yyv2329.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2330 := &x.Spec
				yyv2330.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2331 := &x.Status
				yyv2331.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2326)
		} // end switch yys2326
	} // end for yyj2326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2332 int
	var yyb2332 bool
	var yyhl2332 bool = l >= 0
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2335 := &x.ObjectMeta
		yyv2335.CodecDecodeSelf(d)
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2336 := &x.Spec
		yyv2336.CodecDecodeSelf(d)
	}
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2337 := &x.Status
		yyv2337.CodecDecodeSelf(d)
	}
	for {
		yyj2332++
		if yyhl2332 {
			yyb2332 = yyj2332 > l
		} else {
			yyb2332 = r.CheckBreak()
		}
		if yyb2332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2338 := z.EncBinary()
		_ = yym2338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2339 := !z.EncBinary()
			yy2arr2339 := z.EncBasicHandle().StructToArray
			var yyq2339 [2]bool
			_, _, _ = yysep2339, yyq2339, yy2arr2339
			const yyr2339 bool = false
			yyq2339[0] = true
			yyq2339[1] = true
			var yynn2339 int
			if yyr2339 || yy2arr2339 {
				r.EncodeArrayStart(2)
			} else {
				yynn2339 = 0
				for _, b := range yyq2339 {
					if b {
						yynn2339++
					}
				}
				r.EncodeMapStart(yynn2339)
				yynn2339 = 0
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[0] {
					yy2341 := &x.ObjectMeta
					yy2341.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2339[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2342 := &x.ObjectMeta
					yy2342.CodecEncodeSelf(e)
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[1] {
					yy2344 := &x.Spec
					yy2344.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2339[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2345 := &x.Spec
					yy2345.CodecEncodeSelf(e)
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2346 := z.DecBinary()
	_ = yym2346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2347 := r.ContainerType()
		if yyct2347 == codecSelferValueTypeMap1234 {
			yyl2347 := r.ReadMapStart()
			if yyl2347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2347, d)
			}
		} else if yyct2347 == codecSelferValueTypeArray1234 {
			yyl2347 := r.ReadArrayStart()
			if yyl2347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2348Slc
	var yyhl2348 bool = l >= 0
	for yyj2348 := 0; ; yyj2348++ {
		if yyhl2348 {
			if yyj2348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2348Slc = r.DecodeBytes(yys2348Slc, true, true)
		yys2348 := string(yys2348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2348 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2349 := &x.ObjectMeta
				yyv2349.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2350 := &x.Spec
				yyv2350.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2348)
		} // end switch yys2348
	} // end for yyj2348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2351 int
	var yyb2351 bool
	var yyhl2351 bool = l >= 0
	yyj2351++
	if yyhl2351 {
		yyb2351 = yyj2351 > l
	} else {
		yyb2351 = r.CheckBreak()
	}
	if yyb2351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2352 := &x.ObjectMeta
		yyv2352.CodecDecodeSelf(d)
	}
	yyj2351++
	if yyhl2351 {
		yyb2351 = yyj2351 > l
	} else {
		yyb2351 = r.CheckBreak()
	}
	if yyb2351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2353 := &x.Spec
		yyv2353.CodecDecodeSelf(d)
	}
	for {
		yyj2351++
		if yyhl2351 {
			yyb2351 = yyj2351 > l
		} else {
			yyb2351 = r.CheckBreak()
		}
		if yyb2351 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2351-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2354 := z.EncBinary()
		_ = yym2354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2355 := !z.EncBinary()
			yy2arr2355 := z.EncBasicHandle().StructToArray
			var yyq2355 [4]bool
			_, _, _ = yysep2355, yyq2355, yy2arr2355
			const yyr2355 bool = false
			yyq2355[0] = x.Kind != ""
			yyq2355[1] = x.APIVersion != ""
			yyq2355[2] = true
			yyq2355[3] = true
			var yynn2355 int
			if yyr2355 || yy2arr2355 {
				r.EncodeArrayStart(4)
			} else {
				yynn2355 = 0
				for _, b := range yyq2355 {
					if b {
						yynn2355++
					}
				}
				r.EncodeMapStart(yynn2355)
				yynn2355 = 0
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2355[0] {
					yym2357 := z.EncBinary()
					_ = yym2357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2355[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2355[1] {
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2355[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2355[2] {
					yy2363 := &x.ObjectMeta
					yy2363.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2355[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2364 := &x.ObjectMeta
					yy2364.CodecEncodeSelf(e)
				}
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2355[3] {
					yy2366 := &x.Template
					yy2366.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2355[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2367 := &x.Template
					yy2367.CodecEncodeSelf(e)
				}
			}
			if yyr2355 || yy2arr2355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2368 := z.DecBinary()
	_ = yym2368
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2369 := r.ContainerType()
		if yyct2369 == codecSelferValueTypeMap1234 {
			yyl2369 := r.ReadMapStart()
			if yyl2369 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2369, d)
			}
		} else if yyct2369 == codecSelferValueTypeArray1234 {
			yyl2369 := r.ReadArrayStart()
			if yyl2369 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2369, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2370Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2370Slc
	var yyhl2370 bool = l >= 0
	for yyj2370 := 0; ; yyj2370++ {
		if yyhl2370 {
			if yyj2370 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2370Slc = r.DecodeBytes(yys2370Slc, true, true)
		yys2370 := string(yys2370Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2370 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2373 := &x.ObjectMeta
				yyv2373.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2374 := &x.Template
				yyv2374.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2370)
		} // end switch yys2370
	} // end for yyj2370
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2375 int
	var yyb2375 bool
	var yyhl2375 bool = l >= 0
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2378 := &x.ObjectMeta
		yyv2378.CodecDecodeSelf(d)
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2379 := &x.Template
		yyv2379.CodecDecodeSelf(d)
	}
	for {
		yyj2375++
		if yyhl2375 {
			yyb2375 = yyj2375 > l
		} else {
			yyb2375 = r.CheckBreak()
		}
		if yyb2375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2380 := z.EncBinary()
		_ = yym2380
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2381 := !z.EncBinary()
			yy2arr2381 := z.EncBasicHandle().StructToArray
			var yyq2381 [4]bool
			_, _, _ = yysep2381, yyq2381, yy2arr2381
			const yyr2381 bool = false
			yyq2381[0] = x.Kind != ""
			yyq2381[1] = x.APIVersion != ""
			yyq2381[2] = true
			var yynn2381 int
			if yyr2381 || yy2arr2381 {
				r.EncodeArrayStart(4)
			} else {
				yynn2381 = 1
				for _, b := range yyq2381 {
					if b {
						yynn2381++
					}
				}
				r.EncodeMapStart(yynn2381)
				yynn2381 = 0
			}
			if yyr2381 || yy2arr2381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2381[0] {
					yym2383 := z.EncBinary()
					_ = yym2383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2381[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2384 := z.EncBinary()
					_ = yym2384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2381 || yy2arr2381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2381[1] {
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2381[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2387 := z.EncBinary()
					_ = yym2387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2381 || yy2arr2381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2381[2] {
					yy2389 := &x.ListMeta
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2389) {
					} else {
						z.EncFallback(yy2389)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2381[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2391 := &x.ListMeta
					yym2392 := z.EncBinary()
					_ = yym2392
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2391) {
					} else {
						z.EncFallback(yy2391)
					}
				}
			}
			if yyr2381 || yy2arr2381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2395 := z.EncBinary()
					_ = yym2395
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2381 || yy2arr2381 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2396 := z.DecBinary()
	_ = yym2396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2397 := r.ContainerType()
		if yyct2397 == codecSelferValueTypeMap1234 {
			yyl2397 := r.ReadMapStart()
			if yyl2397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2397, d)
			}
		} else if yyct2397 == codecSelferValueTypeArray1234 {
			yyl2397 := r.ReadArrayStart()
			if yyl2397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2398Slc
	var yyhl2398 bool = l >= 0
	for yyj2398 := 0; ; yyj2398++ {
		if yyhl2398 {
			if yyj2398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2398Slc = r.DecodeBytes(yys2398Slc, true, true)
		yys2398 := string(yys2398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2398 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2401 := &x.ListMeta
				yym2402 := z.DecBinary()
				_ = yym2402
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2401) {
				} else {
					z.DecFallback(yyv2401, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2403 := &x.Items
				yym2404 := z.DecBinary()
				_ = yym2404
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2403), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2398)
		} // end switch yys2398
	} // end for yyj2398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2405 int
	var yyb2405 bool
	var yyhl2405 bool = l >= 0
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2408 := &x.ListMeta
		yym2409 := z.DecBinary()
		_ = yym2409
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2408) {
		} else {
			z.DecFallback(yyv2408, false)
		}
	}
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2410 := &x.Items
		yym2411 := z.DecBinary()
		_ = yym2411
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2410), d)
		}
	}
	for {
		yyj2405++
		if yyhl2405 {
			yyb2405 = yyj2405 > l
		} else {
			yyb2405 = r.CheckBreak()
		}
		if yyb2405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2412 := z.EncBinary()
		_ = yym2412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2413 := !z.EncBinary()
			yy2arr2413 := z.EncBasicHandle().StructToArray
			var yyq2413 [3]bool
			_, _, _ = yysep2413, yyq2413, yy2arr2413
			const yyr2413 bool = false
			yyq2413[2] = x.Template != nil
			var yynn2413 int
			if yyr2413 || yy2arr2413 {
				r.EncodeArrayStart(3)
			} else {
				yynn2413 = 2
				for _, b := range yyq2413 {
					if b {
						yynn2413++
					}
				}
				r.EncodeMapStart(yynn2413)
				yynn2413 = 0
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2415 := z.EncBinary()
				_ = yym2415
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2416 := z.EncBinary()
				_ = yym2416
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2421 := z.DecBinary()
	_ = yym2421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2422 := r.ContainerType()
		if yyct2422 == codecSelferValueTypeMap1234 {
			yyl2422 := r.ReadMapStart()
			if yyl2422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2422, d)
			}
		} else if yyct2422 == codecSelferValueTypeArray1234 {
			yyl2422 := r.ReadArrayStart()
			if yyl2422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2423Slc
	var yyhl2423 bool = l >= 0
	for yyj2423 := 0; ; yyj2423++ {
		if yyhl2423 {
			if yyj2423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2423Slc = r.DecodeBytes(yys2423Slc, true, true)
		yys2423 := string(yys2423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2423 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2425 := &x.Selector
				yym2426 := z.DecBinary()
				_ = yym2426
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2425, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2423)
		} // end switch yys2423
	} // end for yyj2423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2428 int
	var yyb2428 bool
	var yyhl2428 bool = l >= 0
	yyj2428++
	if yyhl2428 {
		yyb2428 = yyj2428 > l
	} else {
		yyb2428 = r.CheckBreak()
	}
	if yyb2428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2428++
	if yyhl2428 {
		yyb2428 = yyj2428 > l
	} else {
		yyb2428 = r.CheckBreak()
	}
	if yyb2428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2430 := &x.Selector
		yym2431 := z.DecBinary()
		_ = yym2431
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2430, false, d)
		}
	}
	yyj2428++
	if yyhl2428 {
		yyb2428 = yyj2428 > l
	} else {
		yyb2428 = r.CheckBreak()
	}
	if yyb2428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2428++
		if yyhl2428 {
			yyb2428 = yyj2428 > l
		} else {
			yyb2428 = r.CheckBreak()
		}
		if yyb2428 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2428-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2433 := z.EncBinary()
		_ = yym2433
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2434 := !z.EncBinary()
			yy2arr2434 := z.EncBasicHandle().StructToArray
			var yyq2434 [4]bool
			_, _, _ = yysep2434, yyq2434, yy2arr2434
			const yyr2434 bool = false
			yyq2434[1] = x.FullyLabeledReplicas != 0
			yyq2434[2] = x.ReadyReplicas != 0
			yyq2434[3] = x.ObservedGeneration != 0
			var yynn2434 int
			if yyr2434 || yy2arr2434 {
				r.EncodeArrayStart(4)
			} else {
				yynn2434 = 1
				for _, b := range yyq2434 {
					if b {
						yynn2434++
					}
				}
				r.EncodeMapStart(yynn2434)
				yynn2434 = 0
			}
			if yyr2434 || yy2arr2434 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2436 := z.EncBinary()
				_ = yym2436
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2437 := z.EncBinary()
				_ = yym2437
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2434 || yy2arr2434 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2434[1] {
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2434[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2440 := z.EncBinary()
					_ = yym2440
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2434 || yy2arr2434 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2434[2] {
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2434[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2443 := z.EncBinary()
					_ = yym2443
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2434 || yy2arr2434 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2434[3] {
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2434[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2434 || yy2arr2434 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2447 := z.DecBinary()
	_ = yym2447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2448 := r.ContainerType()
		if yyct2448 == codecSelferValueTypeMap1234 {
			yyl2448 := r.ReadMapStart()
			if yyl2448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2448, d)
			}
		} else if yyct2448 == codecSelferValueTypeArray1234 {
			yyl2448 := r.ReadArrayStart()
			if yyl2448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2449Slc
	var yyhl2449 bool = l >= 0
	for yyj2449 := 0; ; yyj2449++ {
		if yyhl2449 {
			if yyj2449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2449Slc = r.DecodeBytes(yys2449Slc, true, true)
		yys2449 := string(yys2449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2449 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2449)
		} // end switch yys2449
	} // end for yyj2449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2454 int
	var yyb2454 bool
	var yyhl2454 bool = l >= 0
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2454++
		if yyhl2454 {
			yyb2454 = yyj2454 > l
		} else {
			yyb2454 = r.CheckBreak()
		}
		if yyb2454 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2454-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2459 := z.EncBinary()
		_ = yym2459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2460 := !z.EncBinary()
			yy2arr2460 := z.EncBasicHandle().StructToArray
			var yyq2460 [5]bool
			_, _, _ = yysep2460, yyq2460, yy2arr2460
			const yyr2460 bool = false
			yyq2460[0] = x.Kind != ""
			yyq2460[1] = x.APIVersion != ""
			yyq2460[2] = true
			yyq2460[3] = true
			yyq2460[4] = true
			var yynn2460 int
			if yyr2460 || yy2arr2460 {
				r.EncodeArrayStart(5)
			} else {
				yynn2460 = 0
				for _, b := range yyq2460 {
					if b {
						yynn2460++
					}
				}
				r.EncodeMapStart(yynn2460)
				yynn2460 = 0
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[0] {
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2460[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[1] {
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2460[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[2] {
					yy2468 := &x.ObjectMeta
					yy2468.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2460[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2469 := &x.ObjectMeta
					yy2469.CodecEncodeSelf(e)
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[3] {
					yy2471 := &x.Spec
					yy2471.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2460[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2472 := &x.Spec
					yy2472.CodecEncodeSelf(e)
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[4] {
					yy2474 := &x.Status
					yy2474.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2460[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2475 := &x.Status
					yy2475.CodecEncodeSelf(e)
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2476 := z.DecBinary()
	_ = yym2476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2477 := r.ContainerType()
		if yyct2477 == codecSelferValueTypeMap1234 {
			yyl2477 := r.ReadMapStart()
			if yyl2477 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2477, d)
			}
		} else if yyct2477 == codecSelferValueTypeArray1234 {
			yyl2477 := r.ReadArrayStart()
			if yyl2477 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2477, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2478Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2478Slc
	var yyhl2478 bool = l >= 0
	for yyj2478 := 0; ; yyj2478++ {
		if yyhl2478 {
			if yyj2478 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2478Slc = r.DecodeBytes(yys2478Slc, true, true)
		yys2478 := string(yys2478Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2478 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2481 := &x.ObjectMeta
				yyv2481.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2482 := &x.Spec
				yyv2482.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2483 := &x.Status
				yyv2483.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2478)
		} // end switch yys2478
	} // end for yyj2478
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2484 int
	var yyb2484 bool
	var yyhl2484 bool = l >= 0
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2487 := &x.ObjectMeta
		yyv2487.CodecDecodeSelf(d)
	}
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2488 := &x.Spec
		yyv2488.CodecDecodeSelf(d)
	}
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2489 := &x.Status
		yyv2489.CodecDecodeSelf(d)
	}
	for {
		yyj2484++
		if yyhl2484 {
			yyb2484 = yyj2484 > l
		} else {
			yyb2484 = r.CheckBreak()
		}
		if yyb2484 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2484-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2490 := z.EncBinary()
		_ = yym2490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2491 := !z.EncBinary()
			yy2arr2491 := z.EncBasicHandle().StructToArray
			var yyq2491 [4]bool
			_, _, _ = yysep2491, yyq2491, yy2arr2491
			const yyr2491 bool = false
			yyq2491[0] = x.Kind != ""
			yyq2491[1] = x.APIVersion != ""
			yyq2491[2] = true
			var yynn2491 int
			if yyr2491 || yy2arr2491 {
				r.EncodeArrayStart(4)
			} else {
				yynn2491 = 1
				for _, b := range yyq2491 {
					if b {
						yynn2491++
					}
				}
				r.EncodeMapStart(yynn2491)
				yynn2491 = 0
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[0] {
					yym2493 := z.EncBinary()
					_ = yym2493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[1] {
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2491[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[2] {
					yy2499 := &x.ListMeta
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2499) {
					} else {
						z.EncFallback(yy2499)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2491[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2501 := &x.ListMeta
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2501) {
					} else {
						z.EncFallback(yy2501)
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2504 := z.EncBinary()
					_ = yym2504
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2505 := z.EncBinary()
					_ = yym2505
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2506 := z.DecBinary()
	_ = yym2506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2507 := r.ContainerType()
		if yyct2507 == codecSelferValueTypeMap1234 {
			yyl2507 := r.ReadMapStart()
			if yyl2507 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2507, d)
			}
		} else if yyct2507 == codecSelferValueTypeArray1234 {
			yyl2507 := r.ReadArrayStart()
			if yyl2507 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2507, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2508Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2508Slc
	var yyhl2508 bool = l >= 0
	for yyj2508 := 0; ; yyj2508++ {
		if yyhl2508 {
			if yyj2508 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2508Slc = r.DecodeBytes(yys2508Slc, true, true)
		yys2508 := string(yys2508Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2508 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2511 := &x.ListMeta
				yym2512 := z.DecBinary()
				_ = yym2512
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2511) {
				} else {
					z.DecFallback(yyv2511, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2513 := &x.Items
				yym2514 := z.DecBinary()
				_ = yym2514
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2513), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2508)
		} // end switch yys2508
	} // end for yyj2508
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2515 int
	var yyb2515 bool
	var yyhl2515 bool = l >= 0
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2518 := &x.ListMeta
		yym2519 := z.DecBinary()
		_ = yym2519
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2518) {
		} else {
			z.DecFallback(yyv2518, false)
		}
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2520 := &x.Items
		yym2521 := z.DecBinary()
		_ = yym2521
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2520), d)
		}
	}
	for {
		yyj2515++
		if yyhl2515 {
			yyb2515 = yyj2515 > l
		} else {
			yyb2515 = r.CheckBreak()
		}
		if yyb2515 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2515-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2522 := z.EncBinary()
		_ = yym2522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2523 := !z.EncBinary()
			yy2arr2523 := z.EncBasicHandle().StructToArray
			var yyq2523 [4]bool
			_, _, _ = yysep2523, yyq2523, yy2arr2523
			const yyr2523 bool = false
			yyq2523[0] = x.Kind != ""
			yyq2523[1] = x.APIVersion != ""
			yyq2523[2] = true
			var yynn2523 int
			if yyr2523 || yy2arr2523 {
				r.EncodeArrayStart(4)
			} else {
				yynn2523 = 1
				for _, b := range yyq2523 {
					if b {
						yynn2523++
					}
				}
				r.EncodeMapStart(yynn2523)
				yynn2523 = 0
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[0] {
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[1] {
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[2] {
					yy2531 := &x.ListMeta
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2531) {
					} else {
						z.EncFallback(yy2531)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2523[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2533 := &x.ListMeta
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2533) {
					} else {
						z.EncFallback(yy2533)
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2536 := z.EncBinary()
					_ = yym2536
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2537 := z.EncBinary()
					_ = yym2537
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2538 := z.DecBinary()
	_ = yym2538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2539 := r.ContainerType()
		if yyct2539 == codecSelferValueTypeMap1234 {
			yyl2539 := r.ReadMapStart()
			if yyl2539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2539, d)
			}
		} else if yyct2539 == codecSelferValueTypeArray1234 {
			yyl2539 := r.ReadArrayStart()
			if yyl2539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2540Slc
	var yyhl2540 bool = l >= 0
	for yyj2540 := 0; ; yyj2540++ {
		if yyhl2540 {
			if yyj2540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2540Slc = r.DecodeBytes(yys2540Slc, true, true)
		yys2540 := string(yys2540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2540 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2543 := &x.ListMeta
				yym2544 := z.DecBinary()
				_ = yym2544
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2543) {
				} else {
					z.DecFallback(yyv2543, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2545 := &x.Items
				yym2546 := z.DecBinary()
				_ = yym2546
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2545), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2540)
		} // end switch yys2540
	} // end for yyj2540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2547 int
	var yyb2547 bool
	var yyhl2547 bool = l >= 0
	yyj2547++
	if yyhl2547 {
		yyb2547 = yyj2547 > l
	} else {
		yyb2547 = r.CheckBreak()
	}
	if yyb2547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2547++
	if yyhl2547 {
		yyb2547 = yyj2547 > l
	} else {
		yyb2547 = r.CheckBreak()
	}
	if yyb2547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2547++
	if yyhl2547 {
		yyb2547 = yyj2547 > l
	} else {
		yyb2547 = r.CheckBreak()
	}
	if yyb2547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2550 := &x.ListMeta
		yym2551 := z.DecBinary()
		_ = yym2551
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2550) {
		} else {
			z.DecFallback(yyv2550, false)
		}
	}
	yyj2547++
	if yyhl2547 {
		yyb2547 = yyj2547 > l
	} else {
		yyb2547 = r.CheckBreak()
	}
	if yyb2547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2552 := &x.Items
		yym2553 := z.DecBinary()
		_ = yym2553
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2552), d)
		}
	}
	for {
		yyj2547++
		if yyhl2547 {
			yyb2547 = yyj2547 > l
		} else {
			yyb2547 = r.CheckBreak()
		}
		if yyb2547 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2547-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2554 := z.EncBinary()
	_ = yym2554
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2555 := z.DecBinary()
	_ = yym2555
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2556 := z.EncBinary()
	_ = yym2556
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2557 := z.DecBinary()
	_ = yym2557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2558 := z.EncBinary()
		_ = yym2558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2559 := !z.EncBinary()
			yy2arr2559 := z.EncBasicHandle().StructToArray
			var yyq2559 [1]bool
			_, _, _ = yysep2559, yyq2559, yy2arr2559
			const yyr2559 bool = false
			yyq2559[0] = true
			var yynn2559 int
			if yyr2559 || yy2arr2559 {
				r.EncodeArrayStart(1)
			} else {
				yynn2559 = 0
				for _, b := range yyq2559 {
					if b {
						yynn2559++
					}
				}
				r.EncodeMapStart(yynn2559)
				yynn2559 = 0
			}
			if yyr2559 || yy2arr2559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2559[0] {
					yy2561 := &x.LoadBalancer
					yy2561.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2559[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2562 := &x.LoadBalancer
					yy2562.CodecEncodeSelf(e)
				}
			}
			if yyr2559 || yy2arr2559 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2563 := z.DecBinary()
	_ = yym2563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2564 := r.ContainerType()
		if yyct2564 == codecSelferValueTypeMap1234 {
			yyl2564 := r.ReadMapStart()
			if yyl2564 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2564, d)
			}
		} else if yyct2564 == codecSelferValueTypeArray1234 {
			yyl2564 := r.ReadArrayStart()
			if yyl2564 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2565Slc
	var yyhl2565 bool = l >= 0
	for yyj2565 := 0; ; yyj2565++ {
		if yyhl2565 {
			if yyj2565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2565Slc = r.DecodeBytes(yys2565Slc, true, true)
		yys2565 := string(yys2565Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2565 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2566 := &x.LoadBalancer
				yyv2566.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2565)
		} // end switch yys2565
	} // end for yyj2565
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2567 int
	var yyb2567 bool
	var yyhl2567 bool = l >= 0
	yyj2567++
	if yyhl2567 {
		yyb2567 = yyj2567 > l
	} else {
		yyb2567 = r.CheckBreak()
	}
	if yyb2567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2568 := &x.LoadBalancer
		yyv2568.CodecDecodeSelf(d)
	}
	for {
		yyj2567++
		if yyhl2567 {
			yyb2567 = yyj2567 > l
		} else {
			yyb2567 = r.CheckBreak()
		}
		if yyb2567 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2567-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2569 := z.EncBinary()
		_ = yym2569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2570 := !z.EncBinary()
			yy2arr2570 := z.EncBasicHandle().StructToArray
			var yyq2570 [1]bool
			_, _, _ = yysep2570, yyq2570, yy2arr2570
			const yyr2570 bool = false
			yyq2570[0] = len(x.Ingress) != 0
			var yynn2570 int
			if yyr2570 || yy2arr2570 {
				r.EncodeArrayStart(1)
			} else {
				yynn2570 = 0
				for _, b := range yyq2570 {
					if b {
						yynn2570++
					}
				}
				r.EncodeMapStart(yynn2570)
				yynn2570 = 0
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2570[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2572 := z.EncBinary()
						_ = yym2572
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2570[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2573 := z.EncBinary()
						_ = yym2573
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2574 := z.DecBinary()
	_ = yym2574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2575 := r.ContainerType()
		if yyct2575 == codecSelferValueTypeMap1234 {
			yyl2575 := r.ReadMapStart()
			if yyl2575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2575, d)
			}
		} else if yyct2575 == codecSelferValueTypeArray1234 {
			yyl2575 := r.ReadArrayStart()
			if yyl2575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2576Slc
	var yyhl2576 bool = l >= 0
	for yyj2576 := 0; ; yyj2576++ {
		if yyhl2576 {
			if yyj2576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2576Slc = r.DecodeBytes(yys2576Slc, true, true)
		yys2576 := string(yys2576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2576 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2577 := &x.Ingress
				yym2578 := z.DecBinary()
				_ = yym2578
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2577), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2576)
		} // end switch yys2576
	} // end for yyj2576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2579 int
	var yyb2579 bool
	var yyhl2579 bool = l >= 0
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2580 := &x.Ingress
		yym2581 := z.DecBinary()
		_ = yym2581
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2580), d)
		}
	}
	for {
		yyj2579++
		if yyhl2579 {
			yyb2579 = yyj2579 > l
		} else {
			yyb2579 = r.CheckBreak()
		}
		if yyb2579 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2579-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2582 := z.EncBinary()
		_ = yym2582
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2583 := !z.EncBinary()
			yy2arr2583 := z.EncBasicHandle().StructToArray
			var yyq2583 [2]bool
			_, _, _ = yysep2583, yyq2583, yy2arr2583
			const yyr2583 bool = false
			yyq2583[0] = x.IP != ""
			yyq2583[1] = x.Hostname != ""
			var yynn2583 int
			if yyr2583 || yy2arr2583 {
				r.EncodeArrayStart(2)
			} else {
				yynn2583 = 0
				for _, b := range yyq2583 {
					if b {
						yynn2583++
					}
				}
				r.EncodeMapStart(yynn2583)
				yynn2583 = 0
			}
			if yyr2583 || yy2arr2583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2583[0] {
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2583[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2583 || yy2arr2583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2583[1] {
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2583[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2583 || yy2arr2583 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2590 := z.DecBinary()
	_ = yym2590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2591 := r.ContainerType()
		if yyct2591 == codecSelferValueTypeMap1234 {
			yyl2591 := r.ReadMapStart()
			if yyl2591 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2591, d)
			}
		} else if yyct2591 == codecSelferValueTypeArray1234 {
			yyl2591 := r.ReadArrayStart()
			if yyl2591 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2592Slc
	var yyhl2592 bool = l >= 0
	for yyj2592 := 0; ; yyj2592++ {
		if yyhl2592 {
			if yyj2592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2592Slc = r.DecodeBytes(yys2592Slc, true, true)
		yys2592 := string(yys2592Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2592 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2592)
		} // end switch yys2592
	} // end for yyj2592
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2595 int
	var yyb2595 bool
	var yyhl2595 bool = l >= 0
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2595++
		if yyhl2595 {
			yyb2595 = yyj2595 > l
		} else {
			yyb2595 = r.CheckBreak()
		}
		if yyb2595 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2595-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2598 := z.EncBinary()
		_ = yym2598
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2599 := !z.EncBinary()
			yy2arr2599 := z.EncBasicHandle().StructToArray
			var yyq2599 [9]bool
			_, _, _ = yysep2599, yyq2599, yy2arr2599
			const yyr2599 bool = false
			yyq2599[0] = x.Type != ""
			yyq2599[3] = x.ClusterIP != ""
			yyq2599[5] = len(x.ExternalIPs) != 0
			yyq2599[6] = x.LoadBalancerIP != ""
			yyq2599[7] = x.SessionAffinity != ""
			yyq2599[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2599 int
			if yyr2599 || yy2arr2599 {
				r.EncodeArrayStart(9)
			} else {
				yynn2599 = 3
				for _, b := range yyq2599 {
					if b {
						yynn2599++
					}
				}
				r.EncodeMapStart(yynn2599)
				yynn2599 = 0
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2599[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2599[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2599[3] {
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2599[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2611 := z.EncBinary()
				_ = yym2611
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2612 := z.EncBinary()
				_ = yym2612
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2599[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2614 := z.EncBinary()
						_ = yym2614
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2599[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2615 := z.EncBinary()
						_ = yym2615
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2599[6] {
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2599[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2599[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2599[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2599[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2621 := z.EncBinary()
						_ = yym2621
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2599[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2622 := z.EncBinary()
						_ = yym2622
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2599 || yy2arr2599 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2623 := z.DecBinary()
	_ = yym2623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2624 := r.ContainerType()
		if yyct2624 == codecSelferValueTypeMap1234 {
			yyl2624 := r.ReadMapStart()
			if yyl2624 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2624, d)
			}
		} else if yyct2624 == codecSelferValueTypeArray1234 {
			yyl2624 := r.ReadArrayStart()
			if yyl2624 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2624, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2625Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2625Slc
	var yyhl2625 bool = l >= 0
	for yyj2625 := 0; ; yyj2625++ {
		if yyhl2625 {
			if yyj2625 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2625Slc = r.DecodeBytes(yys2625Slc, true, true)
		yys2625 := string(yys2625Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2625 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2627 := &x.Ports
				yym2628 := z.DecBinary()
				_ = yym2628
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2627), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2629 := &x.Selector
				yym2630 := z.DecBinary()
				_ = yym2630
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2629, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2633 := &x.ExternalIPs
				yym2634 := z.DecBinary()
				_ = yym2634
				if false {
				} else {
					z.F.DecSliceStringX(yyv2633, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2637 := &x.LoadBalancerSourceRanges
				yym2638 := z.DecBinary()
				_ = yym2638
				if false {
				} else {
					z.F.DecSliceStringX(yyv2637, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2625)
		} // end switch yys2625
	} // end for yyj2625
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2639 int
	var yyb2639 bool
	var yyhl2639 bool = l >= 0
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2641 := &x.Ports
		yym2642 := z.DecBinary()
		_ = yym2642
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2641), d)
		}
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2643 := &x.Selector
		yym2644 := z.DecBinary()
		_ = yym2644
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2643, false, d)
		}
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2647 := &x.ExternalIPs
		yym2648 := z.DecBinary()
		_ = yym2648
		if false {
		} else {
			z.F.DecSliceStringX(yyv2647, false, d)
		}
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2651 := &x.LoadBalancerSourceRanges
		yym2652 := z.DecBinary()
		_ = yym2652
		if false {
		} else {
			z.F.DecSliceStringX(yyv2651, false, d)
		}
	}
	for {
		yyj2639++
		if yyhl2639 {
			yyb2639 = yyj2639 > l
		} else {
			yyb2639 = r.CheckBreak()
		}
		if yyb2639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2653 := z.EncBinary()
		_ = yym2653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2654 := !z.EncBinary()
			yy2arr2654 := z.EncBasicHandle().StructToArray
			var yyq2654 [5]bool
			_, _, _ = yysep2654, yyq2654, yy2arr2654
			const yyr2654 bool = false
			var yynn2654 int
			if yyr2654 || yy2arr2654 {
				r.EncodeArrayStart(5)
			} else {
				yynn2654 = 5
				for _, b := range yyq2654 {
					if b {
						yynn2654++
					}
				}
				r.EncodeMapStart(yynn2654)
				yynn2654 = 0
			}
			if yyr2654 || yy2arr2654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2656 := z.EncBinary()
				_ = yym2656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2657 := z.EncBinary()
				_ = yym2657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2654 || yy2arr2654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2654 || yy2arr2654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2660 := z.EncBinary()
				_ = yym2660
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2661 := z.EncBinary()
				_ = yym2661
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2654 || yy2arr2654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2663 := &x.TargetPort
				yym2664 := z.EncBinary()
				_ = yym2664
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2663) {
				} else if !yym2664 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2663)
				} else {
					z.EncFallback(yy2663)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2665 := &x.TargetPort
				yym2666 := z.EncBinary()
				_ = yym2666
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2665) {
				} else if !yym2666 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2665)
				} else {
					z.EncFallback(yy2665)
				}
			}
			if yyr2654 || yy2arr2654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2668 := z.EncBinary()
				_ = yym2668
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2669 := z.EncBinary()
				_ = yym2669
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2654 || yy2arr2654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2670 := z.DecBinary()
	_ = yym2670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2671 := r.ContainerType()
		if yyct2671 == codecSelferValueTypeMap1234 {
			yyl2671 := r.ReadMapStart()
			if yyl2671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2671, d)
			}
		} else if yyct2671 == codecSelferValueTypeArray1234 {
			yyl2671 := r.ReadArrayStart()
			if yyl2671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2672Slc
	var yyhl2672 bool = l >= 0
	for yyj2672 := 0; ; yyj2672++ {
		if yyhl2672 {
			if yyj2672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2672Slc = r.DecodeBytes(yys2672Slc, true, true)
		yys2672 := string(yys2672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2672 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2676 := &x.TargetPort
				yym2677 := z.DecBinary()
				_ = yym2677
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2676) {
				} else if !yym2677 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2676)
				} else {
					z.DecFallback(yyv2676, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2672)
		} // end switch yys2672
	} // end for yyj2672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2679 int
	var yyb2679 bool
	var yyhl2679 bool = l >= 0
	yyj2679++
	if yyhl2679 {
		yyb2679 = yyj2679 > l
	} else {
		yyb2679 = r.CheckBreak()
	}
	if yyb2679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2679++
	if yyhl2679 {
		yyb2679 = yyj2679 > l
	} else {
		yyb2679 = r.CheckBreak()
	}
	if yyb2679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2679++
	if yyhl2679 {
		yyb2679 = yyj2679 > l
	} else {
		yyb2679 = r.CheckBreak()
	}
	if yyb2679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2679++
	if yyhl2679 {
		yyb2679 = yyj2679 > l
	} else {
		yyb2679 = r.CheckBreak()
	}
	if yyb2679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2683 := &x.TargetPort
		yym2684 := z.DecBinary()
		_ = yym2684
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2683) {
		} else if !yym2684 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2683)
		} else {
			z.DecFallback(yyv2683, false)
		}
	}
	yyj2679++
	if yyhl2679 {
		yyb2679 = yyj2679 > l
	} else {
		yyb2679 = r.CheckBreak()
	}
	if yyb2679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2679++
		if yyhl2679 {
			yyb2679 = yyj2679 > l
		} else {
			yyb2679 = r.CheckBreak()
		}
		if yyb2679 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2679-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2686 := z.EncBinary()
		_ = yym2686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2687 := !z.EncBinary()
			yy2arr2687 := z.EncBasicHandle().StructToArray
			var yyq2687 [5]bool
			_, _, _ = yysep2687, yyq2687, yy2arr2687
			const yyr2687 bool = false
			yyq2687[0] = x.Kind != ""
			yyq2687[1] = x.APIVersion != ""
			yyq2687[2] = true
			yyq2687[3] = true
			yyq2687[4] = true
			var yynn2687 int
			if yyr2687 || yy2arr2687 {
				r.EncodeArrayStart(5)
			} else {
				yynn2687 = 0
				for _, b := range yyq2687 {
					if b {
						yynn2687++
					}
				}
				r.EncodeMapStart(yynn2687)
				yynn2687 = 0
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[0] {
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2687[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[1] {
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[2] {
					yy2695 := &x.ObjectMeta
					yy2695.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2696 := &x.ObjectMeta
					yy2696.CodecEncodeSelf(e)
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[3] {
					yy2698 := &x.Spec
					yy2698.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2687[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2699 := &x.Spec
					yy2699.CodecEncodeSelf(e)
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[4] {
					yy2701 := &x.Status
					yy2701.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2687[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2702 := &x.Status
					yy2702.CodecEncodeSelf(e)
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2703 := z.DecBinary()
	_ = yym2703
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2704 := r.ContainerType()
		if yyct2704 == codecSelferValueTypeMap1234 {
			yyl2704 := r.ReadMapStart()
			if yyl2704 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2704, d)
			}
		} else if yyct2704 == codecSelferValueTypeArray1234 {
			yyl2704 := r.ReadArrayStart()
			if yyl2704 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2704, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2705Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2705Slc
	var yyhl2705 bool = l >= 0
	for yyj2705 := 0; ; yyj2705++ {
		if yyhl2705 {
			if yyj2705 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2705Slc = r.DecodeBytes(yys2705Slc, true, true)
		yys2705 := string(yys2705Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2705 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2708 := &x.ObjectMeta
				yyv2708.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2709 := &x.Spec
				yyv2709.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2710 := &x.Status
				yyv2710.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2705)
		} // end switch yys2705
	} // end for yyj2705
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2711 int
	var yyb2711 bool
	var yyhl2711 bool = l >= 0
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2714 := &x.ObjectMeta
		yyv2714.CodecDecodeSelf(d)
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2715 := &x.Spec
		yyv2715.CodecDecodeSelf(d)
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2716 := &x.Status
		yyv2716.CodecDecodeSelf(d)
	}
	for {
		yyj2711++
		if yyhl2711 {
			yyb2711 = yyj2711 > l
		} else {
			yyb2711 = r.CheckBreak()
		}
		if yyb2711 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2711-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2717 := z.EncBinary()
		_ = yym2717
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2718 := !z.EncBinary()
			yy2arr2718 := z.EncBasicHandle().StructToArray
			var yyq2718 [5]bool
			_, _, _ = yysep2718, yyq2718, yy2arr2718
			const yyr2718 bool = false
			yyq2718[0] = x.Kind != ""
			yyq2718[1] = x.APIVersion != ""
			yyq2718[2] = true
			yyq2718[4] = len(x.ImagePullSecrets) != 0
			var yynn2718 int
			if yyr2718 || yy2arr2718 {
				r.EncodeArrayStart(5)
			} else {
				yynn2718 = 1
				for _, b := range yyq2718 {
					if b {
						yynn2718++
					}
				}
				r.EncodeMapStart(yynn2718)
				yynn2718 = 0
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[0] {
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2718[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[1] {
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2718[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[2] {
					yy2726 := &x.ObjectMeta
					yy2726.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2718[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2727 := &x.ObjectMeta
					yy2727.CodecEncodeSelf(e)
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2732 := z.EncBinary()
						_ = yym2732
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2718[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2733 := z.EncBinary()
						_ = yym2733
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2734 := z.DecBinary()
	_ = yym2734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2735 := r.ContainerType()
		if yyct2735 == codecSelferValueTypeMap1234 {
			yyl2735 := r.ReadMapStart()
			if yyl2735 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2735, d)
			}
		} else if yyct2735 == codecSelferValueTypeArray1234 {
			yyl2735 := r.ReadArrayStart()
			if yyl2735 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2736Slc
	var yyhl2736 bool = l >= 0
	for yyj2736 := 0; ; yyj2736++ {
		if yyhl2736 {
			if yyj2736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2736Slc = r.DecodeBytes(yys2736Slc, true, true)
		yys2736 := string(yys2736Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2736 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2739 := &x.ObjectMeta
				yyv2739.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2740 := &x.Secrets
				yym2741 := z.DecBinary()
				_ = yym2741
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2740), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2742 := &x.ImagePullSecrets
				yym2743 := z.DecBinary()
				_ = yym2743
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2742), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2736)
		} // end switch yys2736
	} // end for yyj2736
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2744 int
	var yyb2744 bool
	var yyhl2744 bool = l >= 0
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2747 := &x.ObjectMeta
		yyv2747.CodecDecodeSelf(d)
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2748 := &x.Secrets
		yym2749 := z.DecBinary()
		_ = yym2749
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2748), d)
		}
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2750 := &x.ImagePullSecrets
		yym2751 := z.DecBinary()
		_ = yym2751
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2750), d)
		}
	}
	for {
		yyj2744++
		if yyhl2744 {
			yyb2744 = yyj2744 > l
		} else {
			yyb2744 = r.CheckBreak()
		}
		if yyb2744 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2744-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2752 := z.EncBinary()
		_ = yym2752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2753 := !z.EncBinary()
			yy2arr2753 := z.EncBasicHandle().StructToArray
			var yyq2753 [4]bool
			_, _, _ = yysep2753, yyq2753, yy2arr2753
			const yyr2753 bool = false
			yyq2753[0] = x.Kind != ""
			yyq2753[1] = x.APIVersion != ""
			yyq2753[2] = true
			var yynn2753 int
			if yyr2753 || yy2arr2753 {
				r.EncodeArrayStart(4)
			} else {
				yynn2753 = 1
				for _, b := range yyq2753 {
					if b {
						yynn2753++
					}
				}
				r.EncodeMapStart(yynn2753)
				yynn2753 = 0
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[0] {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2753[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[1] {
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2753[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[2] {
					yy2761 := &x.ListMeta
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2761) {
					} else {
						z.EncFallback(yy2761)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2753[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2763 := &x.ListMeta
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2763) {
					} else {
						z.EncFallback(yy2763)
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2768 := z.DecBinary()
	_ = yym2768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2769 := r.ContainerType()
		if yyct2769 == codecSelferValueTypeMap1234 {
			yyl2769 := r.ReadMapStart()
			if yyl2769 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2769, d)
			}
		} else if yyct2769 == codecSelferValueTypeArray1234 {
			yyl2769 := r.ReadArrayStart()
			if yyl2769 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2770Slc
	var yyhl2770 bool = l >= 0
	for yyj2770 := 0; ; yyj2770++ {
		if yyhl2770 {
			if yyj2770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2770Slc = r.DecodeBytes(yys2770Slc, true, true)
		yys2770 := string(yys2770Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2770 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2773 := &x.ListMeta
				yym2774 := z.DecBinary()
				_ = yym2774
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2773) {
				} else {
					z.DecFallback(yyv2773, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2775 := &x.Items
				yym2776 := z.DecBinary()
				_ = yym2776
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2775), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2770)
		} // end switch yys2770
	} // end for yyj2770
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2777 int
	var yyb2777 bool
	var yyhl2777 bool = l >= 0
	yyj2777++
	if yyhl2777 {
		yyb2777 = yyj2777 > l
	} else {
		yyb2777 = r.CheckBreak()
	}
	if yyb2777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2777++
	if yyhl2777 {
		yyb2777 = yyj2777 > l
	} else {
		yyb2777 = r.CheckBreak()
	}
	if yyb2777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2777++
	if yyhl2777 {
		yyb2777 = yyj2777 > l
	} else {
		yyb2777 = r.CheckBreak()
	}
	if yyb2777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2780 := &x.ListMeta
		yym2781 := z.DecBinary()
		_ = yym2781
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2780) {
		} else {
			z.DecFallback(yyv2780, false)
		}
	}
	yyj2777++
	if yyhl2777 {
		yyb2777 = yyj2777 > l
	} else {
		yyb2777 = r.CheckBreak()
	}
	if yyb2777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2782 := &x.Items
		yym2783 := z.DecBinary()
		_ = yym2783
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2782), d)
		}
	}
	for {
		yyj2777++
		if yyhl2777 {
			yyb2777 = yyj2777 > l
		} else {
			yyb2777 = r.CheckBreak()
		}
		if yyb2777 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2777-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2784 := z.EncBinary()
		_ = yym2784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2785 := !z.EncBinary()
			yy2arr2785 := z.EncBasicHandle().StructToArray
			var yyq2785 [4]bool
			_, _, _ = yysep2785, yyq2785, yy2arr2785
			const yyr2785 bool = false
			yyq2785[0] = x.Kind != ""
			yyq2785[1] = x.APIVersion != ""
			yyq2785[2] = true
			var yynn2785 int
			if yyr2785 || yy2arr2785 {
				r.EncodeArrayStart(4)
			} else {
				yynn2785 = 1
				for _, b := range yyq2785 {
					if b {
						yynn2785++
					}
				}
				r.EncodeMapStart(yynn2785)
				yynn2785 = 0
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2785[0] {
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2785[1] {
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2785[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2791 := z.EncBinary()
					_ = yym2791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2785[2] {
					yy2793 := &x.ObjectMeta
					yy2793.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2785[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2794 := &x.ObjectMeta
					yy2794.CodecEncodeSelf(e)
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2798 := z.DecBinary()
	_ = yym2798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2799 := r.ContainerType()
		if yyct2799 == codecSelferValueTypeMap1234 {
			yyl2799 := r.ReadMapStart()
			if yyl2799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2799, d)
			}
		} else if yyct2799 == codecSelferValueTypeArray1234 {
			yyl2799 := r.ReadArrayStart()
			if yyl2799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2800Slc
	var yyhl2800 bool = l >= 0
	for yyj2800 := 0; ; yyj2800++ {
		if yyhl2800 {
			if yyj2800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2800Slc = r.DecodeBytes(yys2800Slc, true, true)
		yys2800 := string(yys2800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2800 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2803 := &x.ObjectMeta
				yyv2803.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2804 := &x.Subsets
				yym2805 := z.DecBinary()
				_ = yym2805
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2804), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2800)
		} // end switch yys2800
	} // end for yyj2800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2806 int
	var yyb2806 bool
	var yyhl2806 bool = l >= 0
	yyj2806++
	if yyhl2806 {
		yyb2806 = yyj2806 > l
	} else {
		yyb2806 = r.CheckBreak()
	}
	if yyb2806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2806++
	if yyhl2806 {
		yyb2806 = yyj2806 > l
	} else {
		yyb2806 = r.CheckBreak()
	}
	if yyb2806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2806++
	if yyhl2806 {
		yyb2806 = yyj2806 > l
	} else {
		yyb2806 = r.CheckBreak()
	}
	if yyb2806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2809 := &x.ObjectMeta
		yyv2809.CodecDecodeSelf(d)
	}
	yyj2806++
	if yyhl2806 {
		yyb2806 = yyj2806 > l
	} else {
		yyb2806 = r.CheckBreak()
	}
	if yyb2806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2810 := &x.Subsets
		yym2811 := z.DecBinary()
		_ = yym2811
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2810), d)
		}
	}
	for {
		yyj2806++
		if yyhl2806 {
			yyb2806 = yyj2806 > l
		} else {
			yyb2806 = r.CheckBreak()
		}
		if yyb2806 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2806-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2812 := z.EncBinary()
		_ = yym2812
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2813 := !z.EncBinary()
			yy2arr2813 := z.EncBasicHandle().StructToArray
			var yyq2813 [3]bool
			_, _, _ = yysep2813, yyq2813, yy2arr2813
			const yyr2813 bool = false
			var yynn2813 int
			if yyr2813 || yy2arr2813 {
				r.EncodeArrayStart(3)
			} else {
				yynn2813 = 3
				for _, b := range yyq2813 {
					if b {
						yynn2813++
					}
				}
				r.EncodeMapStart(yynn2813)
				yynn2813 = 0
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2815 := z.EncBinary()
					_ = yym2815
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2823 := z.DecBinary()
	_ = yym2823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2824 := r.ContainerType()
		if yyct2824 == codecSelferValueTypeMap1234 {
			yyl2824 := r.ReadMapStart()
			if yyl2824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2824, d)
			}
		} else if yyct2824 == codecSelferValueTypeArray1234 {
			yyl2824 := r.ReadArrayStart()
			if yyl2824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2825Slc
	var yyhl2825 bool = l >= 0
	for yyj2825 := 0; ; yyj2825++ {
		if yyhl2825 {
			if yyj2825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2825Slc = r.DecodeBytes(yys2825Slc, true, true)
		yys2825 := string(yys2825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2825 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2826 := &x.Addresses
				yym2827 := z.DecBinary()
				_ = yym2827
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2826), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2828 := &x.NotReadyAddresses
				yym2829 := z.DecBinary()
				_ = yym2829
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2828), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2830 := &x.Ports
				yym2831 := z.DecBinary()
				_ = yym2831
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2830), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2825)
		} // end switch yys2825
	} // end for yyj2825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2832 int
	var yyb2832 bool
	var yyhl2832 bool = l >= 0
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2833 := &x.Addresses
		yym2834 := z.DecBinary()
		_ = yym2834
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2833), d)
		}
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2835 := &x.NotReadyAddresses
		yym2836 := z.DecBinary()
		_ = yym2836
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2835), d)
		}
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2837 := &x.Ports
		yym2838 := z.DecBinary()
		_ = yym2838
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2837), d)
		}
	}
	for {
		yyj2832++
		if yyhl2832 {
			yyb2832 = yyj2832 > l
		} else {
			yyb2832 = r.CheckBreak()
		}
		if yyb2832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2839 := z.EncBinary()
		_ = yym2839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2840 := !z.EncBinary()
			yy2arr2840 := z.EncBasicHandle().StructToArray
			var yyq2840 [4]bool
			_, _, _ = yysep2840, yyq2840, yy2arr2840
			const yyr2840 bool = false
			yyq2840[1] = x.Hostname != ""
			yyq2840[2] = x.NodeName != nil
			var yynn2840 int
			if yyr2840 || yy2arr2840 {
				r.EncodeArrayStart(4)
			} else {
				yynn2840 = 2
				for _, b := range yyq2840 {
					if b {
						yynn2840++
					}
				}
				r.EncodeMapStart(yynn2840)
				yynn2840 = 0
			}
			if yyr2840 || yy2arr2840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2842 := z.EncBinary()
				_ = yym2842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2843 := z.EncBinary()
				_ = yym2843
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2840 || yy2arr2840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2840[1] {
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2840[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2840 || yy2arr2840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2840[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2848 := *x.NodeName
						yym2849 := z.EncBinary()
						_ = yym2849
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2848))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2840[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2850 := *x.NodeName
						yym2851 := z.EncBinary()
						_ = yym2851
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2850))
						}
					}
				}
			}
			if yyr2840 || yy2arr2840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2840 || yy2arr2840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2853 := z.DecBinary()
	_ = yym2853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2854 := r.ContainerType()
		if yyct2854 == codecSelferValueTypeMap1234 {
			yyl2854 := r.ReadMapStart()
			if yyl2854 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2854, d)
			}
		} else if yyct2854 == codecSelferValueTypeArray1234 {
			yyl2854 := r.ReadArrayStart()
			if yyl2854 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2854, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2855Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2855Slc
	var yyhl2855 bool = l >= 0
	for yyj2855 := 0; ; yyj2855++ {
		if yyhl2855 {
			if yyj2855 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2855Slc = r.DecodeBytes(yys2855Slc, true, true)
		yys2855 := string(yys2855Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2855 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2859 := z.DecBinary()
				_ = yym2859
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2855)
		} // end switch yys2855
	} // end for yyj2855
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2861 int
	var yyb2861 bool
	var yyhl2861 bool = l >= 0
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2865 := z.DecBinary()
		_ = yym2865
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2861++
		if yyhl2861 {
			yyb2861 = yyj2861 > l
		} else {
			yyb2861 = r.CheckBreak()
		}
		if yyb2861 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2861-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2867 := z.EncBinary()
		_ = yym2867
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2868 := !z.EncBinary()
			yy2arr2868 := z.EncBasicHandle().StructToArray
			var yyq2868 [3]bool
			_, _, _ = yysep2868, yyq2868, yy2arr2868
			const yyr2868 bool = false
			var yynn2868 int
			if yyr2868 || yy2arr2868 {
				r.EncodeArrayStart(3)
			} else {
				yynn2868 = 3
				for _, b := range yyq2868 {
					if b {
						yynn2868++
					}
				}
				r.EncodeMapStart(yynn2868)
				yynn2868 = 0
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2870 := z.EncBinary()
				_ = yym2870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2871 := z.EncBinary()
				_ = yym2871
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2873 := z.EncBinary()
				_ = yym2873
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2874 := z.EncBinary()
				_ = yym2874
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2876 := z.DecBinary()
	_ = yym2876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2877 := r.ContainerType()
		if yyct2877 == codecSelferValueTypeMap1234 {
			yyl2877 := r.ReadMapStart()
			if yyl2877 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2877, d)
			}
		} else if yyct2877 == codecSelferValueTypeArray1234 {
			yyl2877 := r.ReadArrayStart()
			if yyl2877 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2878Slc
	var yyhl2878 bool = l >= 0
	for yyj2878 := 0; ; yyj2878++ {
		if yyhl2878 {
			if yyj2878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2878Slc = r.DecodeBytes(yys2878Slc, true, true)
		yys2878 := string(yys2878Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2878 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2878)
		} // end switch yys2878
	} // end for yyj2878
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2882 int
	var yyb2882 bool
	var yyhl2882 bool = l >= 0
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2882++
		if yyhl2882 {
			yyb2882 = yyj2882 > l
		} else {
			yyb2882 = r.CheckBreak()
		}
		if yyb2882 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2882-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2886 := z.EncBinary()
		_ = yym2886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2887 := !z.EncBinary()
			yy2arr2887 := z.EncBasicHandle().StructToArray
			var yyq2887 [4]bool
			_, _, _ = yysep2887, yyq2887, yy2arr2887
			const yyr2887 bool = false
			yyq2887[0] = x.Kind != ""
			yyq2887[1] = x.APIVersion != ""
			yyq2887[2] = true
			var yynn2887 int
			if yyr2887 || yy2arr2887 {
				r.EncodeArrayStart(4)
			} else {
				yynn2887 = 1
				for _, b := range yyq2887 {
					if b {
						yynn2887++
					}
				}
				r.EncodeMapStart(yynn2887)
				yynn2887 = 0
			}
			if yyr2887 || yy2arr2887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2887[0] {
					yym2889 := z.EncBinary()
					_ = yym2889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2887[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2890 := z.EncBinary()
					_ = yym2890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2887 || yy2arr2887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2887[1] {
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2887[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2893 := z.EncBinary()
					_ = yym2893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2887 || yy2arr2887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2887[2] {
					yy2895 := &x.ListMeta
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2895) {
					} else {
						z.EncFallback(yy2895)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2887[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2897 := &x.ListMeta
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2897) {
					} else {
						z.EncFallback(yy2897)
					}
				}
			}
			if yyr2887 || yy2arr2887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2887 || yy2arr2887 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2902 := z.DecBinary()
	_ = yym2902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2903 := r.ContainerType()
		if yyct2903 == codecSelferValueTypeMap1234 {
			yyl2903 := r.ReadMapStart()
			if yyl2903 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2903, d)
			}
		} else if yyct2903 == codecSelferValueTypeArray1234 {
			yyl2903 := r.ReadArrayStart()
			if yyl2903 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2904Slc
	var yyhl2904 bool = l >= 0
	for yyj2904 := 0; ; yyj2904++ {
		if yyhl2904 {
			if yyj2904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2904Slc = r.DecodeBytes(yys2904Slc, true, true)
		yys2904 := string(yys2904Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2904 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2907 := &x.ListMeta
				yym2908 := z.DecBinary()
				_ = yym2908
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2907) {
				} else {
					z.DecFallback(yyv2907, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2909 := &x.Items
				yym2910 := z.DecBinary()
				_ = yym2910
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2909), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2904)
		} // end switch yys2904
	} // end for yyj2904
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2911 int
	var yyb2911 bool
	var yyhl2911 bool = l >= 0
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2914 := &x.ListMeta
		yym2915 := z.DecBinary()
		_ = yym2915
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2914) {
		} else {
			z.DecFallback(yyv2914, false)
		}
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2916 := &x.Items
		yym2917 := z.DecBinary()
		_ = yym2917
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2916), d)
		}
	}
	for {
		yyj2911++
		if yyhl2911 {
			yyb2911 = yyj2911 > l
		} else {
			yyb2911 = r.CheckBreak()
		}
		if yyb2911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2918 := z.EncBinary()
		_ = yym2918
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2919 := !z.EncBinary()
			yy2arr2919 := z.EncBasicHandle().StructToArray
			var yyq2919 [4]bool
			_, _, _ = yysep2919, yyq2919, yy2arr2919
			const yyr2919 bool = false
			yyq2919[0] = x.PodCIDR != ""
			yyq2919[1] = x.ExternalID != ""
			yyq2919[2] = x.ProviderID != ""
			yyq2919[3] = x.Unschedulable != false
			var yynn2919 int
			if yyr2919 || yy2arr2919 {
				r.EncodeArrayStart(4)
			} else {
				yynn2919 = 0
				for _, b := range yyq2919 {
					if b {
						yynn2919++
					}
				}
				r.EncodeMapStart(yynn2919)
				yynn2919 = 0
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2919[0] {
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2919[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2922 := z.EncBinary()
					_ = yym2922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2919[1] {
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2919[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2919[2] {
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2919[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2928 := z.EncBinary()
					_ = yym2928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2919[3] {
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2919[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2932 := z.DecBinary()
	_ = yym2932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2933 := r.ContainerType()
		if yyct2933 == codecSelferValueTypeMap1234 {
			yyl2933 := r.ReadMapStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2933, d)
			}
		} else if yyct2933 == codecSelferValueTypeArray1234 {
			yyl2933 := r.ReadArrayStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2934Slc
	var yyhl2934 bool = l >= 0
	for yyj2934 := 0; ; yyj2934++ {
		if yyhl2934 {
			if yyj2934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2934Slc = r.DecodeBytes(yys2934Slc, true, true)
		yys2934 := string(yys2934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2934 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2934)
		} // end switch yys2934
	} // end for yyj2934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2939 int
	var yyb2939 bool
	var yyhl2939 bool = l >= 0
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2939++
		if yyhl2939 {
			yyb2939 = yyj2939 > l
		} else {
			yyb2939 = r.CheckBreak()
		}
		if yyb2939 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2939-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2944 := z.EncBinary()
		_ = yym2944
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2945 := !z.EncBinary()
			yy2arr2945 := z.EncBasicHandle().StructToArray
			var yyq2945 [1]bool
			_, _, _ = yysep2945, yyq2945, yy2arr2945
			const yyr2945 bool = false
			var yynn2945 int
			if yyr2945 || yy2arr2945 {
				r.EncodeArrayStart(1)
			} else {
				yynn2945 = 1
				for _, b := range yyq2945 {
					if b {
						yynn2945++
					}
				}
				r.EncodeMapStart(yynn2945)
				yynn2945 = 0
			}
			if yyr2945 || yy2arr2945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2947 := z.EncBinary()
				_ = yym2947
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2948 := z.EncBinary()
				_ = yym2948
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2945 || yy2arr2945 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2949 := z.DecBinary()
	_ = yym2949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2950 := r.ContainerType()
		if yyct2950 == codecSelferValueTypeMap1234 {
			yyl2950 := r.ReadMapStart()
			if yyl2950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2950, d)
			}
		} else if yyct2950 == codecSelferValueTypeArray1234 {
			yyl2950 := r.ReadArrayStart()
			if yyl2950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2951Slc
	var yyhl2951 bool = l >= 0
	for yyj2951 := 0; ; yyj2951++ {
		if yyhl2951 {
			if yyj2951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2951Slc = r.DecodeBytes(yys2951Slc, true, true)
		yys2951 := string(yys2951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2951 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2951)
		} // end switch yys2951
	} // end for yyj2951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2953 int
	var yyb2953 bool
	var yyhl2953 bool = l >= 0
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2953++
		if yyhl2953 {
			yyb2953 = yyj2953 > l
		} else {
			yyb2953 = r.CheckBreak()
		}
		if yyb2953 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2953-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2955 := z.EncBinary()
		_ = yym2955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2956 := !z.EncBinary()
			yy2arr2956 := z.EncBasicHandle().StructToArray
			var yyq2956 [1]bool
			_, _, _ = yysep2956, yyq2956, yy2arr2956
			const yyr2956 bool = false
			yyq2956[0] = true
			var yynn2956 int
			if yyr2956 || yy2arr2956 {
				r.EncodeArrayStart(1)
			} else {
				yynn2956 = 0
				for _, b := range yyq2956 {
					if b {
						yynn2956++
					}
				}
				r.EncodeMapStart(yynn2956)
				yynn2956 = 0
			}
			if yyr2956 || yy2arr2956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2956[0] {
					yy2958 := &x.KubeletEndpoint
					yy2958.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2956[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2959 := &x.KubeletEndpoint
					yy2959.CodecEncodeSelf(e)
				}
			}
			if yyr2956 || yy2arr2956 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2960 := z.DecBinary()
	_ = yym2960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2961 := r.ContainerType()
		if yyct2961 == codecSelferValueTypeMap1234 {
			yyl2961 := r.ReadMapStart()
			if yyl2961 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2961, d)
			}
		} else if yyct2961 == codecSelferValueTypeArray1234 {
			yyl2961 := r.ReadArrayStart()
			if yyl2961 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2962Slc
	var yyhl2962 bool = l >= 0
	for yyj2962 := 0; ; yyj2962++ {
		if yyhl2962 {
			if yyj2962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2962Slc = r.DecodeBytes(yys2962Slc, true, true)
		yys2962 := string(yys2962Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2962 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2963 := &x.KubeletEndpoint
				yyv2963.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2962)
		} // end switch yys2962
	} // end for yyj2962
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2964 int
	var yyb2964 bool
	var yyhl2964 bool = l >= 0
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2965 := &x.KubeletEndpoint
		yyv2965.CodecDecodeSelf(d)
	}
	for {
		yyj2964++
		if yyhl2964 {
			yyb2964 = yyj2964 > l
		} else {
			yyb2964 = r.CheckBreak()
		}
		if yyb2964 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2964-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2966 := z.EncBinary()
		_ = yym2966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2967 := !z.EncBinary()
			yy2arr2967 := z.EncBasicHandle().StructToArray
			var yyq2967 [10]bool
			_, _, _ = yysep2967, yyq2967, yy2arr2967
			const yyr2967 bool = false
			var yynn2967 int
			if yyr2967 || yy2arr2967 {
				r.EncodeArrayStart(10)
			} else {
				yynn2967 = 10
				for _, b := range yyq2967 {
					if b {
						yynn2967++
					}
				}
				r.EncodeMapStart(yynn2967)
				yynn2967 = 0
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2969 := z.EncBinary()
				_ = yym2969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2970 := z.EncBinary()
				_ = yym2970
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2972 := z.EncBinary()
				_ = yym2972
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2973 := z.EncBinary()
				_ = yym2973
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2975 := z.EncBinary()
				_ = yym2975
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2976 := z.EncBinary()
				_ = yym2976
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2978 := z.EncBinary()
				_ = yym2978
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2979 := z.EncBinary()
				_ = yym2979
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2981 := z.EncBinary()
				_ = yym2981
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2982 := z.EncBinary()
				_ = yym2982
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2984 := z.EncBinary()
				_ = yym2984
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2985 := z.EncBinary()
				_ = yym2985
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2987 := z.EncBinary()
				_ = yym2987
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2988 := z.EncBinary()
				_ = yym2988
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2990 := z.EncBinary()
				_ = yym2990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2991 := z.EncBinary()
				_ = yym2991
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2993 := z.EncBinary()
				_ = yym2993
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2994 := z.EncBinary()
				_ = yym2994
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2996 := z.EncBinary()
				_ = yym2996
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2997 := z.EncBinary()
				_ = yym2997
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2967 || yy2arr2967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2998 := z.DecBinary()
	_ = yym2998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2999 := r.ContainerType()
		if yyct2999 == codecSelferValueTypeMap1234 {
			yyl2999 := r.ReadMapStart()
			if yyl2999 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2999, d)
			}
		} else if yyct2999 == codecSelferValueTypeArray1234 {
			yyl2999 := r.ReadArrayStart()
			if yyl2999 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2999, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3000Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3000Slc
	var yyhl3000 bool = l >= 0
	for yyj3000 := 0; ; yyj3000++ {
		if yyhl3000 {
			if yyj3000 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3000Slc = r.DecodeBytes(yys3000Slc, true, true)
		yys3000 := string(yys3000Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3000 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3000)
		} // end switch yys3000
	} // end for yyj3000
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3011 int
	var yyb3011 bool
	var yyhl3011 bool = l >= 0
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3011++
		if yyhl3011 {
			yyb3011 = yyj3011 > l
		} else {
			yyb3011 = r.CheckBreak()
		}
		if yyb3011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3022 := z.EncBinary()
		_ = yym3022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3023 := !z.EncBinary()
			yy2arr3023 := z.EncBasicHandle().StructToArray
			var yyq3023 [10]bool
			_, _, _ = yysep3023, yyq3023, yy2arr3023
			const yyr3023 bool = false
			yyq3023[0] = len(x.Capacity) != 0
			yyq3023[1] = len(x.Allocatable) != 0
			yyq3023[2] = x.Phase != ""
			yyq3023[3] = len(x.Conditions) != 0
			yyq3023[4] = len(x.Addresses) != 0
			yyq3023[5] = true
			yyq3023[6] = true
			yyq3023[7] = len(x.Images) != 0
			yyq3023[8] = len(x.VolumesInUse) != 0
			yyq3023[9] = len(x.VolumesAttached) != 0
			var yynn3023 int
			if yyr3023 || yy2arr3023 {
				r.EncodeArrayStart(10)
			} else {
				yynn3023 = 0
				for _, b := range yyq3023 {
					if b {
						yynn3023++
					}
				}
				r.EncodeMapStart(yynn3023)
				yynn3023 = 0
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3023[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3028 := z.EncBinary()
						_ = yym3028
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3029 := z.EncBinary()
						_ = yym3029
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3031 := z.EncBinary()
						_ = yym3031
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3032 := z.EncBinary()
						_ = yym3032
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[5] {
					yy3034 := &x.DaemonEndpoints
					yy3034.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3035 := &x.DaemonEndpoints
					yy3035.CodecEncodeSelf(e)
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[6] {
					yy3037 := &x.NodeInfo
					yy3037.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3038 := &x.NodeInfo
					yy3038.CodecEncodeSelf(e)
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3040 := z.EncBinary()
						_ = yym3040
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3041 := z.EncBinary()
						_ = yym3041
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3043 := z.EncBinary()
						_ = yym3043
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3044 := z.EncBinary()
						_ = yym3044
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3023[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3046 := z.EncBinary()
						_ = yym3046
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3023[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3047 := z.EncBinary()
						_ = yym3047
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3023 || yy2arr3023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3048 := z.DecBinary()
	_ = yym3048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3049 := r.ContainerType()
		if yyct3049 == codecSelferValueTypeMap1234 {
			yyl3049 := r.ReadMapStart()
			if yyl3049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3049, d)
			}
		} else if yyct3049 == codecSelferValueTypeArray1234 {
			yyl3049 := r.ReadArrayStart()
			if yyl3049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3050Slc
	var yyhl3050 bool = l >= 0
	for yyj3050 := 0; ; yyj3050++ {
		if yyhl3050 {
			if yyj3050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3050Slc = r.DecodeBytes(yys3050Slc, true, true)
		yys3050 := string(yys3050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3050 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3051 := &x.Capacity
				yyv3051.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3052 := &x.Allocatable
				yyv3052.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3054 := &x.Conditions
				yym3055 := z.DecBinary()
				_ = yym3055
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3054), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3056 := &x.Addresses
				yym3057 := z.DecBinary()
				_ = yym3057
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3056), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3058 := &x.DaemonEndpoints
				yyv3058.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3059 := &x.NodeInfo
				yyv3059.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3060 := &x.Images
				yym3061 := z.DecBinary()
				_ = yym3061
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3060), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3062 := &x.VolumesInUse
				yym3063 := z.DecBinary()
				_ = yym3063
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3062), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3064 := &x.VolumesAttached
				yym3065 := z.DecBinary()
				_ = yym3065
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3064), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3050)
		} // end switch yys3050
	} // end for yyj3050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3066 int
	var yyb3066 bool
	var yyhl3066 bool = l >= 0
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3067 := &x.Capacity
		yyv3067.CodecDecodeSelf(d)
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3068 := &x.Allocatable
		yyv3068.CodecDecodeSelf(d)
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3070 := &x.Conditions
		yym3071 := z.DecBinary()
		_ = yym3071
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3070), d)
		}
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3072 := &x.Addresses
		yym3073 := z.DecBinary()
		_ = yym3073
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3072), d)
		}
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3074 := &x.DaemonEndpoints
		yyv3074.CodecDecodeSelf(d)
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3075 := &x.NodeInfo
		yyv3075.CodecDecodeSelf(d)
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3076 := &x.Images
		yym3077 := z.DecBinary()
		_ = yym3077
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3076), d)
		}
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3078 := &x.VolumesInUse
		yym3079 := z.DecBinary()
		_ = yym3079
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3078), d)
		}
	}
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3080 := &x.VolumesAttached
		yym3081 := z.DecBinary()
		_ = yym3081
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3080), d)
		}
	}
	for {
		yyj3066++
		if yyhl3066 {
			yyb3066 = yyj3066 > l
		} else {
			yyb3066 = r.CheckBreak()
		}
		if yyb3066 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3066-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3082 := z.EncBinary()
	_ = yym3082
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3083 := z.DecBinary()
	_ = yym3083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3084 := z.EncBinary()
		_ = yym3084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3085 := !z.EncBinary()
			yy2arr3085 := z.EncBasicHandle().StructToArray
			var yyq3085 [2]bool
			_, _, _ = yysep3085, yyq3085, yy2arr3085
			const yyr3085 bool = false
			var yynn3085 int
			if yyr3085 || yy2arr3085 {
				r.EncodeArrayStart(2)
			} else {
				yynn3085 = 2
				for _, b := range yyq3085 {
					if b {
						yynn3085++
					}
				}
				r.EncodeMapStart(yynn3085)
				yynn3085 = 0
			}
			if yyr3085 || yy2arr3085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3085 || yy2arr3085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3088 := z.EncBinary()
				_ = yym3088
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3089 := z.EncBinary()
				_ = yym3089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3085 || yy2arr3085 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3090 := z.DecBinary()
	_ = yym3090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3091 := r.ContainerType()
		if yyct3091 == codecSelferValueTypeMap1234 {
			yyl3091 := r.ReadMapStart()
			if yyl3091 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3091, d)
			}
		} else if yyct3091 == codecSelferValueTypeArray1234 {
			yyl3091 := r.ReadArrayStart()
			if yyl3091 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3092Slc
	var yyhl3092 bool = l >= 0
	for yyj3092 := 0; ; yyj3092++ {
		if yyhl3092 {
			if yyj3092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3092Slc = r.DecodeBytes(yys3092Slc, true, true)
		yys3092 := string(yys3092Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3092 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3092)
		} // end switch yys3092
	} // end for yyj3092
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3095 int
	var yyb3095 bool
	var yyhl3095 bool = l >= 0
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3095++
		if yyhl3095 {
			yyb3095 = yyj3095 > l
		} else {
			yyb3095 = r.CheckBreak()
		}
		if yyb3095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3098 := z.EncBinary()
		_ = yym3098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3099 := !z.EncBinary()
			yy2arr3099 := z.EncBasicHandle().StructToArray
			var yyq3099 [1]bool
			_, _, _ = yysep3099, yyq3099, yy2arr3099
			const yyr3099 bool = false
			yyq3099[0] = len(x.PreferAvoidPods) != 0
			var yynn3099 int
			if yyr3099 || yy2arr3099 {
				r.EncodeArrayStart(1)
			} else {
				yynn3099 = 0
				for _, b := range yyq3099 {
					if b {
						yynn3099++
					}
				}
				r.EncodeMapStart(yynn3099)
				yynn3099 = 0
			}
			if yyr3099 || yy2arr3099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3099[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3101 := z.EncBinary()
						_ = yym3101
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3099[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3102 := z.EncBinary()
						_ = yym3102
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3099 || yy2arr3099 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3103 := z.DecBinary()
	_ = yym3103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3104 := r.ContainerType()
		if yyct3104 == codecSelferValueTypeMap1234 {
			yyl3104 := r.ReadMapStart()
			if yyl3104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3104, d)
			}
		} else if yyct3104 == codecSelferValueTypeArray1234 {
			yyl3104 := r.ReadArrayStart()
			if yyl3104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3105Slc
	var yyhl3105 bool = l >= 0
	for yyj3105 := 0; ; yyj3105++ {
		if yyhl3105 {
			if yyj3105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3105Slc = r.DecodeBytes(yys3105Slc, true, true)
		yys3105 := string(yys3105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3105 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3106 := &x.PreferAvoidPods
				yym3107 := z.DecBinary()
				_ = yym3107
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3106), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3105)
		} // end switch yys3105
	} // end for yyj3105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3108 int
	var yyb3108 bool
	var yyhl3108 bool = l >= 0
	yyj3108++
	if yyhl3108 {
		yyb3108 = yyj3108 > l
	} else {
		yyb3108 = r.CheckBreak()
	}
	if yyb3108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3109 := &x.PreferAvoidPods
		yym3110 := z.DecBinary()
		_ = yym3110
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3109), d)
		}
	}
	for {
		yyj3108++
		if yyhl3108 {
			yyb3108 = yyj3108 > l
		} else {
			yyb3108 = r.CheckBreak()
		}
		if yyb3108 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3108-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3111 := z.EncBinary()
		_ = yym3111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3112 := !z.EncBinary()
			yy2arr3112 := z.EncBasicHandle().StructToArray
			var yyq3112 [4]bool
			_, _, _ = yysep3112, yyq3112, yy2arr3112
			const yyr3112 bool = false
			yyq3112[1] = true
			yyq3112[2] = x.Reason != ""
			yyq3112[3] = x.Message != ""
			var yynn3112 int
			if yyr3112 || yy2arr3112 {
				r.EncodeArrayStart(4)
			} else {
				yynn3112 = 1
				for _, b := range yyq3112 {
					if b {
						yynn3112++
					}
				}
				r.EncodeMapStart(yynn3112)
				yynn3112 = 0
			}
			if yyr3112 || yy2arr3112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3114 := &x.PodSignature
				yy3114.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3115 := &x.PodSignature
				yy3115.CodecEncodeSelf(e)
			}
			if yyr3112 || yy2arr3112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3112[1] {
					yy3117 := &x.EvictionTime
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3117) {
					} else if yym3118 {
						z.EncBinaryMarshal(yy3117)
					} else if !yym3118 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3117)
					} else {
						z.EncFallback(yy3117)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3112[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3119 := &x.EvictionTime
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3119) {
					} else if yym3120 {
						z.EncBinaryMarshal(yy3119)
					} else if !yym3120 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3119)
					} else {
						z.EncFallback(yy3119)
					}
				}
			}
			if yyr3112 || yy2arr3112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3112[2] {
					yym3122 := z.EncBinary()
					_ = yym3122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3112[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3112 || yy2arr3112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3112[3] {
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3112[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3112 || yy2arr3112 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3127 := z.DecBinary()
	_ = yym3127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3128 := r.ContainerType()
		if yyct3128 == codecSelferValueTypeMap1234 {
			yyl3128 := r.ReadMapStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3128, d)
			}
		} else if yyct3128 == codecSelferValueTypeArray1234 {
			yyl3128 := r.ReadArrayStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3129Slc
	var yyhl3129 bool = l >= 0
	for yyj3129 := 0; ; yyj3129++ {
		if yyhl3129 {
			if yyj3129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3129Slc = r.DecodeBytes(yys3129Slc, true, true)
		yys3129 := string(yys3129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3129 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3130 := &x.PodSignature
				yyv3130.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3131 := &x.EvictionTime
				yym3132 := z.DecBinary()
				_ = yym3132
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3131) {
				} else if yym3132 {
					z.DecBinaryUnmarshal(yyv3131)
				} else if !yym3132 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3131)
				} else {
					z.DecFallback(yyv3131, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3129)
		} // end switch yys3129
	} // end for yyj3129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3135 int
	var yyb3135 bool
	var yyhl3135 bool = l >= 0
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3136 := &x.PodSignature
		yyv3136.CodecDecodeSelf(d)
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3137 := &x.EvictionTime
		yym3138 := z.DecBinary()
		_ = yym3138
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3137) {
		} else if yym3138 {
			z.DecBinaryUnmarshal(yyv3137)
		} else if !yym3138 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3137)
		} else {
			z.DecFallback(yyv3137, false)
		}
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3135++
		if yyhl3135 {
			yyb3135 = yyj3135 > l
		} else {
			yyb3135 = r.CheckBreak()
		}
		if yyb3135 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3135-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3141 := z.EncBinary()
		_ = yym3141
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3142 := !z.EncBinary()
			yy2arr3142 := z.EncBasicHandle().StructToArray
			var yyq3142 [1]bool
			_, _, _ = yysep3142, yyq3142, yy2arr3142
			const yyr3142 bool = false
			yyq3142[0] = x.PodController != nil
			var yynn3142 int
			if yyr3142 || yy2arr3142 {
				r.EncodeArrayStart(1)
			} else {
				yynn3142 = 0
				for _, b := range yyq3142 {
					if b {
						yynn3142++
					}
				}
				r.EncodeMapStart(yynn3142)
				yynn3142 = 0
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3142[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3142[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3144 := z.DecBinary()
	_ = yym3144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3145 := r.ContainerType()
		if yyct3145 == codecSelferValueTypeMap1234 {
			yyl3145 := r.ReadMapStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3145, d)
			}
		} else if yyct3145 == codecSelferValueTypeArray1234 {
			yyl3145 := r.ReadArrayStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3146Slc
	var yyhl3146 bool = l >= 0
	for yyj3146 := 0; ; yyj3146++ {
		if yyhl3146 {
			if yyj3146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3146Slc = r.DecodeBytes(yys3146Slc, true, true)
		yys3146 := string(yys3146Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3146 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3146)
		} // end switch yys3146
	} // end for yyj3146
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3148 int
	var yyb3148 bool
	var yyhl3148 bool = l >= 0
	yyj3148++
	if yyhl3148 {
		yyb3148 = yyj3148 > l
	} else {
		yyb3148 = r.CheckBreak()
	}
	if yyb3148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3148++
		if yyhl3148 {
			yyb3148 = yyj3148 > l
		} else {
			yyb3148 = r.CheckBreak()
		}
		if yyb3148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3150 := z.EncBinary()
		_ = yym3150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3151 := !z.EncBinary()
			yy2arr3151 := z.EncBasicHandle().StructToArray
			var yyq3151 [2]bool
			_, _, _ = yysep3151, yyq3151, yy2arr3151
			const yyr3151 bool = false
			yyq3151[1] = x.SizeBytes != 0
			var yynn3151 int
			if yyr3151 || yy2arr3151 {
				r.EncodeArrayStart(2)
			} else {
				yynn3151 = 1
				for _, b := range yyq3151 {
					if b {
						yynn3151++
					}
				}
				r.EncodeMapStart(yynn3151)
				yynn3151 = 0
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[1] {
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3151[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3158 := z.DecBinary()
	_ = yym3158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3159 := r.ContainerType()
		if yyct3159 == codecSelferValueTypeMap1234 {
			yyl3159 := r.ReadMapStart()
			if yyl3159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3159, d)
			}
		} else if yyct3159 == codecSelferValueTypeArray1234 {
			yyl3159 := r.ReadArrayStart()
			if yyl3159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3160Slc
	var yyhl3160 bool = l >= 0
	for yyj3160 := 0; ; yyj3160++ {
		if yyhl3160 {
			if yyj3160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3160Slc = r.DecodeBytes(yys3160Slc, true, true)
		yys3160 := string(yys3160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3160 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3161 := &x.Names
				yym3162 := z.DecBinary()
				_ = yym3162
				if false {
				} else {
					z.F.DecSliceStringX(yyv3161, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3160)
		} // end switch yys3160
	} // end for yyj3160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3164 int
	var yyb3164 bool
	var yyhl3164 bool = l >= 0
	yyj3164++
	if yyhl3164 {
		yyb3164 = yyj3164 > l
	} else {
		yyb3164 = r.CheckBreak()
	}
	if yyb3164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3165 := &x.Names
		yym3166 := z.DecBinary()
		_ = yym3166
		if false {
		} else {
			z.F.DecSliceStringX(yyv3165, false, d)
		}
	}
	yyj3164++
	if yyhl3164 {
		yyb3164 = yyj3164 > l
	} else {
		yyb3164 = r.CheckBreak()
	}
	if yyb3164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3164++
		if yyhl3164 {
			yyb3164 = yyj3164 > l
		} else {
			yyb3164 = r.CheckBreak()
		}
		if yyb3164 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3164-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3168 := z.EncBinary()
	_ = yym3168
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3169 := z.DecBinary()
	_ = yym3169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3170 := z.EncBinary()
	_ = yym3170
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3171 := z.DecBinary()
	_ = yym3171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3172 := z.EncBinary()
		_ = yym3172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3173 := !z.EncBinary()
			yy2arr3173 := z.EncBasicHandle().StructToArray
			var yyq3173 [6]bool
			_, _, _ = yysep3173, yyq3173, yy2arr3173
			const yyr3173 bool = false
			yyq3173[2] = true
			yyq3173[3] = true
			yyq3173[4] = x.Reason != ""
			yyq3173[5] = x.Message != ""
			var yynn3173 int
			if yyr3173 || yy2arr3173 {
				r.EncodeArrayStart(6)
			} else {
				yynn3173 = 2
				for _, b := range yyq3173 {
					if b {
						yynn3173++
					}
				}
				r.EncodeMapStart(yynn3173)
				yynn3173 = 0
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[2] {
					yy3177 := &x.LastHeartbeatTime
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3177) {
					} else if yym3178 {
						z.EncBinaryMarshal(yy3177)
					} else if !yym3178 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3177)
					} else {
						z.EncFallback(yy3177)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3179 := &x.LastHeartbeatTime
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3179) {
					} else if yym3180 {
						z.EncBinaryMarshal(yy3179)
					} else if !yym3180 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3179)
					} else {
						z.EncFallback(yy3179)
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[3] {
					yy3182 := &x.LastTransitionTime
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3182) {
					} else if yym3183 {
						z.EncBinaryMarshal(yy3182)
					} else if !yym3183 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3182)
					} else {
						z.EncFallback(yy3182)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3184 := &x.LastTransitionTime
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3184) {
					} else if yym3185 {
						z.EncBinaryMarshal(yy3184)
					} else if !yym3185 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3184)
					} else {
						z.EncFallback(yy3184)
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[4] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[5] {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3192 := z.DecBinary()
	_ = yym3192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3193 := r.ContainerType()
		if yyct3193 == codecSelferValueTypeMap1234 {
			yyl3193 := r.ReadMapStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3193, d)
			}
		} else if yyct3193 == codecSelferValueTypeArray1234 {
			yyl3193 := r.ReadArrayStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3194Slc
	var yyhl3194 bool = l >= 0
	for yyj3194 := 0; ; yyj3194++ {
		if yyhl3194 {
			if yyj3194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3194Slc = r.DecodeBytes(yys3194Slc, true, true)
		yys3194 := string(yys3194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3194 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3197 := &x.LastHeartbeatTime
				yym3198 := z.DecBinary()
				_ = yym3198
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3197) {
				} else if yym3198 {
					z.DecBinaryUnmarshal(yyv3197)
				} else if !yym3198 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3197)
				} else {
					z.DecFallback(yyv3197, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3199 := &x.LastTransitionTime
				yym3200 := z.DecBinary()
				_ = yym3200
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3199) {
				} else if yym3200 {
					z.DecBinaryUnmarshal(yyv3199)
				} else if !yym3200 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3199)
				} else {
					z.DecFallback(yyv3199, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3194)
		} // end switch yys3194
	} // end for yyj3194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3203 int
	var yyb3203 bool
	var yyhl3203 bool = l >= 0
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3206 := &x.LastHeartbeatTime
		yym3207 := z.DecBinary()
		_ = yym3207
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3206) {
		} else if yym3207 {
			z.DecBinaryUnmarshal(yyv3206)
		} else if !yym3207 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3206)
		} else {
			z.DecFallback(yyv3206, false)
		}
	}
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3208 := &x.LastTransitionTime
		yym3209 := z.DecBinary()
		_ = yym3209
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3208) {
		} else if yym3209 {
			z.DecBinaryUnmarshal(yyv3208)
		} else if !yym3209 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3208)
		} else {
			z.DecFallback(yyv3208, false)
		}
	}
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3203++
	if yyhl3203 {
		yyb3203 = yyj3203 > l
	} else {
		yyb3203 = r.CheckBreak()
	}
	if yyb3203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3203++
		if yyhl3203 {
			yyb3203 = yyj3203 > l
		} else {
			yyb3203 = r.CheckBreak()
		}
		if yyb3203 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3203-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3212 := z.EncBinary()
	_ = yym3212
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3213 := z.DecBinary()
	_ = yym3213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3214 := z.EncBinary()
		_ = yym3214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3215 := !z.EncBinary()
			yy2arr3215 := z.EncBasicHandle().StructToArray
			var yyq3215 [2]bool
			_, _, _ = yysep3215, yyq3215, yy2arr3215
			const yyr3215 bool = false
			var yynn3215 int
			if yyr3215 || yy2arr3215 {
				r.EncodeArrayStart(2)
			} else {
				yynn3215 = 2
				for _, b := range yyq3215 {
					if b {
						yynn3215++
					}
				}
				r.EncodeMapStart(yynn3215)
				yynn3215 = 0
			}
			if yyr3215 || yy2arr3215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3215 || yy2arr3215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3218 := z.EncBinary()
				_ = yym3218
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3219 := z.EncBinary()
				_ = yym3219
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3215 || yy2arr3215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3220 := z.DecBinary()
	_ = yym3220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3221 := r.ContainerType()
		if yyct3221 == codecSelferValueTypeMap1234 {
			yyl3221 := r.ReadMapStart()
			if yyl3221 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3221, d)
			}
		} else if yyct3221 == codecSelferValueTypeArray1234 {
			yyl3221 := r.ReadArrayStart()
			if yyl3221 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3221, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3222Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3222Slc
	var yyhl3222 bool = l >= 0
	for yyj3222 := 0; ; yyj3222++ {
		if yyhl3222 {
			if yyj3222 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3222Slc = r.DecodeBytes(yys3222Slc, true, true)
		yys3222 := string(yys3222Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3222 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3222)
		} // end switch yys3222
	} // end for yyj3222
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3225 int
	var yyb3225 bool
	var yyhl3225 bool = l >= 0
	yyj3225++
	if yyhl3225 {
		yyb3225 = yyj3225 > l
	} else {
		yyb3225 = r.CheckBreak()
	}
	if yyb3225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3225++
	if yyhl3225 {
		yyb3225 = yyj3225 > l
	} else {
		yyb3225 = r.CheckBreak()
	}
	if yyb3225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3225++
		if yyhl3225 {
			yyb3225 = yyj3225 > l
		} else {
			yyb3225 = r.CheckBreak()
		}
		if yyb3225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3228 := z.EncBinary()
		_ = yym3228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3229 := !z.EncBinary()
			yy2arr3229 := z.EncBasicHandle().StructToArray
			var yyq3229 [1]bool
			_, _, _ = yysep3229, yyq3229, yy2arr3229
			const yyr3229 bool = false
			yyq3229[0] = len(x.Capacity) != 0
			var yynn3229 int
			if yyr3229 || yy2arr3229 {
				r.EncodeArrayStart(1)
			} else {
				yynn3229 = 0
				for _, b := range yyq3229 {
					if b {
						yynn3229++
					}
				}
				r.EncodeMapStart(yynn3229)
				yynn3229 = 0
			}
			if yyr3229 || yy2arr3229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3229[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3229[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3229 || yy2arr3229 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3231 := z.DecBinary()
	_ = yym3231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3232 := r.ContainerType()
		if yyct3232 == codecSelferValueTypeMap1234 {
			yyl3232 := r.ReadMapStart()
			if yyl3232 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3232, d)
			}
		} else if yyct3232 == codecSelferValueTypeArray1234 {
			yyl3232 := r.ReadArrayStart()
			if yyl3232 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3233Slc
	var yyhl3233 bool = l >= 0
	for yyj3233 := 0; ; yyj3233++ {
		if yyhl3233 {
			if yyj3233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3233Slc = r.DecodeBytes(yys3233Slc, true, true)
		yys3233 := string(yys3233Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3233 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3234 := &x.Capacity
				yyv3234.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3233)
		} // end switch yys3233
	} // end for yyj3233
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3235 int
	var yyb3235 bool
	var yyhl3235 bool = l >= 0
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3236 := &x.Capacity
		yyv3236.CodecDecodeSelf(d)
	}
	for {
		yyj3235++
		if yyhl3235 {
			yyb3235 = yyj3235 > l
		} else {
			yyb3235 = r.CheckBreak()
		}
		if yyb3235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3237 := z.EncBinary()
	_ = yym3237
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3238 := z.DecBinary()
	_ = yym3238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3239 := z.EncBinary()
		_ = yym3239
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3240 := z.DecBinary()
	_ = yym3240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3241 := z.EncBinary()
		_ = yym3241
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3242 := !z.EncBinary()
			yy2arr3242 := z.EncBasicHandle().StructToArray
			var yyq3242 [5]bool
			_, _, _ = yysep3242, yyq3242, yy2arr3242
			const yyr3242 bool = false
			yyq3242[0] = x.Kind != ""
			yyq3242[1] = x.APIVersion != ""
			yyq3242[2] = true
			yyq3242[3] = true
			yyq3242[4] = true
			var yynn3242 int
			if yyr3242 || yy2arr3242 {
				r.EncodeArrayStart(5)
			} else {
				yynn3242 = 0
				for _, b := range yyq3242 {
					if b {
						yynn3242++
					}
				}
				r.EncodeMapStart(yynn3242)
				yynn3242 = 0
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3242[0] {
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3242[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3245 := z.EncBinary()
					_ = yym3245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3242[1] {
					yym3247 := z.EncBinary()
					_ = yym3247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3242[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3242[2] {
					yy3250 := &x.ObjectMeta
					yy3250.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3242[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3251 := &x.ObjectMeta
					yy3251.CodecEncodeSelf(e)
				}
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3242[3] {
					yy3253 := &x.Spec
					yy3253.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3242[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3254 := &x.Spec
					yy3254.CodecEncodeSelf(e)
				}
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3242[4] {
					yy3256 := &x.Status
					yy3256.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3242[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3257 := &x.Status
					yy3257.CodecEncodeSelf(e)
				}
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3258 := z.DecBinary()
	_ = yym3258
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3259 := r.ContainerType()
		if yyct3259 == codecSelferValueTypeMap1234 {
			yyl3259 := r.ReadMapStart()
			if yyl3259 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3259, d)
			}
		} else if yyct3259 == codecSelferValueTypeArray1234 {
			yyl3259 := r.ReadArrayStart()
			if yyl3259 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3259, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3260Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3260Slc
	var yyhl3260 bool = l >= 0
	for yyj3260 := 0; ; yyj3260++ {
		if yyhl3260 {
			if yyj3260 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3260Slc = r.DecodeBytes(yys3260Slc, true, true)
		yys3260 := string(yys3260Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3260 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3263 := &x.ObjectMeta
				yyv3263.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3264 := &x.Spec
				yyv3264.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3265 := &x.Status
				yyv3265.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3260)
		} // end switch yys3260
	} // end for yyj3260
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3266 int
	var yyb3266 bool
	var yyhl3266 bool = l >= 0
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3269 := &x.ObjectMeta
		yyv3269.CodecDecodeSelf(d)
	}
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3270 := &x.Spec
		yyv3270.CodecDecodeSelf(d)
	}
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3271 := &x.Status
		yyv3271.CodecDecodeSelf(d)
	}
	for {
		yyj3266++
		if yyhl3266 {
			yyb3266 = yyj3266 > l
		} else {
			yyb3266 = r.CheckBreak()
		}
		if yyb3266 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3266-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3272 := z.EncBinary()
		_ = yym3272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3273 := !z.EncBinary()
			yy2arr3273 := z.EncBasicHandle().StructToArray
			var yyq3273 [4]bool
			_, _, _ = yysep3273, yyq3273, yy2arr3273
			const yyr3273 bool = false
			yyq3273[0] = x.Kind != ""
			yyq3273[1] = x.APIVersion != ""
			yyq3273[2] = true
			var yynn3273 int
			if yyr3273 || yy2arr3273 {
				r.EncodeArrayStart(4)
			} else {
				yynn3273 = 1
				for _, b := range yyq3273 {
					if b {
						yynn3273++
					}
				}
				r.EncodeMapStart(yynn3273)
				yynn3273 = 0
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[0] {
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3273[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[1] {
					yym3278 := z.EncBinary()
					_ = yym3278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3273[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[2] {
					yy3281 := &x.ListMeta
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3281) {
					} else {
						z.EncFallback(yy3281)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3273[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3283 := &x.ListMeta
					yym3284 := z.EncBinary()
					_ = yym3284
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3283) {
					} else {
						z.EncFallback(yy3283)
					}
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3288 := z.DecBinary()
	_ = yym3288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3289 := r.ContainerType()
		if yyct3289 == codecSelferValueTypeMap1234 {
			yyl3289 := r.ReadMapStart()
			if yyl3289 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3289, d)
			}
		} else if yyct3289 == codecSelferValueTypeArray1234 {
			yyl3289 := r.ReadArrayStart()
			if yyl3289 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3290Slc
	var yyhl3290 bool = l >= 0
	for yyj3290 := 0; ; yyj3290++ {
		if yyhl3290 {
			if yyj3290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3290Slc = r.DecodeBytes(yys3290Slc, true, true)
		yys3290 := string(yys3290Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3290 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3293 := &x.ListMeta
				yym3294 := z.DecBinary()
				_ = yym3294
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3293) {
				} else {
					z.DecFallback(yyv3293, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3295 := &x.Items
				yym3296 := z.DecBinary()
				_ = yym3296
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3295), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3290)
		} // end switch yys3290
	} // end for yyj3290
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3297 int
	var yyb3297 bool
	var yyhl3297 bool = l >= 0
	yyj3297++
	if yyhl3297 {
		yyb3297 = yyj3297 > l
	} else {
		yyb3297 = r.CheckBreak()
	}
	if yyb3297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3297++
	if yyhl3297 {
		yyb3297 = yyj3297 > l
	} else {
		yyb3297 = r.CheckBreak()
	}
	if yyb3297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3297++
	if yyhl3297 {
		yyb3297 = yyj3297 > l
	} else {
		yyb3297 = r.CheckBreak()
	}
	if yyb3297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3300 := &x.ListMeta
		yym3301 := z.DecBinary()
		_ = yym3301
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3300) {
		} else {
			z.DecFallback(yyv3300, false)
		}
	}
	yyj3297++
	if yyhl3297 {
		yyb3297 = yyj3297 > l
	} else {
		yyb3297 = r.CheckBreak()
	}
	if yyb3297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3302 := &x.Items
		yym3303 := z.DecBinary()
		_ = yym3303
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3302), d)
		}
	}
	for {
		yyj3297++
		if yyhl3297 {
			yyb3297 = yyj3297 > l
		} else {
			yyb3297 = r.CheckBreak()
		}
		if yyb3297 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3297-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3304 := z.EncBinary()
		_ = yym3304
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3305 := !z.EncBinary()
			yy2arr3305 := z.EncBasicHandle().StructToArray
			var yyq3305 [1]bool
			_, _, _ = yysep3305, yyq3305, yy2arr3305
			const yyr3305 bool = false
			var yynn3305 int
			if yyr3305 || yy2arr3305 {
				r.EncodeArrayStart(1)
			} else {
				yynn3305 = 1
				for _, b := range yyq3305 {
					if b {
						yynn3305++
					}
				}
				r.EncodeMapStart(yynn3305)
				yynn3305 = 0
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3309 := z.DecBinary()
	_ = yym3309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3310 := r.ContainerType()
		if yyct3310 == codecSelferValueTypeMap1234 {
			yyl3310 := r.ReadMapStart()
			if yyl3310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3310, d)
			}
		} else if yyct3310 == codecSelferValueTypeArray1234 {
			yyl3310 := r.ReadArrayStart()
			if yyl3310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3311Slc
	var yyhl3311 bool = l >= 0
	for yyj3311 := 0; ; yyj3311++ {
		if yyhl3311 {
			if yyj3311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3311Slc = r.DecodeBytes(yys3311Slc, true, true)
		yys3311 := string(yys3311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3311 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3312 := &x.Finalizers
				yym3313 := z.DecBinary()
				_ = yym3313
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3312), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3311)
		} // end switch yys3311
	} // end for yyj3311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3314 int
	var yyb3314 bool
	var yyhl3314 bool = l >= 0
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3315 := &x.Finalizers
		yym3316 := z.DecBinary()
		_ = yym3316
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3315), d)
		}
	}
	for {
		yyj3314++
		if yyhl3314 {
			yyb3314 = yyj3314 > l
		} else {
			yyb3314 = r.CheckBreak()
		}
		if yyb3314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3317 := z.EncBinary()
	_ = yym3317
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3318 := z.DecBinary()
	_ = yym3318
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3319 := z.EncBinary()
		_ = yym3319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3320 := !z.EncBinary()
			yy2arr3320 := z.EncBasicHandle().StructToArray
			var yyq3320 [1]bool
			_, _, _ = yysep3320, yyq3320, yy2arr3320
			const yyr3320 bool = false
			yyq3320[0] = x.Phase != ""
			var yynn3320 int
			if yyr3320 || yy2arr3320 {
				r.EncodeArrayStart(1)
			} else {
				yynn3320 = 0
				for _, b := range yyq3320 {
					if b {
						yynn3320++
					}
				}
				r.EncodeMapStart(yynn3320)
				yynn3320 = 0
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3322 := z.DecBinary()
	_ = yym3322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3323 := r.ContainerType()
		if yyct3323 == codecSelferValueTypeMap1234 {
			yyl3323 := r.ReadMapStart()
			if yyl3323 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3323, d)
			}
		} else if yyct3323 == codecSelferValueTypeArray1234 {
			yyl3323 := r.ReadArrayStart()
			if yyl3323 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3323, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3324Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3324Slc
	var yyhl3324 bool = l >= 0
	for yyj3324 := 0; ; yyj3324++ {
		if yyhl3324 {
			if yyj3324 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3324Slc = r.DecodeBytes(yys3324Slc, true, true)
		yys3324 := string(yys3324Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3324 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3324)
		} // end switch yys3324
	} // end for yyj3324
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3326 int
	var yyb3326 bool
	var yyhl3326 bool = l >= 0
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3326++
		if yyhl3326 {
			yyb3326 = yyj3326 > l
		} else {
			yyb3326 = r.CheckBreak()
		}
		if yyb3326 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3326-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3328 := z.EncBinary()
	_ = yym3328
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3329 := z.DecBinary()
	_ = yym3329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3330 := z.EncBinary()
		_ = yym3330
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3331 := !z.EncBinary()
			yy2arr3331 := z.EncBasicHandle().StructToArray
			var yyq3331 [5]bool
			_, _, _ = yysep3331, yyq3331, yy2arr3331
			const yyr3331 bool = false
			yyq3331[0] = x.Kind != ""
			yyq3331[1] = x.APIVersion != ""
			yyq3331[2] = true
			yyq3331[3] = true
			yyq3331[4] = true
			var yynn3331 int
			if yyr3331 || yy2arr3331 {
				r.EncodeArrayStart(5)
			} else {
				yynn3331 = 0
				for _, b := range yyq3331 {
					if b {
						yynn3331++
					}
				}
				r.EncodeMapStart(yynn3331)
				yynn3331 = 0
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[0] {
					yym3333 := z.EncBinary()
					_ = yym3333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3331[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3334 := z.EncBinary()
					_ = yym3334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[1] {
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3331[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[2] {
					yy3339 := &x.ObjectMeta
					yy3339.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3331[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3340 := &x.ObjectMeta
					yy3340.CodecEncodeSelf(e)
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[3] {
					yy3342 := &x.Spec
					yy3342.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3331[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3343 := &x.Spec
					yy3343.CodecEncodeSelf(e)
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[4] {
					yy3345 := &x.Status
					yy3345.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3331[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3346 := &x.Status
					yy3346.CodecEncodeSelf(e)
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3347 := z.DecBinary()
	_ = yym3347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3348 := r.ContainerType()
		if yyct3348 == codecSelferValueTypeMap1234 {
			yyl3348 := r.ReadMapStart()
			if yyl3348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3348, d)
			}
		} else if yyct3348 == codecSelferValueTypeArray1234 {
			yyl3348 := r.ReadArrayStart()
			if yyl3348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3349Slc
	var yyhl3349 bool = l >= 0
	for yyj3349 := 0; ; yyj3349++ {
		if yyhl3349 {
			if yyj3349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3349Slc = r.DecodeBytes(yys3349Slc, true, true)
		yys3349 := string(yys3349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3349 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3352 := &x.ObjectMeta
				yyv3352.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3353 := &x.Spec
				yyv3353.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3354 := &x.Status
				yyv3354.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3349)
		} // end switch yys3349
	} // end for yyj3349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3355 int
	var yyb3355 bool
	var yyhl3355 bool = l >= 0
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3358 := &x.ObjectMeta
		yyv3358.CodecDecodeSelf(d)
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3359 := &x.Spec
		yyv3359.CodecDecodeSelf(d)
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3360 := &x.Status
		yyv3360.CodecDecodeSelf(d)
	}
	for {
		yyj3355++
		if yyhl3355 {
			yyb3355 = yyj3355 > l
		} else {
			yyb3355 = r.CheckBreak()
		}
		if yyb3355 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3355-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3361 := z.EncBinary()
		_ = yym3361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3362 := !z.EncBinary()
			yy2arr3362 := z.EncBasicHandle().StructToArray
			var yyq3362 [4]bool
			_, _, _ = yysep3362, yyq3362, yy2arr3362
			const yyr3362 bool = false
			yyq3362[0] = x.Kind != ""
			yyq3362[1] = x.APIVersion != ""
			yyq3362[2] = true
			var yynn3362 int
			if yyr3362 || yy2arr3362 {
				r.EncodeArrayStart(4)
			} else {
				yynn3362 = 1
				for _, b := range yyq3362 {
					if b {
						yynn3362++
					}
				}
				r.EncodeMapStart(yynn3362)
				yynn3362 = 0
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3362[0] {
					yym3364 := z.EncBinary()
					_ = yym3364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3362[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3362[1] {
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3362[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3362[2] {
					yy3370 := &x.ListMeta
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3370) {
					} else {
						z.EncFallback(yy3370)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3362[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3372 := &x.ListMeta
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3372) {
					} else {
						z.EncFallback(yy3372)
					}
				}
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3375 := z.EncBinary()
					_ = yym3375
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3377 := z.DecBinary()
	_ = yym3377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3378 := r.ContainerType()
		if yyct3378 == codecSelferValueTypeMap1234 {
			yyl3378 := r.ReadMapStart()
			if yyl3378 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3378, d)
			}
		} else if yyct3378 == codecSelferValueTypeArray1234 {
			yyl3378 := r.ReadArrayStart()
			if yyl3378 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3379Slc
	var yyhl3379 bool = l >= 0
	for yyj3379 := 0; ; yyj3379++ {
		if yyhl3379 {
			if yyj3379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3379Slc = r.DecodeBytes(yys3379Slc, true, true)
		yys3379 := string(yys3379Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3379 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3382 := &x.ListMeta
				yym3383 := z.DecBinary()
				_ = yym3383
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3382) {
				} else {
					z.DecFallback(yyv3382, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3384 := &x.Items
				yym3385 := z.DecBinary()
				_ = yym3385
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3384), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3379)
		} // end switch yys3379
	} // end for yyj3379
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3386 int
	var yyb3386 bool
	var yyhl3386 bool = l >= 0
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3389 := &x.ListMeta
		yym3390 := z.DecBinary()
		_ = yym3390
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3389) {
		} else {
			z.DecFallback(yyv3389, false)
		}
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3391 := &x.Items
		yym3392 := z.DecBinary()
		_ = yym3392
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3391), d)
		}
	}
	for {
		yyj3386++
		if yyhl3386 {
			yyb3386 = yyj3386 > l
		} else {
			yyb3386 = r.CheckBreak()
		}
		if yyb3386 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3386-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3393 := z.EncBinary()
		_ = yym3393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3394 := !z.EncBinary()
			yy2arr3394 := z.EncBasicHandle().StructToArray
			var yyq3394 [4]bool
			_, _, _ = yysep3394, yyq3394, yy2arr3394
			const yyr3394 bool = false
			yyq3394[0] = x.Kind != ""
			yyq3394[1] = x.APIVersion != ""
			yyq3394[2] = true
			var yynn3394 int
			if yyr3394 || yy2arr3394 {
				r.EncodeArrayStart(4)
			} else {
				yynn3394 = 1
				for _, b := range yyq3394 {
					if b {
						yynn3394++
					}
				}
				r.EncodeMapStart(yynn3394)
				yynn3394 = 0
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[0] {
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[1] {
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[2] {
					yy3402 := &x.ObjectMeta
					yy3402.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3403 := &x.ObjectMeta
					yy3403.CodecEncodeSelf(e)
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3405 := &x.Target
				yy3405.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3406 := &x.Target
				yy3406.CodecEncodeSelf(e)
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3407 := z.DecBinary()
	_ = yym3407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3408 := r.ContainerType()
		if yyct3408 == codecSelferValueTypeMap1234 {
			yyl3408 := r.ReadMapStart()
			if yyl3408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3408, d)
			}
		} else if yyct3408 == codecSelferValueTypeArray1234 {
			yyl3408 := r.ReadArrayStart()
			if yyl3408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3409Slc
	var yyhl3409 bool = l >= 0
	for yyj3409 := 0; ; yyj3409++ {
		if yyhl3409 {
			if yyj3409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3409Slc = r.DecodeBytes(yys3409Slc, true, true)
		yys3409 := string(yys3409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3409 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3412 := &x.ObjectMeta
				yyv3412.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3413 := &x.Target
				yyv3413.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3409)
		} // end switch yys3409
	} // end for yyj3409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3414 int
	var yyb3414 bool
	var yyhl3414 bool = l >= 0
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3417 := &x.ObjectMeta
		yyv3417.CodecDecodeSelf(d)
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3418 := &x.Target
		yyv3418.CodecDecodeSelf(d)
	}
	for {
		yyj3414++
		if yyhl3414 {
			yyb3414 = yyj3414 > l
		} else {
			yyb3414 = r.CheckBreak()
		}
		if yyb3414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3419 := z.EncBinary()
		_ = yym3419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3420 := !z.EncBinary()
			yy2arr3420 := z.EncBasicHandle().StructToArray
			var yyq3420 [1]bool
			_, _, _ = yysep3420, yyq3420, yy2arr3420
			const yyr3420 bool = false
			yyq3420[0] = x.UID != nil
			var yynn3420 int
			if yyr3420 || yy2arr3420 {
				r.EncodeArrayStart(1)
			} else {
				yynn3420 = 0
				for _, b := range yyq3420 {
					if b {
						yynn3420++
					}
				}
				r.EncodeMapStart(yynn3420)
				yynn3420 = 0
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3420[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3422 := *x.UID
						yym3423 := z.EncBinary()
						_ = yym3423
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3422) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3422))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3424 := *x.UID
						yym3425 := z.EncBinary()
						_ = yym3425
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3424) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3424))
						}
					}
				}
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3426 := z.DecBinary()
	_ = yym3426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3427 := r.ContainerType()
		if yyct3427 == codecSelferValueTypeMap1234 {
			yyl3427 := r.ReadMapStart()
			if yyl3427 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3427, d)
			}
		} else if yyct3427 == codecSelferValueTypeArray1234 {
			yyl3427 := r.ReadArrayStart()
			if yyl3427 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3428Slc
	var yyhl3428 bool = l >= 0
	for yyj3428 := 0; ; yyj3428++ {
		if yyhl3428 {
			if yyj3428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3428Slc = r.DecodeBytes(yys3428Slc, true, true)
		yys3428 := string(yys3428Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3428 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3430 := z.DecBinary()
				_ = yym3430
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3428)
		} // end switch yys3428
	} // end for yyj3428
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3431 int
	var yyb3431 bool
	var yyhl3431 bool = l >= 0
	yyj3431++
	if yyhl3431 {
		yyb3431 = yyj3431 > l
	} else {
		yyb3431 = r.CheckBreak()
	}
	if yyb3431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3433 := z.DecBinary()
		_ = yym3433
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3431++
		if yyhl3431 {
			yyb3431 = yyj3431 > l
		} else {
			yyb3431 = r.CheckBreak()
		}
		if yyb3431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3434 := z.EncBinary()
		_ = yym3434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3435 := !z.EncBinary()
			yy2arr3435 := z.EncBasicHandle().StructToArray
			var yyq3435 [5]bool
			_, _, _ = yysep3435, yyq3435, yy2arr3435
			const yyr3435 bool = false
			yyq3435[0] = x.Kind != ""
			yyq3435[1] = x.APIVersion != ""
			yyq3435[2] = x.GracePeriodSeconds != nil
			yyq3435[3] = x.Preconditions != nil
			yyq3435[4] = x.OrphanDependents != nil
			var yynn3435 int
			if yyr3435 || yy2arr3435 {
				r.EncodeArrayStart(5)
			} else {
				yynn3435 = 0
				for _, b := range yyq3435 {
					if b {
						yynn3435++
					}
				}
				r.EncodeMapStart(yynn3435)
				yynn3435 = 0
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[0] {
					yym3437 := z.EncBinary()
					_ = yym3437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3438 := z.EncBinary()
					_ = yym3438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[1] {
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3443 := *x.GracePeriodSeconds
						yym3444 := z.EncBinary()
						_ = yym3444
						if false {
						} else {
							r.EncodeInt(int64(yy3443))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3445 := *x.GracePeriodSeconds
						yym3446 := z.EncBinary()
						_ = yym3446
						if false {
						} else {
							r.EncodeInt(int64(yy3445))
						}
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3435[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3435[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3449 := *x.OrphanDependents
						yym3450 := z.EncBinary()
						_ = yym3450
						if false {
						} else {
							r.EncodeBool(bool(yy3449))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3435[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3451 := *x.OrphanDependents
						yym3452 := z.EncBinary()
						_ = yym3452
						if false {
						} else {
							r.EncodeBool(bool(yy3451))
						}
					}
				}
			}
			if yyr3435 || yy2arr3435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3453 := z.DecBinary()
	_ = yym3453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3454 := r.ContainerType()
		if yyct3454 == codecSelferValueTypeMap1234 {
			yyl3454 := r.ReadMapStart()
			if yyl3454 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3454, d)
			}
		} else if yyct3454 == codecSelferValueTypeArray1234 {
			yyl3454 := r.ReadArrayStart()
			if yyl3454 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3454, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3455Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3455Slc
	var yyhl3455 bool = l >= 0
	for yyj3455 := 0; ; yyj3455++ {
		if yyhl3455 {
			if yyj3455 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3455Slc = r.DecodeBytes(yys3455Slc, true, true)
		yys3455 := string(yys3455Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3455 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3459 := z.DecBinary()
				_ = yym3459
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3462 := z.DecBinary()
				_ = yym3462
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3455)
		} // end switch yys3455
	} // end for yyj3455
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3463 int
	var yyb3463 bool
	var yyhl3463 bool = l >= 0
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3467 := z.DecBinary()
		_ = yym3467
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3470 := z.DecBinary()
		_ = yym3470
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3463++
		if yyhl3463 {
			yyb3463 = yyj3463 > l
		} else {
			yyb3463 = r.CheckBreak()
		}
		if yyb3463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3471 := z.EncBinary()
		_ = yym3471
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3472 := !z.EncBinary()
			yy2arr3472 := z.EncBasicHandle().StructToArray
			var yyq3472 [4]bool
			_, _, _ = yysep3472, yyq3472, yy2arr3472
			const yyr3472 bool = false
			yyq3472[0] = x.Kind != ""
			yyq3472[1] = x.APIVersion != ""
			var yynn3472 int
			if yyr3472 || yy2arr3472 {
				r.EncodeArrayStart(4)
			} else {
				yynn3472 = 2
				for _, b := range yyq3472 {
					if b {
						yynn3472++
					}
				}
				r.EncodeMapStart(yynn3472)
				yynn3472 = 0
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3472[0] {
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3472[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3472[1] {
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3472[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3480 := z.EncBinary()
				_ = yym3480
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3481 := z.EncBinary()
				_ = yym3481
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3483 := z.EncBinary()
				_ = yym3483
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3484 := z.EncBinary()
				_ = yym3484
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3485 := z.DecBinary()
	_ = yym3485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3486 := r.ContainerType()
		if yyct3486 == codecSelferValueTypeMap1234 {
			yyl3486 := r.ReadMapStart()
			if yyl3486 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3486, d)
			}
		} else if yyct3486 == codecSelferValueTypeArray1234 {
			yyl3486 := r.ReadArrayStart()
			if yyl3486 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3486, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3487Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3487Slc
	var yyhl3487 bool = l >= 0
	for yyj3487 := 0; ; yyj3487++ {
		if yyhl3487 {
			if yyj3487 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3487Slc = r.DecodeBytes(yys3487Slc, true, true)
		yys3487 := string(yys3487Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3487 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3487)
		} // end switch yys3487
	} // end for yyj3487
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3492 int
	var yyb3492 bool
	var yyhl3492 bool = l >= 0
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3492++
		if yyhl3492 {
			yyb3492 = yyj3492 > l
		} else {
			yyb3492 = r.CheckBreak()
		}
		if yyb3492 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3492-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3497 := z.EncBinary()
		_ = yym3497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3498 := !z.EncBinary()
			yy2arr3498 := z.EncBasicHandle().StructToArray
			var yyq3498 [7]bool
			_, _, _ = yysep3498, yyq3498, yy2arr3498
			const yyr3498 bool = false
			yyq3498[0] = x.Kind != ""
			yyq3498[1] = x.APIVersion != ""
			var yynn3498 int
			if yyr3498 || yy2arr3498 {
				r.EncodeArrayStart(7)
			} else {
				yynn3498 = 5
				for _, b := range yyq3498 {
					if b {
						yynn3498++
					}
				}
				r.EncodeMapStart(yynn3498)
				yynn3498 = 0
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3498[0] {
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3501 := z.EncBinary()
					_ = yym3501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3498[1] {
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3504 := z.EncBinary()
					_ = yym3504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3507 := z.EncBinary()
					_ = yym3507
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3509 := z.EncBinary()
					_ = yym3509
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3510 := z.EncBinary()
					_ = yym3510
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3512 := z.EncBinary()
				_ = yym3512
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3513 := z.EncBinary()
				_ = yym3513
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3515 := z.EncBinary()
				_ = yym3515
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3516 := z.EncBinary()
				_ = yym3516
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3518 := *x.TimeoutSeconds
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else {
						r.EncodeInt(int64(yy3518))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3520 := *x.TimeoutSeconds
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else {
						r.EncodeInt(int64(yy3520))
					}
				}
			}
			if yyr3498 || yy2arr3498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3522 := z.DecBinary()
	_ = yym3522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3523 := r.ContainerType()
		if yyct3523 == codecSelferValueTypeMap1234 {
			yyl3523 := r.ReadMapStart()
			if yyl3523 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3523, d)
			}
		} else if yyct3523 == codecSelferValueTypeArray1234 {
			yyl3523 := r.ReadArrayStart()
			if yyl3523 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3523, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3524Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3524Slc
	var yyhl3524 bool = l >= 0
	for yyj3524 := 0; ; yyj3524++ {
		if yyhl3524 {
			if yyj3524 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3524Slc = r.DecodeBytes(yys3524Slc, true, true)
		yys3524 := string(yys3524Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3524 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3527 := &x.LabelSelector
				yym3528 := z.DecBinary()
				_ = yym3528
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3527) {
				} else {
					z.DecFallback(yyv3527, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3529 := &x.FieldSelector
				yym3530 := z.DecBinary()
				_ = yym3530
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3529) {
				} else {
					z.DecFallback(yyv3529, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3534 := z.DecBinary()
				_ = yym3534
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3524)
		} // end switch yys3524
	} // end for yyj3524
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3535 int
	var yyb3535 bool
	var yyhl3535 bool = l >= 0
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3538 := &x.LabelSelector
		yym3539 := z.DecBinary()
		_ = yym3539
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3538) {
		} else {
			z.DecFallback(yyv3538, true)
		}
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3540 := &x.FieldSelector
		yym3541 := z.DecBinary()
		_ = yym3541
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3540) {
		} else {
			z.DecFallback(yyv3540, true)
		}
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3545 := z.DecBinary()
		_ = yym3545
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3535++
		if yyhl3535 {
			yyb3535 = yyj3535 > l
		} else {
			yyb3535 = r.CheckBreak()
		}
		if yyb3535 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3535-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3546 := z.EncBinary()
		_ = yym3546
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3547 := !z.EncBinary()
			yy2arr3547 := z.EncBasicHandle().StructToArray
			var yyq3547 [10]bool
			_, _, _ = yysep3547, yyq3547, yy2arr3547
			const yyr3547 bool = false
			yyq3547[0] = x.Kind != ""
			yyq3547[1] = x.APIVersion != ""
			var yynn3547 int
			if yyr3547 || yy2arr3547 {
				r.EncodeArrayStart(10)
			} else {
				yynn3547 = 8
				for _, b := range yyq3547 {
					if b {
						yynn3547++
					}
				}
				r.EncodeMapStart(yynn3547)
				yynn3547 = 0
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3547[0] {
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3547[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3547[1] {
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3547[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3555 := z.EncBinary()
				_ = yym3555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3556 := z.EncBinary()
				_ = yym3556
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3558 := z.EncBinary()
				_ = yym3558
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3559 := z.EncBinary()
				_ = yym3559
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3561 := z.EncBinary()
				_ = yym3561
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3562 := z.EncBinary()
				_ = yym3562
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3564 := *x.SinceSeconds
					yym3565 := z.EncBinary()
					_ = yym3565
					if false {
					} else {
						r.EncodeInt(int64(yy3564))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3566 := *x.SinceSeconds
					yym3567 := z.EncBinary()
					_ = yym3567
					if false {
					} else {
						r.EncodeInt(int64(yy3566))
					}
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3569 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3569 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3570 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3570 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3572 := z.EncBinary()
				_ = yym3572
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3573 := z.EncBinary()
				_ = yym3573
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3575 := *x.TailLines
					yym3576 := z.EncBinary()
					_ = yym3576
					if false {
					} else {
						r.EncodeInt(int64(yy3575))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3577 := *x.TailLines
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else {
						r.EncodeInt(int64(yy3577))
					}
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3580 := *x.LimitBytes
					yym3581 := z.EncBinary()
					_ = yym3581
					if false {
					} else {
						r.EncodeInt(int64(yy3580))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3582 := *x.LimitBytes
					yym3583 := z.EncBinary()
					_ = yym3583
					if false {
					} else {
						r.EncodeInt(int64(yy3582))
					}
				}
			}
			if yyr3547 || yy2arr3547 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3584 := z.DecBinary()
	_ = yym3584
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3585 := r.ContainerType()
		if yyct3585 == codecSelferValueTypeMap1234 {
			yyl3585 := r.ReadMapStart()
			if yyl3585 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3585, d)
			}
		} else if yyct3585 == codecSelferValueTypeArray1234 {
			yyl3585 := r.ReadArrayStart()
			if yyl3585 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3585, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3586Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3586Slc
	var yyhl3586 bool = l >= 0
	for yyj3586 := 0; ; yyj3586++ {
		if yyhl3586 {
			if yyj3586 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3586Slc = r.DecodeBytes(yys3586Slc, true, true)
		yys3586 := string(yys3586Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3586 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3593 := z.DecBinary()
				_ = yym3593
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3595 := z.DecBinary()
				_ = yym3595
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3595 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3595 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3598 := z.DecBinary()
				_ = yym3598
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3600 := z.DecBinary()
				_ = yym3600
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3586)
		} // end switch yys3586
	} // end for yyj3586
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3601 int
	var yyb3601 bool
	var yyhl3601 bool = l >= 0
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3608 := z.DecBinary()
		_ = yym3608
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3610 := z.DecBinary()
		_ = yym3610
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3610 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3610 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3613 := z.DecBinary()
		_ = yym3613
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3615 := z.DecBinary()
		_ = yym3615
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3601++
		if yyhl3601 {
			yyb3601 = yyj3601 > l
		} else {
			yyb3601 = r.CheckBreak()
		}
		if yyb3601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3616 := z.EncBinary()
		_ = yym3616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3617 := !z.EncBinary()
			yy2arr3617 := z.EncBasicHandle().StructToArray
			var yyq3617 [7]bool
			_, _, _ = yysep3617, yyq3617, yy2arr3617
			const yyr3617 bool = false
			yyq3617[0] = x.Kind != ""
			yyq3617[1] = x.APIVersion != ""
			yyq3617[2] = x.Stdin != false
			yyq3617[3] = x.Stdout != false
			yyq3617[4] = x.Stderr != false
			yyq3617[5] = x.TTY != false
			yyq3617[6] = x.Container != ""
			var yynn3617 int
			if yyr3617 || yy2arr3617 {
				r.EncodeArrayStart(7)
			} else {
				yynn3617 = 0
				for _, b := range yyq3617 {
					if b {
						yynn3617++
					}
				}
				r.EncodeMapStart(yynn3617)
				yynn3617 = 0
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[0] {
					yym3619 := z.EncBinary()
					_ = yym3619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3617[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3620 := z.EncBinary()
					_ = yym3620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[1] {
					yym3622 := z.EncBinary()
					_ = yym3622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3617[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3623 := z.EncBinary()
					_ = yym3623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[2] {
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3617[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[3] {
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3617[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[4] {
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3617[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[5] {
					yym3634 := z.EncBinary()
					_ = yym3634
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3617[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3617[6] {
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3617[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3638 := z.EncBinary()
					_ = yym3638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3617 || yy2arr3617 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3639 := z.DecBinary()
	_ = yym3639
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3640 := r.ContainerType()
		if yyct3640 == codecSelferValueTypeMap1234 {
			yyl3640 := r.ReadMapStart()
			if yyl3640 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3640, d)
			}
		} else if yyct3640 == codecSelferValueTypeArray1234 {
			yyl3640 := r.ReadArrayStart()
			if yyl3640 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3640, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3641Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3641Slc
	var yyhl3641 bool = l >= 0
	for yyj3641 := 0; ; yyj3641++ {
		if yyhl3641 {
			if yyj3641 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3641Slc = r.DecodeBytes(yys3641Slc, true, true)
		yys3641 := string(yys3641Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3641 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3641)
		} // end switch yys3641
	} // end for yyj3641
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3649 int
	var yyb3649 bool
	var yyhl3649 bool = l >= 0
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3649++
		if yyhl3649 {
			yyb3649 = yyj3649 > l
		} else {
			yyb3649 = r.CheckBreak()
		}
		if yyb3649 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3649-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3657 := z.EncBinary()
		_ = yym3657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3658 := !z.EncBinary()
			yy2arr3658 := z.EncBasicHandle().StructToArray
			var yyq3658 [8]bool
			_, _, _ = yysep3658, yyq3658, yy2arr3658
			const yyr3658 bool = false
			yyq3658[0] = x.Kind != ""
			yyq3658[1] = x.APIVersion != ""
			var yynn3658 int
			if yyr3658 || yy2arr3658 {
				r.EncodeArrayStart(8)
			} else {
				yynn3658 = 6
				for _, b := range yyq3658 {
					if b {
						yynn3658++
					}
				}
				r.EncodeMapStart(yynn3658)
				yynn3658 = 0
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3658[0] {
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3658[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3661 := z.EncBinary()
					_ = yym3661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3658[1] {
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3658[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3664 := z.EncBinary()
					_ = yym3664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3666 := z.EncBinary()
				_ = yym3666
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3667 := z.EncBinary()
				_ = yym3667
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3669 := z.EncBinary()
				_ = yym3669
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3670 := z.EncBinary()
				_ = yym3670
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3672 := z.EncBinary()
				_ = yym3672
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3673 := z.EncBinary()
				_ = yym3673
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3675 := z.EncBinary()
				_ = yym3675
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3676 := z.EncBinary()
				_ = yym3676
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3678 := z.EncBinary()
				_ = yym3678
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3679 := z.EncBinary()
				_ = yym3679
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3682 := z.EncBinary()
					_ = yym3682
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3658 || yy2arr3658 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3683 := z.DecBinary()
	_ = yym3683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3684 := r.ContainerType()
		if yyct3684 == codecSelferValueTypeMap1234 {
			yyl3684 := r.ReadMapStart()
			if yyl3684 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3684, d)
			}
		} else if yyct3684 == codecSelferValueTypeArray1234 {
			yyl3684 := r.ReadArrayStart()
			if yyl3684 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3685Slc
	var yyhl3685 bool = l >= 0
	for yyj3685 := 0; ; yyj3685++ {
		if yyhl3685 {
			if yyj3685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3685Slc = r.DecodeBytes(yys3685Slc, true, true)
		yys3685 := string(yys3685Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3685 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3693 := &x.Command
				yym3694 := z.DecBinary()
				_ = yym3694
				if false {
				} else {
					z.F.DecSliceStringX(yyv3693, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3685)
		} // end switch yys3685
	} // end for yyj3685
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3695 int
	var yyb3695 bool
	var yyhl3695 bool = l >= 0
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3703 := &x.Command
		yym3704 := z.DecBinary()
		_ = yym3704
		if false {
		} else {
			z.F.DecSliceStringX(yyv3703, false, d)
		}
	}
	for {
		yyj3695++
		if yyhl3695 {
			yyb3695 = yyj3695 > l
		} else {
			yyb3695 = r.CheckBreak()
		}
		if yyb3695 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3695-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3705 := z.EncBinary()
		_ = yym3705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3706 := !z.EncBinary()
			yy2arr3706 := z.EncBasicHandle().StructToArray
			var yyq3706 [3]bool
			_, _, _ = yysep3706, yyq3706, yy2arr3706
			const yyr3706 bool = false
			yyq3706[0] = x.Kind != ""
			yyq3706[1] = x.APIVersion != ""
			var yynn3706 int
			if yyr3706 || yy2arr3706 {
				r.EncodeArrayStart(3)
			} else {
				yynn3706 = 1
				for _, b := range yyq3706 {
					if b {
						yynn3706++
					}
				}
				r.EncodeMapStart(yynn3706)
				yynn3706 = 0
			}
			if yyr3706 || yy2arr3706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3706[0] {
					yym3708 := z.EncBinary()
					_ = yym3708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3706[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3709 := z.EncBinary()
					_ = yym3709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3706 || yy2arr3706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3706[1] {
					yym3711 := z.EncBinary()
					_ = yym3711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3706[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3712 := z.EncBinary()
					_ = yym3712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3706 || yy2arr3706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3714 := z.EncBinary()
				_ = yym3714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3715 := z.EncBinary()
				_ = yym3715
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3706 || yy2arr3706 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3716 := z.DecBinary()
	_ = yym3716
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3717 := r.ContainerType()
		if yyct3717 == codecSelferValueTypeMap1234 {
			yyl3717 := r.ReadMapStart()
			if yyl3717 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3717, d)
			}
		} else if yyct3717 == codecSelferValueTypeArray1234 {
			yyl3717 := r.ReadArrayStart()
			if yyl3717 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3717, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3718Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3718Slc
	var yyhl3718 bool = l >= 0
	for yyj3718 := 0; ; yyj3718++ {
		if yyhl3718 {
			if yyj3718 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3718Slc = r.DecodeBytes(yys3718Slc, true, true)
		yys3718 := string(yys3718Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3718 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3718)
		} // end switch yys3718
	} // end for yyj3718
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3722 int
	var yyb3722 bool
	var yyhl3722 bool = l >= 0
	yyj3722++
	if yyhl3722 {
		yyb3722 = yyj3722 > l
	} else {
		yyb3722 = r.CheckBreak()
	}
	if yyb3722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3722++
	if yyhl3722 {
		yyb3722 = yyj3722 > l
	} else {
		yyb3722 = r.CheckBreak()
	}
	if yyb3722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3722++
	if yyhl3722 {
		yyb3722 = yyj3722 > l
	} else {
		yyb3722 = r.CheckBreak()
	}
	if yyb3722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3722++
		if yyhl3722 {
			yyb3722 = yyj3722 > l
		} else {
			yyb3722 = r.CheckBreak()
		}
		if yyb3722 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3722-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3726 := z.EncBinary()
		_ = yym3726
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3727 := !z.EncBinary()
			yy2arr3727 := z.EncBasicHandle().StructToArray
			var yyq3727 [3]bool
			_, _, _ = yysep3727, yyq3727, yy2arr3727
			const yyr3727 bool = false
			yyq3727[0] = x.Kind != ""
			yyq3727[1] = x.APIVersion != ""
			var yynn3727 int
			if yyr3727 || yy2arr3727 {
				r.EncodeArrayStart(3)
			} else {
				yynn3727 = 1
				for _, b := range yyq3727 {
					if b {
						yynn3727++
					}
				}
				r.EncodeMapStart(yynn3727)
				yynn3727 = 0
			}
			if yyr3727 || yy2arr3727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3727[0] {
					yym3729 := z.EncBinary()
					_ = yym3729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3727[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3727 || yy2arr3727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3727[1] {
					yym3732 := z.EncBinary()
					_ = yym3732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3727[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3733 := z.EncBinary()
					_ = yym3733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3727 || yy2arr3727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3735 := z.EncBinary()
				_ = yym3735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3736 := z.EncBinary()
				_ = yym3736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3727 || yy2arr3727 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3737 := z.DecBinary()
	_ = yym3737
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3738 := r.ContainerType()
		if yyct3738 == codecSelferValueTypeMap1234 {
			yyl3738 := r.ReadMapStart()
			if yyl3738 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3738, d)
			}
		} else if yyct3738 == codecSelferValueTypeArray1234 {
			yyl3738 := r.ReadArrayStart()
			if yyl3738 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3738, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3739Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3739Slc
	var yyhl3739 bool = l >= 0
	for yyj3739 := 0; ; yyj3739++ {
		if yyhl3739 {
			if yyj3739 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3739Slc = r.DecodeBytes(yys3739Slc, true, true)
		yys3739 := string(yys3739Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3739 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3739)
		} // end switch yys3739
	} // end for yyj3739
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3743 int
	var yyb3743 bool
	var yyhl3743 bool = l >= 0
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3743++
		if yyhl3743 {
			yyb3743 = yyj3743 > l
		} else {
			yyb3743 = r.CheckBreak()
		}
		if yyb3743 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3743-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3747 := z.EncBinary()
		_ = yym3747
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3748 := !z.EncBinary()
			yy2arr3748 := z.EncBasicHandle().StructToArray
			var yyq3748 [3]bool
			_, _, _ = yysep3748, yyq3748, yy2arr3748
			const yyr3748 bool = false
			yyq3748[0] = x.Kind != ""
			yyq3748[1] = x.APIVersion != ""
			var yynn3748 int
			if yyr3748 || yy2arr3748 {
				r.EncodeArrayStart(3)
			} else {
				yynn3748 = 1
				for _, b := range yyq3748 {
					if b {
						yynn3748++
					}
				}
				r.EncodeMapStart(yynn3748)
				yynn3748 = 0
			}
			if yyr3748 || yy2arr3748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3748[0] {
					yym3750 := z.EncBinary()
					_ = yym3750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3748[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3748 || yy2arr3748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3748[1] {
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3748[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3748 || yy2arr3748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3756 := z.EncBinary()
				_ = yym3756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3757 := z.EncBinary()
				_ = yym3757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3748 || yy2arr3748 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3758 := z.DecBinary()
	_ = yym3758
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3759 := r.ContainerType()
		if yyct3759 == codecSelferValueTypeMap1234 {
			yyl3759 := r.ReadMapStart()
			if yyl3759 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3759, d)
			}
		} else if yyct3759 == codecSelferValueTypeArray1234 {
			yyl3759 := r.ReadArrayStart()
			if yyl3759 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3759, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3760Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3760Slc
	var yyhl3760 bool = l >= 0
	for yyj3760 := 0; ; yyj3760++ {
		if yyhl3760 {
			if yyj3760 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3760Slc = r.DecodeBytes(yys3760Slc, true, true)
		yys3760 := string(yys3760Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3760 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3760)
		} // end switch yys3760
	} // end for yyj3760
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3764 int
	var yyb3764 bool
	var yyhl3764 bool = l >= 0
	yyj3764++
	if yyhl3764 {
		yyb3764 = yyj3764 > l
	} else {
		yyb3764 = r.CheckBreak()
	}
	if yyb3764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3764++
	if yyhl3764 {
		yyb3764 = yyj3764 > l
	} else {
		yyb3764 = r.CheckBreak()
	}
	if yyb3764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3764++
	if yyhl3764 {
		yyb3764 = yyj3764 > l
	} else {
		yyb3764 = r.CheckBreak()
	}
	if yyb3764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3764++
		if yyhl3764 {
			yyb3764 = yyj3764 > l
		} else {
			yyb3764 = r.CheckBreak()
		}
		if yyb3764 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3764-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3768 := z.EncBinary()
		_ = yym3768
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3769 := !z.EncBinary()
			yy2arr3769 := z.EncBasicHandle().StructToArray
			var yyq3769 [5]bool
			_, _, _ = yysep3769, yyq3769, yy2arr3769
			const yyr3769 bool = false
			yyq3769[4] = x.Controller != nil
			var yynn3769 int
			if yyr3769 || yy2arr3769 {
				r.EncodeArrayStart(5)
			} else {
				yynn3769 = 4
				for _, b := range yyq3769 {
					if b {
						yynn3769++
					}
				}
				r.EncodeMapStart(yynn3769)
				yynn3769 = 0
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3771 := z.EncBinary()
				_ = yym3771
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3772 := z.EncBinary()
				_ = yym3772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3774 := z.EncBinary()
				_ = yym3774
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3775 := z.EncBinary()
				_ = yym3775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3777 := z.EncBinary()
				_ = yym3777
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3778 := z.EncBinary()
				_ = yym3778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3780 := z.EncBinary()
				_ = yym3780
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3781 := z.EncBinary()
				_ = yym3781
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3769[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3783 := *x.Controller
						yym3784 := z.EncBinary()
						_ = yym3784
						if false {
						} else {
							r.EncodeBool(bool(yy3783))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3769[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3785 := *x.Controller
						yym3786 := z.EncBinary()
						_ = yym3786
						if false {
						} else {
							r.EncodeBool(bool(yy3785))
						}
					}
				}
			}
			if yyr3769 || yy2arr3769 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3787 := z.DecBinary()
	_ = yym3787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3788 := r.ContainerType()
		if yyct3788 == codecSelferValueTypeMap1234 {
			yyl3788 := r.ReadMapStart()
			if yyl3788 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3788, d)
			}
		} else if yyct3788 == codecSelferValueTypeArray1234 {
			yyl3788 := r.ReadArrayStart()
			if yyl3788 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3788, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3789Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3789Slc
	var yyhl3789 bool = l >= 0
	for yyj3789 := 0; ; yyj3789++ {
		if yyhl3789 {
			if yyj3789 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3789Slc = r.DecodeBytes(yys3789Slc, true, true)
		yys3789 := string(yys3789Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3789 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3795 := z.DecBinary()
				_ = yym3795
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3789)
		} // end switch yys3789
	} // end for yyj3789
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3796 int
	var yyb3796 bool
	var yyhl3796 bool = l >= 0
	yyj3796++
	if yyhl3796 {
		yyb3796 = yyj3796 > l
	} else {
		yyb3796 = r.CheckBreak()
	}
	if yyb3796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3796++
	if yyhl3796 {
		yyb3796 = yyj3796 > l
	} else {
		yyb3796 = r.CheckBreak()
	}
	if yyb3796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3796++
	if yyhl3796 {
		yyb3796 = yyj3796 > l
	} else {
		yyb3796 = r.CheckBreak()
	}
	if yyb3796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3796++
	if yyhl3796 {
		yyb3796 = yyj3796 > l
	} else {
		yyb3796 = r.CheckBreak()
	}
	if yyb3796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3796++
	if yyhl3796 {
		yyb3796 = yyj3796 > l
	} else {
		yyb3796 = r.CheckBreak()
	}
	if yyb3796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3802 := z.DecBinary()
		_ = yym3802
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3796++
		if yyhl3796 {
			yyb3796 = yyj3796 > l
		} else {
			yyb3796 = r.CheckBreak()
		}
		if yyb3796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3803 := z.EncBinary()
		_ = yym3803
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3804 := !z.EncBinary()
			yy2arr3804 := z.EncBasicHandle().StructToArray
			var yyq3804 [7]bool
			_, _, _ = yysep3804, yyq3804, yy2arr3804
			const yyr3804 bool = false
			yyq3804[0] = x.Kind != ""
			yyq3804[1] = x.Namespace != ""
			yyq3804[2] = x.Name != ""
			yyq3804[3] = x.UID != ""
			yyq3804[4] = x.APIVersion != ""
			yyq3804[5] = x.ResourceVersion != ""
			yyq3804[6] = x.FieldPath != ""
			var yynn3804 int
			if yyr3804 || yy2arr3804 {
				r.EncodeArrayStart(7)
			} else {
				yynn3804 = 0
				for _, b := range yyq3804 {
					if b {
						yynn3804++
					}
				}
				r.EncodeMapStart(yynn3804)
				yynn3804 = 0
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[0] {
					yym3806 := z.EncBinary()
					_ = yym3806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3807 := z.EncBinary()
					_ = yym3807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[1] {
					yym3809 := z.EncBinary()
					_ = yym3809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3810 := z.EncBinary()
					_ = yym3810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[2] {
					yym3812 := z.EncBinary()
					_ = yym3812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3813 := z.EncBinary()
					_ = yym3813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[3] {
					yym3815 := z.EncBinary()
					_ = yym3815
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3816 := z.EncBinary()
					_ = yym3816
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[4] {
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3819 := z.EncBinary()
					_ = yym3819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[5] {
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[6] {
					yym3824 := z.EncBinary()
					_ = yym3824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3825 := z.EncBinary()
					_ = yym3825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3826 := z.DecBinary()
	_ = yym3826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3827 := r.ContainerType()
		if yyct3827 == codecSelferValueTypeMap1234 {
			yyl3827 := r.ReadMapStart()
			if yyl3827 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3827, d)
			}
		} else if yyct3827 == codecSelferValueTypeArray1234 {
			yyl3827 := r.ReadArrayStart()
			if yyl3827 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3828Slc
	var yyhl3828 bool = l >= 0
	for yyj3828 := 0; ; yyj3828++ {
		if yyhl3828 {
			if yyj3828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3828Slc = r.DecodeBytes(yys3828Slc, true, true)
		yys3828 := string(yys3828Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3828 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3828)
		} // end switch yys3828
	} // end for yyj3828
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3836 int
	var yyb3836 bool
	var yyhl3836 bool = l >= 0
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3836++
		if yyhl3836 {
			yyb3836 = yyj3836 > l
		} else {
			yyb3836 = r.CheckBreak()
		}
		if yyb3836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3844 := z.EncBinary()
		_ = yym3844
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3845 := !z.EncBinary()
			yy2arr3845 := z.EncBasicHandle().StructToArray
			var yyq3845 [1]bool
			_, _, _ = yysep3845, yyq3845, yy2arr3845
			const yyr3845 bool = false
			var yynn3845 int
			if yyr3845 || yy2arr3845 {
				r.EncodeArrayStart(1)
			} else {
				yynn3845 = 1
				for _, b := range yyq3845 {
					if b {
						yynn3845++
					}
				}
				r.EncodeMapStart(yynn3845)
				yynn3845 = 0
			}
			if yyr3845 || yy2arr3845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3847 := z.EncBinary()
				_ = yym3847
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3848 := z.EncBinary()
				_ = yym3848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3845 || yy2arr3845 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3849 := z.DecBinary()
	_ = yym3849
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3850 := r.ContainerType()
		if yyct3850 == codecSelferValueTypeMap1234 {
			yyl3850 := r.ReadMapStart()
			if yyl3850 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3850, d)
			}
		} else if yyct3850 == codecSelferValueTypeArray1234 {
			yyl3850 := r.ReadArrayStart()
			if yyl3850 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3850, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3851Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3851Slc
	var yyhl3851 bool = l >= 0
	for yyj3851 := 0; ; yyj3851++ {
		if yyhl3851 {
			if yyj3851 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3851Slc = r.DecodeBytes(yys3851Slc, true, true)
		yys3851 := string(yys3851Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3851 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3851)
		} // end switch yys3851
	} // end for yyj3851
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3853 int
	var yyb3853 bool
	var yyhl3853 bool = l >= 0
	yyj3853++
	if yyhl3853 {
		yyb3853 = yyj3853 > l
	} else {
		yyb3853 = r.CheckBreak()
	}
	if yyb3853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3853++
		if yyhl3853 {
			yyb3853 = yyj3853 > l
		} else {
			yyb3853 = r.CheckBreak()
		}
		if yyb3853 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3853-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3855 := z.EncBinary()
		_ = yym3855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3856 := !z.EncBinary()
			yy2arr3856 := z.EncBasicHandle().StructToArray
			var yyq3856 [3]bool
			_, _, _ = yysep3856, yyq3856, yy2arr3856
			const yyr3856 bool = false
			yyq3856[0] = x.Kind != ""
			yyq3856[1] = x.APIVersion != ""
			yyq3856[2] = true
			var yynn3856 int
			if yyr3856 || yy2arr3856 {
				r.EncodeArrayStart(3)
			} else {
				yynn3856 = 0
				for _, b := range yyq3856 {
					if b {
						yynn3856++
					}
				}
				r.EncodeMapStart(yynn3856)
				yynn3856 = 0
			}
			if yyr3856 || yy2arr3856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3856[0] {
					yym3858 := z.EncBinary()
					_ = yym3858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3856[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3859 := z.EncBinary()
					_ = yym3859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3856 || yy2arr3856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3856[1] {
					yym3861 := z.EncBinary()
					_ = yym3861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3862 := z.EncBinary()
					_ = yym3862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3856 || yy2arr3856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3856[2] {
					yy3864 := &x.Reference
					yy3864.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3856[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3865 := &x.Reference
					yy3865.CodecEncodeSelf(e)
				}
			}
			if yyr3856 || yy2arr3856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3866 := z.DecBinary()
	_ = yym3866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3867 := r.ContainerType()
		if yyct3867 == codecSelferValueTypeMap1234 {
			yyl3867 := r.ReadMapStart()
			if yyl3867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3867, d)
			}
		} else if yyct3867 == codecSelferValueTypeArray1234 {
			yyl3867 := r.ReadArrayStart()
			if yyl3867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3868Slc
	var yyhl3868 bool = l >= 0
	for yyj3868 := 0; ; yyj3868++ {
		if yyhl3868 {
			if yyj3868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3868Slc = r.DecodeBytes(yys3868Slc, true, true)
		yys3868 := string(yys3868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3868 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3871 := &x.Reference
				yyv3871.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3868)
		} // end switch yys3868
	} // end for yyj3868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3872 int
	var yyb3872 bool
	var yyhl3872 bool = l >= 0
	yyj3872++
	if yyhl3872 {
		yyb3872 = yyj3872 > l
	} else {
		yyb3872 = r.CheckBreak()
	}
	if yyb3872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3872++
	if yyhl3872 {
		yyb3872 = yyj3872 > l
	} else {
		yyb3872 = r.CheckBreak()
	}
	if yyb3872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3872++
	if yyhl3872 {
		yyb3872 = yyj3872 > l
	} else {
		yyb3872 = r.CheckBreak()
	}
	if yyb3872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3875 := &x.Reference
		yyv3875.CodecDecodeSelf(d)
	}
	for {
		yyj3872++
		if yyhl3872 {
			yyb3872 = yyj3872 > l
		} else {
			yyb3872 = r.CheckBreak()
		}
		if yyb3872 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3872-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3876 := z.EncBinary()
		_ = yym3876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3877 := !z.EncBinary()
			yy2arr3877 := z.EncBasicHandle().StructToArray
			var yyq3877 [2]bool
			_, _, _ = yysep3877, yyq3877, yy2arr3877
			const yyr3877 bool = false
			yyq3877[0] = x.Component != ""
			yyq3877[1] = x.Host != ""
			var yynn3877 int
			if yyr3877 || yy2arr3877 {
				r.EncodeArrayStart(2)
			} else {
				yynn3877 = 0
				for _, b := range yyq3877 {
					if b {
						yynn3877++
					}
				}
				r.EncodeMapStart(yynn3877)
				yynn3877 = 0
			}
			if yyr3877 || yy2arr3877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3877[0] {
					yym3879 := z.EncBinary()
					_ = yym3879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3877[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3880 := z.EncBinary()
					_ = yym3880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3877 || yy2arr3877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3877[1] {
					yym3882 := z.EncBinary()
					_ = yym3882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3877[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3883 := z.EncBinary()
					_ = yym3883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3877 || yy2arr3877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3884 := z.DecBinary()
	_ = yym3884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3885 := r.ContainerType()
		if yyct3885 == codecSelferValueTypeMap1234 {
			yyl3885 := r.ReadMapStart()
			if yyl3885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3885, d)
			}
		} else if yyct3885 == codecSelferValueTypeArray1234 {
			yyl3885 := r.ReadArrayStart()
			if yyl3885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3886Slc
	var yyhl3886 bool = l >= 0
	for yyj3886 := 0; ; yyj3886++ {
		if yyhl3886 {
			if yyj3886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3886Slc = r.DecodeBytes(yys3886Slc, true, true)
		yys3886 := string(yys3886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3886 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3886)
		} // end switch yys3886
	} // end for yyj3886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3889 int
	var yyb3889 bool
	var yyhl3889 bool = l >= 0
	yyj3889++
	if yyhl3889 {
		yyb3889 = yyj3889 > l
	} else {
		yyb3889 = r.CheckBreak()
	}
	if yyb3889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3889++
	if yyhl3889 {
		yyb3889 = yyj3889 > l
	} else {
		yyb3889 = r.CheckBreak()
	}
	if yyb3889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3889++
		if yyhl3889 {
			yyb3889 = yyj3889 > l
		} else {
			yyb3889 = r.CheckBreak()
		}
		if yyb3889 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3889-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3892 := z.EncBinary()
		_ = yym3892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3893 := !z.EncBinary()
			yy2arr3893 := z.EncBasicHandle().StructToArray
			var yyq3893 [11]bool
			_, _, _ = yysep3893, yyq3893, yy2arr3893
			const yyr3893 bool = false
			yyq3893[0] = x.Kind != ""
			yyq3893[1] = x.APIVersion != ""
			yyq3893[2] = true
			yyq3893[3] = true
			yyq3893[4] = x.Reason != ""
			yyq3893[5] = x.Message != ""
			yyq3893[6] = true
			yyq3893[7] = true
			yyq3893[8] = true
			yyq3893[9] = x.Count != 0
			yyq3893[10] = x.Type != ""
			var yynn3893 int
			if yyr3893 || yy2arr3893 {
				r.EncodeArrayStart(11)
			} else {
				yynn3893 = 0
				for _, b := range yyq3893 {
					if b {
						yynn3893++
					}
				}
				r.EncodeMapStart(yynn3893)
				yynn3893 = 0
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[0] {
					yym3895 := z.EncBinary()
					_ = yym3895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3893[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3896 := z.EncBinary()
					_ = yym3896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[1] {
					yym3898 := z.EncBinary()
					_ = yym3898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3893[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3899 := z.EncBinary()
					_ = yym3899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[2] {
					yy3901 := &x.ObjectMeta
					yy3901.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3893[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3902 := &x.ObjectMeta
					yy3902.CodecEncodeSelf(e)
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[3] {
					yy3904 := &x.InvolvedObject
					yy3904.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3893[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3905 := &x.InvolvedObject
					yy3905.CodecEncodeSelf(e)
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[4] {
					yym3907 := z.EncBinary()
					_ = yym3907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3893[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3908 := z.EncBinary()
					_ = yym3908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[5] {
					yym3910 := z.EncBinary()
					_ = yym3910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3893[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3911 := z.EncBinary()
					_ = yym3911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[6] {
					yy3913 := &x.Source
					yy3913.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3893[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3914 := &x.Source
					yy3914.CodecEncodeSelf(e)
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[7] {
					yy3916 := &x.FirstTimestamp
					yym3917 := z.EncBinary()
					_ = yym3917
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3916) {
					} else if yym3917 {
						z.EncBinaryMarshal(yy3916)
					} else if !yym3917 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3916)
					} else {
						z.EncFallback(yy3916)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3893[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3918 := &x.FirstTimestamp
					yym3919 := z.EncBinary()
					_ = yym3919
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3918) {
					} else if yym3919 {
						z.EncBinaryMarshal(yy3918)
					} else if !yym3919 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3918)
					} else {
						z.EncFallback(yy3918)
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[8] {
					yy3921 := &x.LastTimestamp
					yym3922 := z.EncBinary()
					_ = yym3922
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3921) {
					} else if yym3922 {
						z.EncBinaryMarshal(yy3921)
					} else if !yym3922 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3921)
					} else {
						z.EncFallback(yy3921)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3893[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3923 := &x.LastTimestamp
					yym3924 := z.EncBinary()
					_ = yym3924
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3923) {
					} else if yym3924 {
						z.EncBinaryMarshal(yy3923)
					} else if !yym3924 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3923)
					} else {
						z.EncFallback(yy3923)
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[9] {
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3893[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[10] {
					yym3929 := z.EncBinary()
					_ = yym3929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3893[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3930 := z.EncBinary()
					_ = yym3930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3931 := z.DecBinary()
	_ = yym3931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3932 := r.ContainerType()
		if yyct3932 == codecSelferValueTypeMap1234 {
			yyl3932 := r.ReadMapStart()
			if yyl3932 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3932, d)
			}
		} else if yyct3932 == codecSelferValueTypeArray1234 {
			yyl3932 := r.ReadArrayStart()
			if yyl3932 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3933Slc
	var yyhl3933 bool = l >= 0
	for yyj3933 := 0; ; yyj3933++ {
		if yyhl3933 {
			if yyj3933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3933Slc = r.DecodeBytes(yys3933Slc, true, true)
		yys3933 := string(yys3933Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3933 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3936 := &x.ObjectMeta
				yyv3936.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3937 := &x.InvolvedObject
				yyv3937.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3940 := &x.Source
				yyv3940.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3941 := &x.FirstTimestamp
				yym3942 := z.DecBinary()
				_ = yym3942
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3941) {
				} else if yym3942 {
					z.DecBinaryUnmarshal(yyv3941)
				} else if !yym3942 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3941)
				} else {
					z.DecFallback(yyv3941, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3943 := &x.LastTimestamp
				yym3944 := z.DecBinary()
				_ = yym3944
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3943) {
				} else if yym3944 {
					z.DecBinaryUnmarshal(yyv3943)
				} else if !yym3944 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3943)
				} else {
					z.DecFallback(yyv3943, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3933)
		} // end switch yys3933
	} // end for yyj3933
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3947 int
	var yyb3947 bool
	var yyhl3947 bool = l >= 0
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3950 := &x.ObjectMeta
		yyv3950.CodecDecodeSelf(d)
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3951 := &x.InvolvedObject
		yyv3951.CodecDecodeSelf(d)
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3954 := &x.Source
		yyv3954.CodecDecodeSelf(d)
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3955 := &x.FirstTimestamp
		yym3956 := z.DecBinary()
		_ = yym3956
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3955) {
		} else if yym3956 {
			z.DecBinaryUnmarshal(yyv3955)
		} else if !yym3956 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3955)
		} else {
			z.DecFallback(yyv3955, false)
		}
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3957 := &x.LastTimestamp
		yym3958 := z.DecBinary()
		_ = yym3958
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3957) {
		} else if yym3958 {
			z.DecBinaryUnmarshal(yyv3957)
		} else if !yym3958 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3957)
		} else {
			z.DecFallback(yyv3957, false)
		}
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3947++
	if yyhl3947 {
		yyb3947 = yyj3947 > l
	} else {
		yyb3947 = r.CheckBreak()
	}
	if yyb3947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3947++
		if yyhl3947 {
			yyb3947 = yyj3947 > l
		} else {
			yyb3947 = r.CheckBreak()
		}
		if yyb3947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3961 := z.EncBinary()
		_ = yym3961
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3962 := !z.EncBinary()
			yy2arr3962 := z.EncBasicHandle().StructToArray
			var yyq3962 [4]bool
			_, _, _ = yysep3962, yyq3962, yy2arr3962
			const yyr3962 bool = false
			yyq3962[0] = x.Kind != ""
			yyq3962[1] = x.APIVersion != ""
			yyq3962[2] = true
			var yynn3962 int
			if yyr3962 || yy2arr3962 {
				r.EncodeArrayStart(4)
			} else {
				yynn3962 = 1
				for _, b := range yyq3962 {
					if b {
						yynn3962++
					}
				}
				r.EncodeMapStart(yynn3962)
				yynn3962 = 0
			}
			if yyr3962 || yy2arr3962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3962[0] {
					yym3964 := z.EncBinary()
					_ = yym3964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3962[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3965 := z.EncBinary()
					_ = yym3965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3962 || yy2arr3962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3962[1] {
					yym3967 := z.EncBinary()
					_ = yym3967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3962[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3968 := z.EncBinary()
					_ = yym3968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3962 || yy2arr3962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3962[2] {
					yy3970 := &x.ListMeta
					yym3971 := z.EncBinary()
					_ = yym3971
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3970) {
					} else {
						z.EncFallback(yy3970)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3962[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3972 := &x.ListMeta
					yym3973 := z.EncBinary()
					_ = yym3973
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3972) {
					} else {
						z.EncFallback(yy3972)
					}
				}
			}
			if yyr3962 || yy2arr3962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3975 := z.EncBinary()
					_ = yym3975
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3976 := z.EncBinary()
					_ = yym3976
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3962 || yy2arr3962 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3977 := z.DecBinary()
	_ = yym3977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3978 := r.ContainerType()
		if yyct3978 == codecSelferValueTypeMap1234 {
			yyl3978 := r.ReadMapStart()
			if yyl3978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3978, d)
			}
		} else if yyct3978 == codecSelferValueTypeArray1234 {
			yyl3978 := r.ReadArrayStart()
			if yyl3978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3979Slc
	var yyhl3979 bool = l >= 0
	for yyj3979 := 0; ; yyj3979++ {
		if yyhl3979 {
			if yyj3979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3979Slc = r.DecodeBytes(yys3979Slc, true, true)
		yys3979 := string(yys3979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3979 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3982 := &x.ListMeta
				yym3983 := z.DecBinary()
				_ = yym3983
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3982) {
				} else {
					z.DecFallback(yyv3982, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3984 := &x.Items
				yym3985 := z.DecBinary()
				_ = yym3985
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3984), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3979)
		} // end switch yys3979
	} // end for yyj3979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3986 int
	var yyb3986 bool
	var yyhl3986 bool = l >= 0
	yyj3986++
	if yyhl3986 {
		yyb3986 = yyj3986 > l
	} else {
		yyb3986 = r.CheckBreak()
	}
	if yyb3986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3986++
	if yyhl3986 {
		yyb3986 = yyj3986 > l
	} else {
		yyb3986 = r.CheckBreak()
	}
	if yyb3986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3986++
	if yyhl3986 {
		yyb3986 = yyj3986 > l
	} else {
		yyb3986 = r.CheckBreak()
	}
	if yyb3986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3989 := &x.ListMeta
		yym3990 := z.DecBinary()
		_ = yym3990
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3989) {
		} else {
			z.DecFallback(yyv3989, false)
		}
	}
	yyj3986++
	if yyhl3986 {
		yyb3986 = yyj3986 > l
	} else {
		yyb3986 = r.CheckBreak()
	}
	if yyb3986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3991 := &x.Items
		yym3992 := z.DecBinary()
		_ = yym3992
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3991), d)
		}
	}
	for {
		yyj3986++
		if yyhl3986 {
			yyb3986 = yyj3986 > l
		} else {
			yyb3986 = r.CheckBreak()
		}
		if yyb3986 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3986-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3993 := z.EncBinary()
		_ = yym3993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3994 := !z.EncBinary()
			yy2arr3994 := z.EncBasicHandle().StructToArray
			var yyq3994 [4]bool
			_, _, _ = yysep3994, yyq3994, yy2arr3994
			const yyr3994 bool = false
			yyq3994[0] = x.Kind != ""
			yyq3994[1] = x.APIVersion != ""
			yyq3994[2] = true
			var yynn3994 int
			if yyr3994 || yy2arr3994 {
				r.EncodeArrayStart(4)
			} else {
				yynn3994 = 1
				for _, b := range yyq3994 {
					if b {
						yynn3994++
					}
				}
				r.EncodeMapStart(yynn3994)
				yynn3994 = 0
			}
			if yyr3994 || yy2arr3994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3994[0] {
					yym3996 := z.EncBinary()
					_ = yym3996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3994[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3997 := z.EncBinary()
					_ = yym3997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3994 || yy2arr3994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3994[1] {
					yym3999 := z.EncBinary()
					_ = yym3999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3994[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4000 := z.EncBinary()
					_ = yym4000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3994 || yy2arr3994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3994[2] {
					yy4002 := &x.ListMeta
					yym4003 := z.EncBinary()
					_ = yym4003
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4002) {
					} else {
						z.EncFallback(yy4002)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3994[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4004 := &x.ListMeta
					yym4005 := z.EncBinary()
					_ = yym4005
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4004) {
					} else {
						z.EncFallback(yy4004)
					}
				}
			}
			if yyr3994 || yy2arr3994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3994 || yy2arr3994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4009 := z.DecBinary()
	_ = yym4009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4010 := r.ContainerType()
		if yyct4010 == codecSelferValueTypeMap1234 {
			yyl4010 := r.ReadMapStart()
			if yyl4010 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4010, d)
			}
		} else if yyct4010 == codecSelferValueTypeArray1234 {
			yyl4010 := r.ReadArrayStart()
			if yyl4010 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4010, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4011Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4011Slc
	var yyhl4011 bool = l >= 0
	for yyj4011 := 0; ; yyj4011++ {
		if yyhl4011 {
			if yyj4011 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4011Slc = r.DecodeBytes(yys4011Slc, true, true)
		yys4011 := string(yys4011Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4011 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4014 := &x.ListMeta
				yym4015 := z.DecBinary()
				_ = yym4015
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4014) {
				} else {
					z.DecFallback(yyv4014, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4016 := &x.Items
				yym4017 := z.DecBinary()
				_ = yym4017
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4016), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4011)
		} // end switch yys4011
	} // end for yyj4011
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4018 int
	var yyb4018 bool
	var yyhl4018 bool = l >= 0
	yyj4018++
	if yyhl4018 {
		yyb4018 = yyj4018 > l
	} else {
		yyb4018 = r.CheckBreak()
	}
	if yyb4018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4018++
	if yyhl4018 {
		yyb4018 = yyj4018 > l
	} else {
		yyb4018 = r.CheckBreak()
	}
	if yyb4018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4018++
	if yyhl4018 {
		yyb4018 = yyj4018 > l
	} else {
		yyb4018 = r.CheckBreak()
	}
	if yyb4018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4021 := &x.ListMeta
		yym4022 := z.DecBinary()
		_ = yym4022
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4021) {
		} else {
			z.DecFallback(yyv4021, false)
		}
	}
	yyj4018++
	if yyhl4018 {
		yyb4018 = yyj4018 > l
	} else {
		yyb4018 = r.CheckBreak()
	}
	if yyb4018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4023 := &x.Items
		yym4024 := z.DecBinary()
		_ = yym4024
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4023), d)
		}
	}
	for {
		yyj4018++
		if yyhl4018 {
			yyb4018 = yyj4018 > l
		} else {
			yyb4018 = r.CheckBreak()
		}
		if yyb4018 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4018-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4025 := z.EncBinary()
	_ = yym4025
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4026 := z.DecBinary()
	_ = yym4026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4027 := z.EncBinary()
		_ = yym4027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4028 := !z.EncBinary()
			yy2arr4028 := z.EncBasicHandle().StructToArray
			var yyq4028 [6]bool
			_, _, _ = yysep4028, yyq4028, yy2arr4028
			const yyr4028 bool = false
			yyq4028[0] = x.Type != ""
			yyq4028[1] = len(x.Max) != 0
			yyq4028[2] = len(x.Min) != 0
			yyq4028[3] = len(x.Default) != 0
			yyq4028[4] = len(x.DefaultRequest) != 0
			yyq4028[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4028 int
			if yyr4028 || yy2arr4028 {
				r.EncodeArrayStart(6)
			} else {
				yynn4028 = 0
				for _, b := range yyq4028 {
					if b {
						yynn4028++
					}
				}
				r.EncodeMapStart(yynn4028)
				yynn4028 = 0
			}
			if yyr4028 || yy2arr4028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4028[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4028[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4028 || yy2arr4028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4028[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4028[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4028 || yy2arr4028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4028[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4028[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4028 || yy2arr4028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4028[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4028[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4028 || yy2arr4028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4028[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4028[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4028 || yy2arr4028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4028[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4028[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4028 || yy2arr4028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4035 := z.DecBinary()
	_ = yym4035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4036 := r.ContainerType()
		if yyct4036 == codecSelferValueTypeMap1234 {
			yyl4036 := r.ReadMapStart()
			if yyl4036 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4036, d)
			}
		} else if yyct4036 == codecSelferValueTypeArray1234 {
			yyl4036 := r.ReadArrayStart()
			if yyl4036 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4037Slc
	var yyhl4037 bool = l >= 0
	for yyj4037 := 0; ; yyj4037++ {
		if yyhl4037 {
			if yyj4037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4037Slc = r.DecodeBytes(yys4037Slc, true, true)
		yys4037 := string(yys4037Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4037 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4039 := &x.Max
				yyv4039.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4040 := &x.Min
				yyv4040.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4041 := &x.Default
				yyv4041.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4042 := &x.DefaultRequest
				yyv4042.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4043 := &x.MaxLimitRequestRatio
				yyv4043.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4037)
		} // end switch yys4037
	} // end for yyj4037
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4044 int
	var yyb4044 bool
	var yyhl4044 bool = l >= 0
	yyj4044++
	if yyhl4044 {
		yyb4044 = yyj4044 > l
	} else {
		yyb4044 = r.CheckBreak()
	}
	if yyb4044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4044++
	if yyhl4044 {
		yyb4044 = yyj4044 > l
	} else {
		yyb4044 = r.CheckBreak()
	}
	if yyb4044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4046 := &x.Max
		yyv4046.CodecDecodeSelf(d)
	}
	yyj4044++
	if yyhl4044 {
		yyb4044 = yyj4044 > l
	} else {
		yyb4044 = r.CheckBreak()
	}
	if yyb4044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4047 := &x.Min
		yyv4047.CodecDecodeSelf(d)
	}
	yyj4044++
	if yyhl4044 {
		yyb4044 = yyj4044 > l
	} else {
		yyb4044 = r.CheckBreak()
	}
	if yyb4044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4048 := &x.Default
		yyv4048.CodecDecodeSelf(d)
	}
	yyj4044++
	if yyhl4044 {
		yyb4044 = yyj4044 > l
	} else {
		yyb4044 = r.CheckBreak()
	}
	if yyb4044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4049 := &x.DefaultRequest
		yyv4049.CodecDecodeSelf(d)
	}
	yyj4044++
	if yyhl4044 {
		yyb4044 = yyj4044 > l
	} else {
		yyb4044 = r.CheckBreak()
	}
	if yyb4044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4050 := &x.MaxLimitRequestRatio
		yyv4050.CodecDecodeSelf(d)
	}
	for {
		yyj4044++
		if yyhl4044 {
			yyb4044 = yyj4044 > l
		} else {
			yyb4044 = r.CheckBreak()
		}
		if yyb4044 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4044-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4051 := z.EncBinary()
		_ = yym4051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4052 := !z.EncBinary()
			yy2arr4052 := z.EncBasicHandle().StructToArray
			var yyq4052 [1]bool
			_, _, _ = yysep4052, yyq4052, yy2arr4052
			const yyr4052 bool = false
			var yynn4052 int
			if yyr4052 || yy2arr4052 {
				r.EncodeArrayStart(1)
			} else {
				yynn4052 = 1
				for _, b := range yyq4052 {
					if b {
						yynn4052++
					}
				}
				r.EncodeMapStart(yynn4052)
				yynn4052 = 0
			}
			if yyr4052 || yy2arr4052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4054 := z.EncBinary()
					_ = yym4054
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4055 := z.EncBinary()
					_ = yym4055
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4052 || yy2arr4052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4056 := z.DecBinary()
	_ = yym4056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4057 := r.ContainerType()
		if yyct4057 == codecSelferValueTypeMap1234 {
			yyl4057 := r.ReadMapStart()
			if yyl4057 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4057, d)
			}
		} else if yyct4057 == codecSelferValueTypeArray1234 {
			yyl4057 := r.ReadArrayStart()
			if yyl4057 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4057, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4058Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4058Slc
	var yyhl4058 bool = l >= 0
	for yyj4058 := 0; ; yyj4058++ {
		if yyhl4058 {
			if yyj4058 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4058Slc = r.DecodeBytes(yys4058Slc, true, true)
		yys4058 := string(yys4058Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4058 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4059 := &x.Limits
				yym4060 := z.DecBinary()
				_ = yym4060
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4059), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4058)
		} // end switch yys4058
	} // end for yyj4058
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4061 int
	var yyb4061 bool
	var yyhl4061 bool = l >= 0
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4062 := &x.Limits
		yym4063 := z.DecBinary()
		_ = yym4063
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4062), d)
		}
	}
	for {
		yyj4061++
		if yyhl4061 {
			yyb4061 = yyj4061 > l
		} else {
			yyb4061 = r.CheckBreak()
		}
		if yyb4061 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4061-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4064 := z.EncBinary()
		_ = yym4064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4065 := !z.EncBinary()
			yy2arr4065 := z.EncBasicHandle().StructToArray
			var yyq4065 [4]bool
			_, _, _ = yysep4065, yyq4065, yy2arr4065
			const yyr4065 bool = false
			yyq4065[0] = x.Kind != ""
			yyq4065[1] = x.APIVersion != ""
			yyq4065[2] = true
			yyq4065[3] = true
			var yynn4065 int
			if yyr4065 || yy2arr4065 {
				r.EncodeArrayStart(4)
			} else {
				yynn4065 = 0
				for _, b := range yyq4065 {
					if b {
						yynn4065++
					}
				}
				r.EncodeMapStart(yynn4065)
				yynn4065 = 0
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4065[0] {
					yym4067 := z.EncBinary()
					_ = yym4067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4065[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4068 := z.EncBinary()
					_ = yym4068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4065[1] {
					yym4070 := z.EncBinary()
					_ = yym4070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4065[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4071 := z.EncBinary()
					_ = yym4071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4065[2] {
					yy4073 := &x.ObjectMeta
					yy4073.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4065[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4074 := &x.ObjectMeta
					yy4074.CodecEncodeSelf(e)
				}
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4065[3] {
					yy4076 := &x.Spec
					yy4076.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4065[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4077 := &x.Spec
					yy4077.CodecEncodeSelf(e)
				}
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4078 := z.DecBinary()
	_ = yym4078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4079 := r.ContainerType()
		if yyct4079 == codecSelferValueTypeMap1234 {
			yyl4079 := r.ReadMapStart()
			if yyl4079 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4079, d)
			}
		} else if yyct4079 == codecSelferValueTypeArray1234 {
			yyl4079 := r.ReadArrayStart()
			if yyl4079 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4079, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4080Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4080Slc
	var yyhl4080 bool = l >= 0
	for yyj4080 := 0; ; yyj4080++ {
		if yyhl4080 {
			if yyj4080 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4080Slc = r.DecodeBytes(yys4080Slc, true, true)
		yys4080 := string(yys4080Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4080 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4083 := &x.ObjectMeta
				yyv4083.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4084 := &x.Spec
				yyv4084.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4080)
		} // end switch yys4080
	} // end for yyj4080
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4085 int
	var yyb4085 bool
	var yyhl4085 bool = l >= 0
	yyj4085++
	if yyhl4085 {
		yyb4085 = yyj4085 > l
	} else {
		yyb4085 = r.CheckBreak()
	}
	if yyb4085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4085++
	if yyhl4085 {
		yyb4085 = yyj4085 > l
	} else {
		yyb4085 = r.CheckBreak()
	}
	if yyb4085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4085++
	if yyhl4085 {
		yyb4085 = yyj4085 > l
	} else {
		yyb4085 = r.CheckBreak()
	}
	if yyb4085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4088 := &x.ObjectMeta
		yyv4088.CodecDecodeSelf(d)
	}
	yyj4085++
	if yyhl4085 {
		yyb4085 = yyj4085 > l
	} else {
		yyb4085 = r.CheckBreak()
	}
	if yyb4085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4089 := &x.Spec
		yyv4089.CodecDecodeSelf(d)
	}
	for {
		yyj4085++
		if yyhl4085 {
			yyb4085 = yyj4085 > l
		} else {
			yyb4085 = r.CheckBreak()
		}
		if yyb4085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4090 := z.EncBinary()
		_ = yym4090
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4091 := !z.EncBinary()
			yy2arr4091 := z.EncBasicHandle().StructToArray
			var yyq4091 [4]bool
			_, _, _ = yysep4091, yyq4091, yy2arr4091
			const yyr4091 bool = false
			yyq4091[0] = x.Kind != ""
			yyq4091[1] = x.APIVersion != ""
			yyq4091[2] = true
			var yynn4091 int
			if yyr4091 || yy2arr4091 {
				r.EncodeArrayStart(4)
			} else {
				yynn4091 = 1
				for _, b := range yyq4091 {
					if b {
						yynn4091++
					}
				}
				r.EncodeMapStart(yynn4091)
				yynn4091 = 0
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4091[0] {
					yym4093 := z.EncBinary()
					_ = yym4093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4091[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4094 := z.EncBinary()
					_ = yym4094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4091[1] {
					yym4096 := z.EncBinary()
					_ = yym4096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4091[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4097 := z.EncBinary()
					_ = yym4097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4091[2] {
					yy4099 := &x.ListMeta
					yym4100 := z.EncBinary()
					_ = yym4100
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4099) {
					} else {
						z.EncFallback(yy4099)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4091[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4101 := &x.ListMeta
					yym4102 := z.EncBinary()
					_ = yym4102
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4101) {
					} else {
						z.EncFallback(yy4101)
					}
				}
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4104 := z.EncBinary()
					_ = yym4104
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4106 := z.DecBinary()
	_ = yym4106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4107 := r.ContainerType()
		if yyct4107 == codecSelferValueTypeMap1234 {
			yyl4107 := r.ReadMapStart()
			if yyl4107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4107, d)
			}
		} else if yyct4107 == codecSelferValueTypeArray1234 {
			yyl4107 := r.ReadArrayStart()
			if yyl4107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4108Slc
	var yyhl4108 bool = l >= 0
	for yyj4108 := 0; ; yyj4108++ {
		if yyhl4108 {
			if yyj4108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4108Slc = r.DecodeBytes(yys4108Slc, true, true)
		yys4108 := string(yys4108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4108 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4111 := &x.ListMeta
				yym4112 := z.DecBinary()
				_ = yym4112
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4111) {
				} else {
					z.DecFallback(yyv4111, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4113 := &x.Items
				yym4114 := z.DecBinary()
				_ = yym4114
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4113), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4108)
		} // end switch yys4108
	} // end for yyj4108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4115 int
	var yyb4115 bool
	var yyhl4115 bool = l >= 0
	yyj4115++
	if yyhl4115 {
		yyb4115 = yyj4115 > l
	} else {
		yyb4115 = r.CheckBreak()
	}
	if yyb4115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4115++
	if yyhl4115 {
		yyb4115 = yyj4115 > l
	} else {
		yyb4115 = r.CheckBreak()
	}
	if yyb4115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4115++
	if yyhl4115 {
		yyb4115 = yyj4115 > l
	} else {
		yyb4115 = r.CheckBreak()
	}
	if yyb4115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4118 := &x.ListMeta
		yym4119 := z.DecBinary()
		_ = yym4119
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4118) {
		} else {
			z.DecFallback(yyv4118, false)
		}
	}
	yyj4115++
	if yyhl4115 {
		yyb4115 = yyj4115 > l
	} else {
		yyb4115 = r.CheckBreak()
	}
	if yyb4115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4120 := &x.Items
		yym4121 := z.DecBinary()
		_ = yym4121
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4120), d)
		}
	}
	for {
		yyj4115++
		if yyhl4115 {
			yyb4115 = yyj4115 > l
		} else {
			yyb4115 = r.CheckBreak()
		}
		if yyb4115 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4115-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4122 := z.EncBinary()
	_ = yym4122
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4123 := z.DecBinary()
	_ = yym4123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4124 := z.EncBinary()
		_ = yym4124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4125 := !z.EncBinary()
			yy2arr4125 := z.EncBasicHandle().StructToArray
			var yyq4125 [2]bool
			_, _, _ = yysep4125, yyq4125, yy2arr4125
			const yyr4125 bool = false
			yyq4125[0] = len(x.Hard) != 0
			yyq4125[1] = len(x.Scopes) != 0
			var yynn4125 int
			if yyr4125 || yy2arr4125 {
				r.EncodeArrayStart(2)
			} else {
				yynn4125 = 0
				for _, b := range yyq4125 {
					if b {
						yynn4125++
					}
				}
				r.EncodeMapStart(yynn4125)
				yynn4125 = 0
			}
			if yyr4125 || yy2arr4125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4125[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4125[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4125 || yy2arr4125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4125[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4128 := z.EncBinary()
						_ = yym4128
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4125[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4129 := z.EncBinary()
						_ = yym4129
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4125 || yy2arr4125 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4130 := z.DecBinary()
	_ = yym4130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4131 := r.ContainerType()
		if yyct4131 == codecSelferValueTypeMap1234 {
			yyl4131 := r.ReadMapStart()
			if yyl4131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4131, d)
			}
		} else if yyct4131 == codecSelferValueTypeArray1234 {
			yyl4131 := r.ReadArrayStart()
			if yyl4131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4132Slc
	var yyhl4132 bool = l >= 0
	for yyj4132 := 0; ; yyj4132++ {
		if yyhl4132 {
			if yyj4132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4132Slc = r.DecodeBytes(yys4132Slc, true, true)
		yys4132 := string(yys4132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4132 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4133 := &x.Hard
				yyv4133.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4134 := &x.Scopes
				yym4135 := z.DecBinary()
				_ = yym4135
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4134), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4132)
		} // end switch yys4132
	} // end for yyj4132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4136 int
	var yyb4136 bool
	var yyhl4136 bool = l >= 0
	yyj4136++
	if yyhl4136 {
		yyb4136 = yyj4136 > l
	} else {
		yyb4136 = r.CheckBreak()
	}
	if yyb4136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4137 := &x.Hard
		yyv4137.CodecDecodeSelf(d)
	}
	yyj4136++
	if yyhl4136 {
		yyb4136 = yyj4136 > l
	} else {
		yyb4136 = r.CheckBreak()
	}
	if yyb4136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4138 := &x.Scopes
		yym4139 := z.DecBinary()
		_ = yym4139
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4138), d)
		}
	}
	for {
		yyj4136++
		if yyhl4136 {
			yyb4136 = yyj4136 > l
		} else {
			yyb4136 = r.CheckBreak()
		}
		if yyb4136 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4136-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4140 := z.EncBinary()
		_ = yym4140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4141 := !z.EncBinary()
			yy2arr4141 := z.EncBasicHandle().StructToArray
			var yyq4141 [2]bool
			_, _, _ = yysep4141, yyq4141, yy2arr4141
			const yyr4141 bool = false
			yyq4141[0] = len(x.Hard) != 0
			yyq4141[1] = len(x.Used) != 0
			var yynn4141 int
			if yyr4141 || yy2arr4141 {
				r.EncodeArrayStart(2)
			} else {
				yynn4141 = 0
				for _, b := range yyq4141 {
					if b {
						yynn4141++
					}
				}
				r.EncodeMapStart(yynn4141)
				yynn4141 = 0
			}
			if yyr4141 || yy2arr4141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4141[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4141 || yy2arr4141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4141[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4141 || yy2arr4141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4144 := z.DecBinary()
	_ = yym4144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4145 := r.ContainerType()
		if yyct4145 == codecSelferValueTypeMap1234 {
			yyl4145 := r.ReadMapStart()
			if yyl4145 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4145, d)
			}
		} else if yyct4145 == codecSelferValueTypeArray1234 {
			yyl4145 := r.ReadArrayStart()
			if yyl4145 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4146Slc
	var yyhl4146 bool = l >= 0
	for yyj4146 := 0; ; yyj4146++ {
		if yyhl4146 {
			if yyj4146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4146Slc = r.DecodeBytes(yys4146Slc, true, true)
		yys4146 := string(yys4146Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4146 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4147 := &x.Hard
				yyv4147.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4148 := &x.Used
				yyv4148.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4146)
		} // end switch yys4146
	} // end for yyj4146
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4149 int
	var yyb4149 bool
	var yyhl4149 bool = l >= 0
	yyj4149++
	if yyhl4149 {
		yyb4149 = yyj4149 > l
	} else {
		yyb4149 = r.CheckBreak()
	}
	if yyb4149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4150 := &x.Hard
		yyv4150.CodecDecodeSelf(d)
	}
	yyj4149++
	if yyhl4149 {
		yyb4149 = yyj4149 > l
	} else {
		yyb4149 = r.CheckBreak()
	}
	if yyb4149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4151 := &x.Used
		yyv4151.CodecDecodeSelf(d)
	}
	for {
		yyj4149++
		if yyhl4149 {
			yyb4149 = yyj4149 > l
		} else {
			yyb4149 = r.CheckBreak()
		}
		if yyb4149 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4149-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4152 := z.EncBinary()
		_ = yym4152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4153 := !z.EncBinary()
			yy2arr4153 := z.EncBasicHandle().StructToArray
			var yyq4153 [5]bool
			_, _, _ = yysep4153, yyq4153, yy2arr4153
			const yyr4153 bool = false
			yyq4153[0] = x.Kind != ""
			yyq4153[1] = x.APIVersion != ""
			yyq4153[2] = true
			yyq4153[3] = true
			yyq4153[4] = true
			var yynn4153 int
			if yyr4153 || yy2arr4153 {
				r.EncodeArrayStart(5)
			} else {
				yynn4153 = 0
				for _, b := range yyq4153 {
					if b {
						yynn4153++
					}
				}
				r.EncodeMapStart(yynn4153)
				yynn4153 = 0
			}
			if yyr4153 || yy2arr4153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4153[0] {
					yym4155 := z.EncBinary()
					_ = yym4155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4153[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4156 := z.EncBinary()
					_ = yym4156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4153 || yy2arr4153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4153[1] {
					yym4158 := z.EncBinary()
					_ = yym4158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4153[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4159 := z.EncBinary()
					_ = yym4159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4153 || yy2arr4153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4153[2] {
					yy4161 := &x.ObjectMeta
					yy4161.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4153[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4162 := &x.ObjectMeta
					yy4162.CodecEncodeSelf(e)
				}
			}
			if yyr4153 || yy2arr4153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4153[3] {
					yy4164 := &x.Spec
					yy4164.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4153[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4165 := &x.Spec
					yy4165.CodecEncodeSelf(e)
				}
			}
			if yyr4153 || yy2arr4153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4153[4] {
					yy4167 := &x.Status
					yy4167.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4153[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4168 := &x.Status
					yy4168.CodecEncodeSelf(e)
				}
			}
			if yyr4153 || yy2arr4153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4169 := z.DecBinary()
	_ = yym4169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4170 := r.ContainerType()
		if yyct4170 == codecSelferValueTypeMap1234 {
			yyl4170 := r.ReadMapStart()
			if yyl4170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4170, d)
			}
		} else if yyct4170 == codecSelferValueTypeArray1234 {
			yyl4170 := r.ReadArrayStart()
			if yyl4170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4171Slc
	var yyhl4171 bool = l >= 0
	for yyj4171 := 0; ; yyj4171++ {
		if yyhl4171 {
			if yyj4171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4171Slc = r.DecodeBytes(yys4171Slc, true, true)
		yys4171 := string(yys4171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4171 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4174 := &x.ObjectMeta
				yyv4174.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4175 := &x.Spec
				yyv4175.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4176 := &x.Status
				yyv4176.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4171)
		} // end switch yys4171
	} // end for yyj4171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4177 int
	var yyb4177 bool
	var yyhl4177 bool = l >= 0
	yyj4177++
	if yyhl4177 {
		yyb4177 = yyj4177 > l
	} else {
		yyb4177 = r.CheckBreak()
	}
	if yyb4177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4177++
	if yyhl4177 {
		yyb4177 = yyj4177 > l
	} else {
		yyb4177 = r.CheckBreak()
	}
	if yyb4177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4177++
	if yyhl4177 {
		yyb4177 = yyj4177 > l
	} else {
		yyb4177 = r.CheckBreak()
	}
	if yyb4177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4180 := &x.ObjectMeta
		yyv4180.CodecDecodeSelf(d)
	}
	yyj4177++
	if yyhl4177 {
		yyb4177 = yyj4177 > l
	} else {
		yyb4177 = r.CheckBreak()
	}
	if yyb4177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4181 := &x.Spec
		yyv4181.CodecDecodeSelf(d)
	}
	yyj4177++
	if yyhl4177 {
		yyb4177 = yyj4177 > l
	} else {
		yyb4177 = r.CheckBreak()
	}
	if yyb4177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4182 := &x.Status
		yyv4182.CodecDecodeSelf(d)
	}
	for {
		yyj4177++
		if yyhl4177 {
			yyb4177 = yyj4177 > l
		} else {
			yyb4177 = r.CheckBreak()
		}
		if yyb4177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4183 := z.EncBinary()
		_ = yym4183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4184 := !z.EncBinary()
			yy2arr4184 := z.EncBasicHandle().StructToArray
			var yyq4184 [4]bool
			_, _, _ = yysep4184, yyq4184, yy2arr4184
			const yyr4184 bool = false
			yyq4184[0] = x.Kind != ""
			yyq4184[1] = x.APIVersion != ""
			yyq4184[2] = true
			var yynn4184 int
			if yyr4184 || yy2arr4184 {
				r.EncodeArrayStart(4)
			} else {
				yynn4184 = 1
				for _, b := range yyq4184 {
					if b {
						yynn4184++
					}
				}
				r.EncodeMapStart(yynn4184)
				yynn4184 = 0
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[0] {
					yym4186 := z.EncBinary()
					_ = yym4186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4187 := z.EncBinary()
					_ = yym4187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[1] {
					yym4189 := z.EncBinary()
					_ = yym4189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4190 := z.EncBinary()
					_ = yym4190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[2] {
					yy4192 := &x.ListMeta
					yym4193 := z.EncBinary()
					_ = yym4193
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4192) {
					} else {
						z.EncFallback(yy4192)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4184[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4194 := &x.ListMeta
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4194) {
					} else {
						z.EncFallback(yy4194)
					}
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4197 := z.EncBinary()
					_ = yym4197
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4198 := z.EncBinary()
					_ = yym4198
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4199 := z.DecBinary()
	_ = yym4199
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4200 := r.ContainerType()
		if yyct4200 == codecSelferValueTypeMap1234 {
			yyl4200 := r.ReadMapStart()
			if yyl4200 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4200, d)
			}
		} else if yyct4200 == codecSelferValueTypeArray1234 {
			yyl4200 := r.ReadArrayStart()
			if yyl4200 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4200, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4201Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4201Slc
	var yyhl4201 bool = l >= 0
	for yyj4201 := 0; ; yyj4201++ {
		if yyhl4201 {
			if yyj4201 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4201Slc = r.DecodeBytes(yys4201Slc, true, true)
		yys4201 := string(yys4201Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4201 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4204 := &x.ListMeta
				yym4205 := z.DecBinary()
				_ = yym4205
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4204) {
				} else {
					z.DecFallback(yyv4204, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4206 := &x.Items
				yym4207 := z.DecBinary()
				_ = yym4207
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4206), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4201)
		} // end switch yys4201
	} // end for yyj4201
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4208 int
	var yyb4208 bool
	var yyhl4208 bool = l >= 0
	yyj4208++
	if yyhl4208 {
		yyb4208 = yyj4208 > l
	} else {
		yyb4208 = r.CheckBreak()
	}
	if yyb4208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4208++
	if yyhl4208 {
		yyb4208 = yyj4208 > l
	} else {
		yyb4208 = r.CheckBreak()
	}
	if yyb4208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4208++
	if yyhl4208 {
		yyb4208 = yyj4208 > l
	} else {
		yyb4208 = r.CheckBreak()
	}
	if yyb4208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4211 := &x.ListMeta
		yym4212 := z.DecBinary()
		_ = yym4212
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4211) {
		} else {
			z.DecFallback(yyv4211, false)
		}
	}
	yyj4208++
	if yyhl4208 {
		yyb4208 = yyj4208 > l
	} else {
		yyb4208 = r.CheckBreak()
	}
	if yyb4208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4213 := &x.Items
		yym4214 := z.DecBinary()
		_ = yym4214
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4213), d)
		}
	}
	for {
		yyj4208++
		if yyhl4208 {
			yyb4208 = yyj4208 > l
		} else {
			yyb4208 = r.CheckBreak()
		}
		if yyb4208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4215 := z.EncBinary()
		_ = yym4215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4216 := !z.EncBinary()
			yy2arr4216 := z.EncBasicHandle().StructToArray
			var yyq4216 [5]bool
			_, _, _ = yysep4216, yyq4216, yy2arr4216
			const yyr4216 bool = false
			yyq4216[0] = x.Kind != ""
			yyq4216[1] = x.APIVersion != ""
			yyq4216[2] = true
			yyq4216[3] = len(x.Data) != 0
			yyq4216[4] = x.Type != ""
			var yynn4216 int
			if yyr4216 || yy2arr4216 {
				r.EncodeArrayStart(5)
			} else {
				yynn4216 = 0
				for _, b := range yyq4216 {
					if b {
						yynn4216++
					}
				}
				r.EncodeMapStart(yynn4216)
				yynn4216 = 0
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[0] {
					yym4218 := z.EncBinary()
					_ = yym4218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4216[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4219 := z.EncBinary()
					_ = yym4219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[1] {
					yym4221 := z.EncBinary()
					_ = yym4221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4216[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4222 := z.EncBinary()
					_ = yym4222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[2] {
					yy4224 := &x.ObjectMeta
					yy4224.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4216[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4225 := &x.ObjectMeta
					yy4225.CodecEncodeSelf(e)
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4227 := z.EncBinary()
						_ = yym4227
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4216[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4228 := z.EncBinary()
						_ = yym4228
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4216[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4230 := z.DecBinary()
	_ = yym4230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4231 := r.ContainerType()
		if yyct4231 == codecSelferValueTypeMap1234 {
			yyl4231 := r.ReadMapStart()
			if yyl4231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4231, d)
			}
		} else if yyct4231 == codecSelferValueTypeArray1234 {
			yyl4231 := r.ReadArrayStart()
			if yyl4231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4232Slc
	var yyhl4232 bool = l >= 0
	for yyj4232 := 0; ; yyj4232++ {
		if yyhl4232 {
			if yyj4232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4232Slc = r.DecodeBytes(yys4232Slc, true, true)
		yys4232 := string(yys4232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4232 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4235 := &x.ObjectMeta
				yyv4235.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4236 := &x.Data
				yym4237 := z.DecBinary()
				_ = yym4237
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4236), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4232)
		} // end switch yys4232
	} // end for yyj4232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4239 int
	var yyb4239 bool
	var yyhl4239 bool = l >= 0
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4242 := &x.ObjectMeta
		yyv4242.CodecDecodeSelf(d)
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4243 := &x.Data
		yym4244 := z.DecBinary()
		_ = yym4244
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4243), d)
		}
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4239++
		if yyhl4239 {
			yyb4239 = yyj4239 > l
		} else {
			yyb4239 = r.CheckBreak()
		}
		if yyb4239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4246 := z.EncBinary()
	_ = yym4246
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4247 := z.DecBinary()
	_ = yym4247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4248 := z.EncBinary()
		_ = yym4248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4249 := !z.EncBinary()
			yy2arr4249 := z.EncBasicHandle().StructToArray
			var yyq4249 [4]bool
			_, _, _ = yysep4249, yyq4249, yy2arr4249
			const yyr4249 bool = false
			yyq4249[0] = x.Kind != ""
			yyq4249[1] = x.APIVersion != ""
			yyq4249[2] = true
			var yynn4249 int
			if yyr4249 || yy2arr4249 {
				r.EncodeArrayStart(4)
			} else {
				yynn4249 = 1
				for _, b := range yyq4249 {
					if b {
						yynn4249++
					}
				}
				r.EncodeMapStart(yynn4249)
				yynn4249 = 0
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[0] {
					yym4251 := z.EncBinary()
					_ = yym4251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4249[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4252 := z.EncBinary()
					_ = yym4252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[1] {
					yym4254 := z.EncBinary()
					_ = yym4254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4249[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4255 := z.EncBinary()
					_ = yym4255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[2] {
					yy4257 := &x.ListMeta
					yym4258 := z.EncBinary()
					_ = yym4258
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4257) {
					} else {
						z.EncFallback(yy4257)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4259 := &x.ListMeta
					yym4260 := z.EncBinary()
					_ = yym4260
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4259) {
					} else {
						z.EncFallback(yy4259)
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4262 := z.EncBinary()
					_ = yym4262
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4263 := z.EncBinary()
					_ = yym4263
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4264 := z.DecBinary()
	_ = yym4264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4265 := r.ContainerType()
		if yyct4265 == codecSelferValueTypeMap1234 {
			yyl4265 := r.ReadMapStart()
			if yyl4265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4265, d)
			}
		} else if yyct4265 == codecSelferValueTypeArray1234 {
			yyl4265 := r.ReadArrayStart()
			if yyl4265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4266Slc
	var yyhl4266 bool = l >= 0
	for yyj4266 := 0; ; yyj4266++ {
		if yyhl4266 {
			if yyj4266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4266Slc = r.DecodeBytes(yys4266Slc, true, true)
		yys4266 := string(yys4266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4266 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4269 := &x.ListMeta
				yym4270 := z.DecBinary()
				_ = yym4270
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4269) {
				} else {
					z.DecFallback(yyv4269, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4271 := &x.Items
				yym4272 := z.DecBinary()
				_ = yym4272
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4271), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4266)
		} // end switch yys4266
	} // end for yyj4266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4273 int
	var yyb4273 bool
	var yyhl4273 bool = l >= 0
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4276 := &x.ListMeta
		yym4277 := z.DecBinary()
		_ = yym4277
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4276) {
		} else {
			z.DecFallback(yyv4276, false)
		}
	}
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4278 := &x.Items
		yym4279 := z.DecBinary()
		_ = yym4279
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4278), d)
		}
	}
	for {
		yyj4273++
		if yyhl4273 {
			yyb4273 = yyj4273 > l
		} else {
			yyb4273 = r.CheckBreak()
		}
		if yyb4273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4280 := z.EncBinary()
		_ = yym4280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4281 := !z.EncBinary()
			yy2arr4281 := z.EncBasicHandle().StructToArray
			var yyq4281 [4]bool
			_, _, _ = yysep4281, yyq4281, yy2arr4281
			const yyr4281 bool = false
			yyq4281[0] = x.Kind != ""
			yyq4281[1] = x.APIVersion != ""
			yyq4281[2] = true
			yyq4281[3] = len(x.Data) != 0
			var yynn4281 int
			if yyr4281 || yy2arr4281 {
				r.EncodeArrayStart(4)
			} else {
				yynn4281 = 0
				for _, b := range yyq4281 {
					if b {
						yynn4281++
					}
				}
				r.EncodeMapStart(yynn4281)
				yynn4281 = 0
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4281[0] {
					yym4283 := z.EncBinary()
					_ = yym4283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4281[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4284 := z.EncBinary()
					_ = yym4284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4281[1] {
					yym4286 := z.EncBinary()
					_ = yym4286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4287 := z.EncBinary()
					_ = yym4287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4281[2] {
					yy4289 := &x.ObjectMeta
					yy4289.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4290 := &x.ObjectMeta
					yy4290.CodecEncodeSelf(e)
				}
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4281[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4292 := z.EncBinary()
						_ = yym4292
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4281[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4293 := z.EncBinary()
						_ = yym4293
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4294 := z.DecBinary()
	_ = yym4294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4295 := r.ContainerType()
		if yyct4295 == codecSelferValueTypeMap1234 {
			yyl4295 := r.ReadMapStart()
			if yyl4295 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4295, d)
			}
		} else if yyct4295 == codecSelferValueTypeArray1234 {
			yyl4295 := r.ReadArrayStart()
			if yyl4295 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4296Slc
	var yyhl4296 bool = l >= 0
	for yyj4296 := 0; ; yyj4296++ {
		if yyhl4296 {
			if yyj4296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4296Slc = r.DecodeBytes(yys4296Slc, true, true)
		yys4296 := string(yys4296Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4296 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4299 := &x.ObjectMeta
				yyv4299.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4300 := &x.Data
				yym4301 := z.DecBinary()
				_ = yym4301
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4300, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4296)
		} // end switch yys4296
	} // end for yyj4296
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4302 int
	var yyb4302 bool
	var yyhl4302 bool = l >= 0
	yyj4302++
	if yyhl4302 {
		yyb4302 = yyj4302 > l
	} else {
		yyb4302 = r.CheckBreak()
	}
	if yyb4302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4302++
	if yyhl4302 {
		yyb4302 = yyj4302 > l
	} else {
		yyb4302 = r.CheckBreak()
	}
	if yyb4302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4302++
	if yyhl4302 {
		yyb4302 = yyj4302 > l
	} else {
		yyb4302 = r.CheckBreak()
	}
	if yyb4302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4305 := &x.ObjectMeta
		yyv4305.CodecDecodeSelf(d)
	}
	yyj4302++
	if yyhl4302 {
		yyb4302 = yyj4302 > l
	} else {
		yyb4302 = r.CheckBreak()
	}
	if yyb4302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4306 := &x.Data
		yym4307 := z.DecBinary()
		_ = yym4307
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4306, false, d)
		}
	}
	for {
		yyj4302++
		if yyhl4302 {
			yyb4302 = yyj4302 > l
		} else {
			yyb4302 = r.CheckBreak()
		}
		if yyb4302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4308 := z.EncBinary()
		_ = yym4308
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4309 := !z.EncBinary()
			yy2arr4309 := z.EncBasicHandle().StructToArray
			var yyq4309 [4]bool
			_, _, _ = yysep4309, yyq4309, yy2arr4309
			const yyr4309 bool = false
			yyq4309[0] = x.Kind != ""
			yyq4309[1] = x.APIVersion != ""
			yyq4309[2] = true
			var yynn4309 int
			if yyr4309 || yy2arr4309 {
				r.EncodeArrayStart(4)
			} else {
				yynn4309 = 1
				for _, b := range yyq4309 {
					if b {
						yynn4309++
					}
				}
				r.EncodeMapStart(yynn4309)
				yynn4309 = 0
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4309[0] {
					yym4311 := z.EncBinary()
					_ = yym4311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4309[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4312 := z.EncBinary()
					_ = yym4312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4309[1] {
					yym4314 := z.EncBinary()
					_ = yym4314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4309[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4315 := z.EncBinary()
					_ = yym4315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4309[2] {
					yy4317 := &x.ListMeta
					yym4318 := z.EncBinary()
					_ = yym4318
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4317) {
					} else {
						z.EncFallback(yy4317)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4309[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4319 := &x.ListMeta
					yym4320 := z.EncBinary()
					_ = yym4320
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4319) {
					} else {
						z.EncFallback(yy4319)
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4322 := z.EncBinary()
					_ = yym4322
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4323 := z.EncBinary()
					_ = yym4323
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4324 := z.DecBinary()
	_ = yym4324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4325 := r.ContainerType()
		if yyct4325 == codecSelferValueTypeMap1234 {
			yyl4325 := r.ReadMapStart()
			if yyl4325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4325, d)
			}
		} else if yyct4325 == codecSelferValueTypeArray1234 {
			yyl4325 := r.ReadArrayStart()
			if yyl4325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4326Slc
	var yyhl4326 bool = l >= 0
	for yyj4326 := 0; ; yyj4326++ {
		if yyhl4326 {
			if yyj4326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4326Slc = r.DecodeBytes(yys4326Slc, true, true)
		yys4326 := string(yys4326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4326 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4329 := &x.ListMeta
				yym4330 := z.DecBinary()
				_ = yym4330
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4329) {
				} else {
					z.DecFallback(yyv4329, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4331 := &x.Items
				yym4332 := z.DecBinary()
				_ = yym4332
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4331), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4326)
		} // end switch yys4326
	} // end for yyj4326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4333 int
	var yyb4333 bool
	var yyhl4333 bool = l >= 0
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4336 := &x.ListMeta
		yym4337 := z.DecBinary()
		_ = yym4337
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4336) {
		} else {
			z.DecFallback(yyv4336, false)
		}
	}
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4338 := &x.Items
		yym4339 := z.DecBinary()
		_ = yym4339
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4338), d)
		}
	}
	for {
		yyj4333++
		if yyhl4333 {
			yyb4333 = yyj4333 > l
		} else {
			yyb4333 = r.CheckBreak()
		}
		if yyb4333 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4333-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4340 := z.EncBinary()
	_ = yym4340
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4341 := z.DecBinary()
	_ = yym4341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4342 := z.EncBinary()
	_ = yym4342
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4343 := z.DecBinary()
	_ = yym4343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4344 := z.EncBinary()
		_ = yym4344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4345 := !z.EncBinary()
			yy2arr4345 := z.EncBasicHandle().StructToArray
			var yyq4345 [4]bool
			_, _, _ = yysep4345, yyq4345, yy2arr4345
			const yyr4345 bool = false
			yyq4345[2] = x.Message != ""
			yyq4345[3] = x.Error != ""
			var yynn4345 int
			if yyr4345 || yy2arr4345 {
				r.EncodeArrayStart(4)
			} else {
				yynn4345 = 2
				for _, b := range yyq4345 {
					if b {
						yynn4345++
					}
				}
				r.EncodeMapStart(yynn4345)
				yynn4345 = 0
			}
			if yyr4345 || yy2arr4345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4345 || yy2arr4345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4345 || yy2arr4345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4345[2] {
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4345[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4350 := z.EncBinary()
					_ = yym4350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4345 || yy2arr4345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4345[3] {
					yym4352 := z.EncBinary()
					_ = yym4352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4345[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4353 := z.EncBinary()
					_ = yym4353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4345 || yy2arr4345 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4354 := z.DecBinary()
	_ = yym4354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4355 := r.ContainerType()
		if yyct4355 == codecSelferValueTypeMap1234 {
			yyl4355 := r.ReadMapStart()
			if yyl4355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4355, d)
			}
		} else if yyct4355 == codecSelferValueTypeArray1234 {
			yyl4355 := r.ReadArrayStart()
			if yyl4355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4356Slc
	var yyhl4356 bool = l >= 0
	for yyj4356 := 0; ; yyj4356++ {
		if yyhl4356 {
			if yyj4356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4356Slc = r.DecodeBytes(yys4356Slc, true, true)
		yys4356 := string(yys4356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4356 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4356)
		} // end switch yys4356
	} // end for yyj4356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4361 int
	var yyb4361 bool
	var yyhl4361 bool = l >= 0
	yyj4361++
	if yyhl4361 {
		yyb4361 = yyj4361 > l
	} else {
		yyb4361 = r.CheckBreak()
	}
	if yyb4361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4361++
	if yyhl4361 {
		yyb4361 = yyj4361 > l
	} else {
		yyb4361 = r.CheckBreak()
	}
	if yyb4361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4361++
	if yyhl4361 {
		yyb4361 = yyj4361 > l
	} else {
		yyb4361 = r.CheckBreak()
	}
	if yyb4361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4361++
	if yyhl4361 {
		yyb4361 = yyj4361 > l
	} else {
		yyb4361 = r.CheckBreak()
	}
	if yyb4361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4361++
		if yyhl4361 {
			yyb4361 = yyj4361 > l
		} else {
			yyb4361 = r.CheckBreak()
		}
		if yyb4361 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4361-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4366 := z.EncBinary()
		_ = yym4366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4367 := !z.EncBinary()
			yy2arr4367 := z.EncBasicHandle().StructToArray
			var yyq4367 [4]bool
			_, _, _ = yysep4367, yyq4367, yy2arr4367
			const yyr4367 bool = false
			yyq4367[0] = x.Kind != ""
			yyq4367[1] = x.APIVersion != ""
			yyq4367[2] = true
			yyq4367[3] = len(x.Conditions) != 0
			var yynn4367 int
			if yyr4367 || yy2arr4367 {
				r.EncodeArrayStart(4)
			} else {
				yynn4367 = 0
				for _, b := range yyq4367 {
					if b {
						yynn4367++
					}
				}
				r.EncodeMapStart(yynn4367)
				yynn4367 = 0
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[0] {
					yym4369 := z.EncBinary()
					_ = yym4369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4370 := z.EncBinary()
					_ = yym4370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[1] {
					yym4372 := z.EncBinary()
					_ = yym4372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4367[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4373 := z.EncBinary()
					_ = yym4373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[2] {
					yy4375 := &x.ObjectMeta
					yy4375.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4367[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4376 := &x.ObjectMeta
					yy4376.CodecEncodeSelf(e)
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4378 := z.EncBinary()
						_ = yym4378
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4367[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4379 := z.EncBinary()
						_ = yym4379
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4380 := z.DecBinary()
	_ = yym4380
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4381 := r.ContainerType()
		if yyct4381 == codecSelferValueTypeMap1234 {
			yyl4381 := r.ReadMapStart()
			if yyl4381 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4381, d)
			}
		} else if yyct4381 == codecSelferValueTypeArray1234 {
			yyl4381 := r.ReadArrayStart()
			if yyl4381 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4381, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4382Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4382Slc
	var yyhl4382 bool = l >= 0
	for yyj4382 := 0; ; yyj4382++ {
		if yyhl4382 {
			if yyj4382 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4382Slc = r.DecodeBytes(yys4382Slc, true, true)
		yys4382 := string(yys4382Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4382 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4385 := &x.ObjectMeta
				yyv4385.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4386 := &x.Conditions
				yym4387 := z.DecBinary()
				_ = yym4387
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4386), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4382)
		} // end switch yys4382
	} // end for yyj4382
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4388 int
	var yyb4388 bool
	var yyhl4388 bool = l >= 0
	yyj4388++
	if yyhl4388 {
		yyb4388 = yyj4388 > l
	} else {
		yyb4388 = r.CheckBreak()
	}
	if yyb4388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4388++
	if yyhl4388 {
		yyb4388 = yyj4388 > l
	} else {
		yyb4388 = r.CheckBreak()
	}
	if yyb4388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4388++
	if yyhl4388 {
		yyb4388 = yyj4388 > l
	} else {
		yyb4388 = r.CheckBreak()
	}
	if yyb4388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4391 := &x.ObjectMeta
		yyv4391.CodecDecodeSelf(d)
	}
	yyj4388++
	if yyhl4388 {
		yyb4388 = yyj4388 > l
	} else {
		yyb4388 = r.CheckBreak()
	}
	if yyb4388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4392 := &x.Conditions
		yym4393 := z.DecBinary()
		_ = yym4393
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4392), d)
		}
	}
	for {
		yyj4388++
		if yyhl4388 {
			yyb4388 = yyj4388 > l
		} else {
			yyb4388 = r.CheckBreak()
		}
		if yyb4388 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4388-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4394 := z.EncBinary()
		_ = yym4394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4395 := !z.EncBinary()
			yy2arr4395 := z.EncBasicHandle().StructToArray
			var yyq4395 [4]bool
			_, _, _ = yysep4395, yyq4395, yy2arr4395
			const yyr4395 bool = false
			yyq4395[0] = x.Kind != ""
			yyq4395[1] = x.APIVersion != ""
			yyq4395[2] = true
			var yynn4395 int
			if yyr4395 || yy2arr4395 {
				r.EncodeArrayStart(4)
			} else {
				yynn4395 = 1
				for _, b := range yyq4395 {
					if b {
						yynn4395++
					}
				}
				r.EncodeMapStart(yynn4395)
				yynn4395 = 0
			}
			if yyr4395 || yy2arr4395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4395[0] {
					yym4397 := z.EncBinary()
					_ = yym4397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4395[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4398 := z.EncBinary()
					_ = yym4398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4395 || yy2arr4395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4395[1] {
					yym4400 := z.EncBinary()
					_ = yym4400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4395[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4401 := z.EncBinary()
					_ = yym4401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4395 || yy2arr4395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4395[2] {
					yy4403 := &x.ListMeta
					yym4404 := z.EncBinary()
					_ = yym4404
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4403) {
					} else {
						z.EncFallback(yy4403)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4395[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4405 := &x.ListMeta
					yym4406 := z.EncBinary()
					_ = yym4406
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4405) {
					} else {
						z.EncFallback(yy4405)
					}
				}
			}
			if yyr4395 || yy2arr4395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4408 := z.EncBinary()
					_ = yym4408
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4409 := z.EncBinary()
					_ = yym4409
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4395 || yy2arr4395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4410 := z.DecBinary()
	_ = yym4410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4411 := r.ContainerType()
		if yyct4411 == codecSelferValueTypeMap1234 {
			yyl4411 := r.ReadMapStart()
			if yyl4411 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4411, d)
			}
		} else if yyct4411 == codecSelferValueTypeArray1234 {
			yyl4411 := r.ReadArrayStart()
			if yyl4411 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4412Slc
	var yyhl4412 bool = l >= 0
	for yyj4412 := 0; ; yyj4412++ {
		if yyhl4412 {
			if yyj4412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4412Slc = r.DecodeBytes(yys4412Slc, true, true)
		yys4412 := string(yys4412Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4412 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4415 := &x.ListMeta
				yym4416 := z.DecBinary()
				_ = yym4416
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4415) {
				} else {
					z.DecFallback(yyv4415, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4417 := &x.Items
				yym4418 := z.DecBinary()
				_ = yym4418
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4417), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4412)
		} // end switch yys4412
	} // end for yyj4412
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4419 int
	var yyb4419 bool
	var yyhl4419 bool = l >= 0
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4422 := &x.ListMeta
		yym4423 := z.DecBinary()
		_ = yym4423
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4422) {
		} else {
			z.DecFallback(yyv4422, false)
		}
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4424 := &x.Items
		yym4425 := z.DecBinary()
		_ = yym4425
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4424), d)
		}
	}
	for {
		yyj4419++
		if yyhl4419 {
			yyb4419 = yyj4419 > l
		} else {
			yyb4419 = r.CheckBreak()
		}
		if yyb4419 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4419-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4426 := z.EncBinary()
		_ = yym4426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4427 := !z.EncBinary()
			yy2arr4427 := z.EncBasicHandle().StructToArray
			var yyq4427 [6]bool
			_, _, _ = yysep4427, yyq4427, yy2arr4427
			const yyr4427 bool = false
			yyq4427[0] = x.Capabilities != nil
			yyq4427[1] = x.Privileged != nil
			yyq4427[2] = x.SELinuxOptions != nil
			yyq4427[3] = x.RunAsUser != nil
			yyq4427[4] = x.RunAsNonRoot != nil
			yyq4427[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4427 int
			if yyr4427 || yy2arr4427 {
				r.EncodeArrayStart(6)
			} else {
				yynn4427 = 0
				for _, b := range yyq4427 {
					if b {
						yynn4427++
					}
				}
				r.EncodeMapStart(yynn4427)
				yynn4427 = 0
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4430 := *x.Privileged
						yym4431 := z.EncBinary()
						_ = yym4431
						if false {
						} else {
							r.EncodeBool(bool(yy4430))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4432 := *x.Privileged
						yym4433 := z.EncBinary()
						_ = yym4433
						if false {
						} else {
							r.EncodeBool(bool(yy4432))
						}
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4436 := *x.RunAsUser
						yym4437 := z.EncBinary()
						_ = yym4437
						if false {
						} else {
							r.EncodeInt(int64(yy4436))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4438 := *x.RunAsUser
						yym4439 := z.EncBinary()
						_ = yym4439
						if false {
						} else {
							r.EncodeInt(int64(yy4438))
						}
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4441 := *x.RunAsNonRoot
						yym4442 := z.EncBinary()
						_ = yym4442
						if false {
						} else {
							r.EncodeBool(bool(yy4441))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4443 := *x.RunAsNonRoot
						yym4444 := z.EncBinary()
						_ = yym4444
						if false {
						} else {
							r.EncodeBool(bool(yy4443))
						}
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4446 := *x.ReadOnlyRootFilesystem
						yym4447 := z.EncBinary()
						_ = yym4447
						if false {
						} else {
							r.EncodeBool(bool(yy4446))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4448 := *x.ReadOnlyRootFilesystem
						yym4449 := z.EncBinary()
						_ = yym4449
						if false {
						} else {
							r.EncodeBool(bool(yy4448))
						}
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4450 := z.DecBinary()
	_ = yym4450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4451 := r.ContainerType()
		if yyct4451 == codecSelferValueTypeMap1234 {
			yyl4451 := r.ReadMapStart()
			if yyl4451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4451, d)
			}
		} else if yyct4451 == codecSelferValueTypeArray1234 {
			yyl4451 := r.ReadArrayStart()
			if yyl4451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4452Slc
	var yyhl4452 bool = l >= 0
	for yyj4452 := 0; ; yyj4452++ {
		if yyhl4452 {
			if yyj4452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4452Slc = r.DecodeBytes(yys4452Slc, true, true)
		yys4452 := string(yys4452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4452 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4455 := z.DecBinary()
				_ = yym4455
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4458 := z.DecBinary()
				_ = yym4458
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4460 := z.DecBinary()
				_ = yym4460
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4462 := z.DecBinary()
				_ = yym4462
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4452)
		} // end switch yys4452
	} // end for yyj4452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4463 int
	var yyb4463 bool
	var yyhl4463 bool = l >= 0
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4466 := z.DecBinary()
		_ = yym4466
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4469 := z.DecBinary()
		_ = yym4469
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4471 := z.DecBinary()
		_ = yym4471
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4473 := z.DecBinary()
		_ = yym4473
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4463++
		if yyhl4463 {
			yyb4463 = yyj4463 > l
		} else {
			yyb4463 = r.CheckBreak()
		}
		if yyb4463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4474 := z.EncBinary()
		_ = yym4474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4475 := !z.EncBinary()
			yy2arr4475 := z.EncBasicHandle().StructToArray
			var yyq4475 [4]bool
			_, _, _ = yysep4475, yyq4475, yy2arr4475
			const yyr4475 bool = false
			yyq4475[0] = x.User != ""
			yyq4475[1] = x.Role != ""
			yyq4475[2] = x.Type != ""
			yyq4475[3] = x.Level != ""
			var yynn4475 int
			if yyr4475 || yy2arr4475 {
				r.EncodeArrayStart(4)
			} else {
				yynn4475 = 0
				for _, b := range yyq4475 {
					if b {
						yynn4475++
					}
				}
				r.EncodeMapStart(yynn4475)
				yynn4475 = 0
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4475[0] {
					yym4477 := z.EncBinary()
					_ = yym4477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4478 := z.EncBinary()
					_ = yym4478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4475[1] {
					yym4480 := z.EncBinary()
					_ = yym4480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4481 := z.EncBinary()
					_ = yym4481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4475[2] {
					yym4483 := z.EncBinary()
					_ = yym4483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4484 := z.EncBinary()
					_ = yym4484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4475[3] {
					yym4486 := z.EncBinary()
					_ = yym4486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4475[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4487 := z.EncBinary()
					_ = yym4487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4488 := z.DecBinary()
	_ = yym4488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4489 := r.ContainerType()
		if yyct4489 == codecSelferValueTypeMap1234 {
			yyl4489 := r.ReadMapStart()
			if yyl4489 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4489, d)
			}
		} else if yyct4489 == codecSelferValueTypeArray1234 {
			yyl4489 := r.ReadArrayStart()
			if yyl4489 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4490Slc
	var yyhl4490 bool = l >= 0
	for yyj4490 := 0; ; yyj4490++ {
		if yyhl4490 {
			if yyj4490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4490Slc = r.DecodeBytes(yys4490Slc, true, true)
		yys4490 := string(yys4490Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4490 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4490)
		} // end switch yys4490
	} // end for yyj4490
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4495 int
	var yyb4495 bool
	var yyhl4495 bool = l >= 0
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4495++
		if yyhl4495 {
			yyb4495 = yyj4495 > l
		} else {
			yyb4495 = r.CheckBreak()
		}
		if yyb4495 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4495-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4500 := z.EncBinary()
		_ = yym4500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4501 := !z.EncBinary()
			yy2arr4501 := z.EncBasicHandle().StructToArray
			var yyq4501 [5]bool
			_, _, _ = yysep4501, yyq4501, yy2arr4501
			const yyr4501 bool = false
			yyq4501[0] = x.Kind != ""
			yyq4501[1] = x.APIVersion != ""
			yyq4501[2] = true
			var yynn4501 int
			if yyr4501 || yy2arr4501 {
				r.EncodeArrayStart(5)
			} else {
				yynn4501 = 2
				for _, b := range yyq4501 {
					if b {
						yynn4501++
					}
				}
				r.EncodeMapStart(yynn4501)
				yynn4501 = 0
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4501[0] {
					yym4503 := z.EncBinary()
					_ = yym4503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4501[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4504 := z.EncBinary()
					_ = yym4504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4501[1] {
					yym4506 := z.EncBinary()
					_ = yym4506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4501[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4507 := z.EncBinary()
					_ = yym4507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4501[2] {
					yy4509 := &x.ObjectMeta
					yy4509.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4501[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4510 := &x.ObjectMeta
					yy4510.CodecEncodeSelf(e)
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4512 := z.EncBinary()
				_ = yym4512
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4513 := z.EncBinary()
				_ = yym4513
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4515 := z.EncBinary()
					_ = yym4515
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4516 := z.EncBinary()
					_ = yym4516
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4517 := z.DecBinary()
	_ = yym4517
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4518 := r.ContainerType()
		if yyct4518 == codecSelferValueTypeMap1234 {
			yyl4518 := r.ReadMapStart()
			if yyl4518 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4518, d)
			}
		} else if yyct4518 == codecSelferValueTypeArray1234 {
			yyl4518 := r.ReadArrayStart()
			if yyl4518 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4518, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4519Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4519Slc
	var yyhl4519 bool = l >= 0
	for yyj4519 := 0; ; yyj4519++ {
		if yyhl4519 {
			if yyj4519 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4519Slc = r.DecodeBytes(yys4519Slc, true, true)
		yys4519 := string(yys4519Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4519 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4522 := &x.ObjectMeta
				yyv4522.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4524 := &x.Data
				yym4525 := z.DecBinary()
				_ = yym4525
				if false {
				} else {
					*yyv4524 = r.DecodeBytes(*(*[]byte)(yyv4524), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4519)
		} // end switch yys4519
	} // end for yyj4519
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4526 int
	var yyb4526 bool
	var yyhl4526 bool = l >= 0
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4529 := &x.ObjectMeta
		yyv4529.CodecDecodeSelf(d)
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4531 := &x.Data
		yym4532 := z.DecBinary()
		_ = yym4532
		if false {
		} else {
			*yyv4531 = r.DecodeBytes(*(*[]byte)(yyv4531), false, false)
		}
	}
	for {
		yyj4526++
		if yyhl4526 {
			yyb4526 = yyj4526 > l
		} else {
			yyb4526 = r.CheckBreak()
		}
		if yyb4526 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4526-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4533 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4534 := &yyv4533
		yy4534.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4535 := *v
	yyh4535, yyl4535 := z.DecSliceHelperStart()
	var yyc4535 bool
	if yyl4535 == 0 {
		if yyv4535 == nil {
			yyv4535 = []OwnerReference{}
			yyc4535 = true
		} else if len(yyv4535) != 0 {
			yyv4535 = yyv4535[:0]
			yyc4535 = true
		}
	} else if yyl4535 > 0 {
		var yyrr4535, yyrl4535 int
		var yyrt4535 bool
		if yyl4535 > cap(yyv4535) {

			yyrg4535 := len(yyv4535) > 0
			yyv24535 := yyv4535
			yyrl4535, yyrt4535 = z.DecInferLen(yyl4535, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4535 {
				if yyrl4535 <= cap(yyv4535) {
					yyv4535 = yyv4535[:yyrl4535]
				} else {
					yyv4535 = make([]OwnerReference, yyrl4535)
				}
			} else {
				yyv4535 = make([]OwnerReference, yyrl4535)
			}
			yyc4535 = true
			yyrr4535 = len(yyv4535)
			if yyrg4535 {
				copy(yyv4535, yyv24535)
			}
		} else if yyl4535 != len(yyv4535) {
			yyv4535 = yyv4535[:yyl4535]
			yyc4535 = true
		}
		yyj4535 := 0
		for ; yyj4535 < yyrr4535; yyj4535++ {
			yyh4535.ElemContainerState(yyj4535)
			if r.TryDecodeAsNil() {
				yyv4535[yyj4535] = OwnerReference{}
			} else {
				yyv4536 := &yyv4535[yyj4535]
				yyv4536.CodecDecodeSelf(d)
			}

		}
		if yyrt4535 {
			for ; yyj4535 < yyl4535; yyj4535++ {
				yyv4535 = append(yyv4535, OwnerReference{})
				yyh4535.ElemContainerState(yyj4535)
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = OwnerReference{}
				} else {
					yyv4537 := &yyv4535[yyj4535]
					yyv4537.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4535 := 0
		for ; !r.CheckBreak(); yyj4535++ {

			if yyj4535 >= len(yyv4535) {
				yyv4535 = append(yyv4535, OwnerReference{}) // var yyz4535 OwnerReference
				yyc4535 = true
			}
			yyh4535.ElemContainerState(yyj4535)
			if yyj4535 < len(yyv4535) {
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = OwnerReference{}
				} else {
					yyv4538 := &yyv4535[yyj4535]
					yyv4538.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4535 < len(yyv4535) {
			yyv4535 = yyv4535[:yyj4535]
			yyc4535 = true
		} else if yyj4535 == 0 && yyv4535 == nil {
			yyv4535 = []OwnerReference{}
			yyc4535 = true
		}
	}
	yyh4535.End()
	if yyc4535 {
		*v = yyv4535
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4539 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4539.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4540 := *v
	yyh4540, yyl4540 := z.DecSliceHelperStart()
	var yyc4540 bool
	if yyl4540 == 0 {
		if yyv4540 == nil {
			yyv4540 = []PersistentVolumeAccessMode{}
			yyc4540 = true
		} else if len(yyv4540) != 0 {
			yyv4540 = yyv4540[:0]
			yyc4540 = true
		}
	} else if yyl4540 > 0 {
		var yyrr4540, yyrl4540 int
		var yyrt4540 bool
		if yyl4540 > cap(yyv4540) {

			yyrl4540, yyrt4540 = z.DecInferLen(yyl4540, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4540 {
				if yyrl4540 <= cap(yyv4540) {
					yyv4540 = yyv4540[:yyrl4540]
				} else {
					yyv4540 = make([]PersistentVolumeAccessMode, yyrl4540)
				}
			} else {
				yyv4540 = make([]PersistentVolumeAccessMode, yyrl4540)
			}
			yyc4540 = true
			yyrr4540 = len(yyv4540)
		} else if yyl4540 != len(yyv4540) {
			yyv4540 = yyv4540[:yyl4540]
			yyc4540 = true
		}
		yyj4540 := 0
		for ; yyj4540 < yyrr4540; yyj4540++ {
			yyh4540.ElemContainerState(yyj4540)
			if r.TryDecodeAsNil() {
				yyv4540[yyj4540] = ""
			} else {
				yyv4540[yyj4540] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4540 {
			for ; yyj4540 < yyl4540; yyj4540++ {
				yyv4540 = append(yyv4540, "")
				yyh4540.ElemContainerState(yyj4540)
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = ""
				} else {
					yyv4540[yyj4540] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4540 := 0
		for ; !r.CheckBreak(); yyj4540++ {

			if yyj4540 >= len(yyv4540) {
				yyv4540 = append(yyv4540, "") // var yyz4540 PersistentVolumeAccessMode
				yyc4540 = true
			}
			yyh4540.ElemContainerState(yyj4540)
			if yyj4540 < len(yyv4540) {
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = ""
				} else {
					yyv4540[yyj4540] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4540 < len(yyv4540) {
			yyv4540 = yyv4540[:yyj4540]
			yyc4540 = true
		} else if yyj4540 == 0 && yyv4540 == nil {
			yyv4540 = []PersistentVolumeAccessMode{}
			yyc4540 = true
		}
	}
	yyh4540.End()
	if yyc4540 {
		*v = yyv4540
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4544 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4545 := &yyv4544
		yy4545.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4546 := *v
	yyh4546, yyl4546 := z.DecSliceHelperStart()
	var yyc4546 bool
	if yyl4546 == 0 {
		if yyv4546 == nil {
			yyv4546 = []PersistentVolume{}
			yyc4546 = true
		} else if len(yyv4546) != 0 {
			yyv4546 = yyv4546[:0]
			yyc4546 = true
		}
	} else if yyl4546 > 0 {
		var yyrr4546, yyrl4546 int
		var yyrt4546 bool
		if yyl4546 > cap(yyv4546) {

			yyrg4546 := len(yyv4546) > 0
			yyv24546 := yyv4546
			yyrl4546, yyrt4546 = z.DecInferLen(yyl4546, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4546 {
				if yyrl4546 <= cap(yyv4546) {
					yyv4546 = yyv4546[:yyrl4546]
				} else {
					yyv4546 = make([]PersistentVolume, yyrl4546)
				}
			} else {
				yyv4546 = make([]PersistentVolume, yyrl4546)
			}
			yyc4546 = true
			yyrr4546 = len(yyv4546)
			if yyrg4546 {
				copy(yyv4546, yyv24546)
			}
		} else if yyl4546 != len(yyv4546) {
			yyv4546 = yyv4546[:yyl4546]
			yyc4546 = true
		}
		yyj4546 := 0
		for ; yyj4546 < yyrr4546; yyj4546++ {
			yyh4546.ElemContainerState(yyj4546)
			if r.TryDecodeAsNil() {
				yyv4546[yyj4546] = PersistentVolume{}
			} else {
				yyv4547 := &yyv4546[yyj4546]
				yyv4547.CodecDecodeSelf(d)
			}

		}
		if yyrt4546 {
			for ; yyj4546 < yyl4546; yyj4546++ {
				yyv4546 = append(yyv4546, PersistentVolume{})
				yyh4546.ElemContainerState(yyj4546)
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = PersistentVolume{}
				} else {
					yyv4548 := &yyv4546[yyj4546]
					yyv4548.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4546 := 0
		for ; !r.CheckBreak(); yyj4546++ {

			if yyj4546 >= len(yyv4546) {
				yyv4546 = append(yyv4546, PersistentVolume{}) // var yyz4546 PersistentVolume
				yyc4546 = true
			}
			yyh4546.ElemContainerState(yyj4546)
			if yyj4546 < len(yyv4546) {
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = PersistentVolume{}
				} else {
					yyv4549 := &yyv4546[yyj4546]
					yyv4549.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4546 < len(yyv4546) {
			yyv4546 = yyv4546[:yyj4546]
			yyc4546 = true
		} else if yyj4546 == 0 && yyv4546 == nil {
			yyv4546 = []PersistentVolume{}
			yyc4546 = true
		}
	}
	yyh4546.End()
	if yyc4546 {
		*v = yyv4546
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4550 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4551 := &yyv4550
		yy4551.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4552 := *v
	yyh4552, yyl4552 := z.DecSliceHelperStart()
	var yyc4552 bool
	if yyl4552 == 0 {
		if yyv4552 == nil {
			yyv4552 = []PersistentVolumeClaim{}
			yyc4552 = true
		} else if len(yyv4552) != 0 {
			yyv4552 = yyv4552[:0]
			yyc4552 = true
		}
	} else if yyl4552 > 0 {
		var yyrr4552, yyrl4552 int
		var yyrt4552 bool
		if yyl4552 > cap(yyv4552) {

			yyrg4552 := len(yyv4552) > 0
			yyv24552 := yyv4552
			yyrl4552, yyrt4552 = z.DecInferLen(yyl4552, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4552 {
				if yyrl4552 <= cap(yyv4552) {
					yyv4552 = yyv4552[:yyrl4552]
				} else {
					yyv4552 = make([]PersistentVolumeClaim, yyrl4552)
				}
			} else {
				yyv4552 = make([]PersistentVolumeClaim, yyrl4552)
			}
			yyc4552 = true
			yyrr4552 = len(yyv4552)
			if yyrg4552 {
				copy(yyv4552, yyv24552)
			}
		} else if yyl4552 != len(yyv4552) {
			yyv4552 = yyv4552[:yyl4552]
			yyc4552 = true
		}
		yyj4552 := 0
		for ; yyj4552 < yyrr4552; yyj4552++ {
			yyh4552.ElemContainerState(yyj4552)
			if r.TryDecodeAsNil() {
				yyv4552[yyj4552] = PersistentVolumeClaim{}
			} else {
				yyv4553 := &yyv4552[yyj4552]
				yyv4553.CodecDecodeSelf(d)
			}

		}
		if yyrt4552 {
			for ; yyj4552 < yyl4552; yyj4552++ {
				yyv4552 = append(yyv4552, PersistentVolumeClaim{})
				yyh4552.ElemContainerState(yyj4552)
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = PersistentVolumeClaim{}
				} else {
					yyv4554 := &yyv4552[yyj4552]
					yyv4554.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4552 := 0
		for ; !r.CheckBreak(); yyj4552++ {

			if yyj4552 >= len(yyv4552) {
				yyv4552 = append(yyv4552, PersistentVolumeClaim{}) // var yyz4552 PersistentVolumeClaim
				yyc4552 = true
			}
			yyh4552.ElemContainerState(yyj4552)
			if yyj4552 < len(yyv4552) {
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = PersistentVolumeClaim{}
				} else {
					yyv4555 := &yyv4552[yyj4552]
					yyv4555.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4552 < len(yyv4552) {
			yyv4552 = yyv4552[:yyj4552]
			yyc4552 = true
		} else if yyj4552 == 0 && yyv4552 == nil {
			yyv4552 = []PersistentVolumeClaim{}
			yyc4552 = true
		}
	}
	yyh4552.End()
	if yyc4552 {
		*v = yyv4552
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4556 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4557 := &yyv4556
		yy4557.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4558 := *v
	yyh4558, yyl4558 := z.DecSliceHelperStart()
	var yyc4558 bool
	if yyl4558 == 0 {
		if yyv4558 == nil {
			yyv4558 = []KeyToPath{}
			yyc4558 = true
		} else if len(yyv4558) != 0 {
			yyv4558 = yyv4558[:0]
			yyc4558 = true
		}
	} else if yyl4558 > 0 {
		var yyrr4558, yyrl4558 int
		var yyrt4558 bool
		if yyl4558 > cap(yyv4558) {

			yyrg4558 := len(yyv4558) > 0
			yyv24558 := yyv4558
			yyrl4558, yyrt4558 = z.DecInferLen(yyl4558, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4558 {
				if yyrl4558 <= cap(yyv4558) {
					yyv4558 = yyv4558[:yyrl4558]
				} else {
					yyv4558 = make([]KeyToPath, yyrl4558)
				}
			} else {
				yyv4558 = make([]KeyToPath, yyrl4558)
			}
			yyc4558 = true
			yyrr4558 = len(yyv4558)
			if yyrg4558 {
				copy(yyv4558, yyv24558)
			}
		} else if yyl4558 != len(yyv4558) {
			yyv4558 = yyv4558[:yyl4558]
			yyc4558 = true
		}
		yyj4558 := 0
		for ; yyj4558 < yyrr4558; yyj4558++ {
			yyh4558.ElemContainerState(yyj4558)
			if r.TryDecodeAsNil() {
				yyv4558[yyj4558] = KeyToPath{}
			} else {
				yyv4559 := &yyv4558[yyj4558]
				yyv4559.CodecDecodeSelf(d)
			}

		}
		if yyrt4558 {
			for ; yyj4558 < yyl4558; yyj4558++ {
				yyv4558 = append(yyv4558, KeyToPath{})
				yyh4558.ElemContainerState(yyj4558)
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = KeyToPath{}
				} else {
					yyv4560 := &yyv4558[yyj4558]
					yyv4560.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4558 := 0
		for ; !r.CheckBreak(); yyj4558++ {

			if yyj4558 >= len(yyv4558) {
				yyv4558 = append(yyv4558, KeyToPath{}) // var yyz4558 KeyToPath
				yyc4558 = true
			}
			yyh4558.ElemContainerState(yyj4558)
			if yyj4558 < len(yyv4558) {
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = KeyToPath{}
				} else {
					yyv4561 := &yyv4558[yyj4558]
					yyv4561.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4558 < len(yyv4558) {
			yyv4558 = yyv4558[:yyj4558]
			yyc4558 = true
		} else if yyj4558 == 0 && yyv4558 == nil {
			yyv4558 = []KeyToPath{}
			yyc4558 = true
		}
	}
	yyh4558.End()
	if yyc4558 {
		*v = yyv4558
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4562 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4563 := &yyv4562
		yy4563.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4564 := *v
	yyh4564, yyl4564 := z.DecSliceHelperStart()
	var yyc4564 bool
	if yyl4564 == 0 {
		if yyv4564 == nil {
			yyv4564 = []DownwardAPIVolumeFile{}
			yyc4564 = true
		} else if len(yyv4564) != 0 {
			yyv4564 = yyv4564[:0]
			yyc4564 = true
		}
	} else if yyl4564 > 0 {
		var yyrr4564, yyrl4564 int
		var yyrt4564 bool
		if yyl4564 > cap(yyv4564) {

			yyrg4564 := len(yyv4564) > 0
			yyv24564 := yyv4564
			yyrl4564, yyrt4564 = z.DecInferLen(yyl4564, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4564 {
				if yyrl4564 <= cap(yyv4564) {
					yyv4564 = yyv4564[:yyrl4564]
				} else {
					yyv4564 = make([]DownwardAPIVolumeFile, yyrl4564)
				}
			} else {
				yyv4564 = make([]DownwardAPIVolumeFile, yyrl4564)
			}
			yyc4564 = true
			yyrr4564 = len(yyv4564)
			if yyrg4564 {
				copy(yyv4564, yyv24564)
			}
		} else if yyl4564 != len(yyv4564) {
			yyv4564 = yyv4564[:yyl4564]
			yyc4564 = true
		}
		yyj4564 := 0
		for ; yyj4564 < yyrr4564; yyj4564++ {
			yyh4564.ElemContainerState(yyj4564)
			if r.TryDecodeAsNil() {
				yyv4564[yyj4564] = DownwardAPIVolumeFile{}
			} else {
				yyv4565 := &yyv4564[yyj4564]
				yyv4565.CodecDecodeSelf(d)
			}

		}
		if yyrt4564 {
			for ; yyj4564 < yyl4564; yyj4564++ {
				yyv4564 = append(yyv4564, DownwardAPIVolumeFile{})
				yyh4564.ElemContainerState(yyj4564)
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = DownwardAPIVolumeFile{}
				} else {
					yyv4566 := &yyv4564[yyj4564]
					yyv4566.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4564 := 0
		for ; !r.CheckBreak(); yyj4564++ {

			if yyj4564 >= len(yyv4564) {
				yyv4564 = append(yyv4564, DownwardAPIVolumeFile{}) // var yyz4564 DownwardAPIVolumeFile
				yyc4564 = true
			}
			yyh4564.ElemContainerState(yyj4564)
			if yyj4564 < len(yyv4564) {
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = DownwardAPIVolumeFile{}
				} else {
					yyv4567 := &yyv4564[yyj4564]
					yyv4567.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4564 < len(yyv4564) {
			yyv4564 = yyv4564[:yyj4564]
			yyc4564 = true
		} else if yyj4564 == 0 && yyv4564 == nil {
			yyv4564 = []DownwardAPIVolumeFile{}
			yyc4564 = true
		}
	}
	yyh4564.End()
	if yyc4564 {
		*v = yyv4564
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4568 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4569 := &yyv4568
		yy4569.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4570 := *v
	yyh4570, yyl4570 := z.DecSliceHelperStart()
	var yyc4570 bool
	if yyl4570 == 0 {
		if yyv4570 == nil {
			yyv4570 = []HTTPHeader{}
			yyc4570 = true
		} else if len(yyv4570) != 0 {
			yyv4570 = yyv4570[:0]
			yyc4570 = true
		}
	} else if yyl4570 > 0 {
		var yyrr4570, yyrl4570 int
		var yyrt4570 bool
		if yyl4570 > cap(yyv4570) {

			yyrg4570 := len(yyv4570) > 0
			yyv24570 := yyv4570
			yyrl4570, yyrt4570 = z.DecInferLen(yyl4570, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4570 {
				if yyrl4570 <= cap(yyv4570) {
					yyv4570 = yyv4570[:yyrl4570]
				} else {
					yyv4570 = make([]HTTPHeader, yyrl4570)
				}
			} else {
				yyv4570 = make([]HTTPHeader, yyrl4570)
			}
			yyc4570 = true
			yyrr4570 = len(yyv4570)
			if yyrg4570 {
				copy(yyv4570, yyv24570)
			}
		} else if yyl4570 != len(yyv4570) {
			yyv4570 = yyv4570[:yyl4570]
			yyc4570 = true
		}
		yyj4570 := 0
		for ; yyj4570 < yyrr4570; yyj4570++ {
			yyh4570.ElemContainerState(yyj4570)
			if r.TryDecodeAsNil() {
				yyv4570[yyj4570] = HTTPHeader{}
			} else {
				yyv4571 := &yyv4570[yyj4570]
				yyv4571.CodecDecodeSelf(d)
			}

		}
		if yyrt4570 {
			for ; yyj4570 < yyl4570; yyj4570++ {
				yyv4570 = append(yyv4570, HTTPHeader{})
				yyh4570.ElemContainerState(yyj4570)
				if r.TryDecodeAsNil() {
					yyv4570[yyj4570] = HTTPHeader{}
				} else {
					yyv4572 := &yyv4570[yyj4570]
					yyv4572.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4570 := 0
		for ; !r.CheckBreak(); yyj4570++ {

			if yyj4570 >= len(yyv4570) {
				yyv4570 = append(yyv4570, HTTPHeader{}) // var yyz4570 HTTPHeader
				yyc4570 = true
			}
			yyh4570.ElemContainerState(yyj4570)
			if yyj4570 < len(yyv4570) {
				if r.TryDecodeAsNil() {
					yyv4570[yyj4570] = HTTPHeader{}
				} else {
					yyv4573 := &yyv4570[yyj4570]
					yyv4573.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4570 < len(yyv4570) {
			yyv4570 = yyv4570[:yyj4570]
			yyc4570 = true
		} else if yyj4570 == 0 && yyv4570 == nil {
			yyv4570 = []HTTPHeader{}
			yyc4570 = true
		}
	}
	yyh4570.End()
	if yyc4570 {
		*v = yyv4570
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4574 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4574.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4575 := *v
	yyh4575, yyl4575 := z.DecSliceHelperStart()
	var yyc4575 bool
	if yyl4575 == 0 {
		if yyv4575 == nil {
			yyv4575 = []Capability{}
			yyc4575 = true
		} else if len(yyv4575) != 0 {
			yyv4575 = yyv4575[:0]
			yyc4575 = true
		}
	} else if yyl4575 > 0 {
		var yyrr4575, yyrl4575 int
		var yyrt4575 bool
		if yyl4575 > cap(yyv4575) {

			yyrl4575, yyrt4575 = z.DecInferLen(yyl4575, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4575 {
				if yyrl4575 <= cap(yyv4575) {
					yyv4575 = yyv4575[:yyrl4575]
				} else {
					yyv4575 = make([]Capability, yyrl4575)
				}
			} else {
				yyv4575 = make([]Capability, yyrl4575)
			}
			yyc4575 = true
			yyrr4575 = len(yyv4575)
		} else if yyl4575 != len(yyv4575) {
			yyv4575 = yyv4575[:yyl4575]
			yyc4575 = true
		}
		yyj4575 := 0
		for ; yyj4575 < yyrr4575; yyj4575++ {
			yyh4575.ElemContainerState(yyj4575)
			if r.TryDecodeAsNil() {
				yyv4575[yyj4575] = ""
			} else {
				yyv4575[yyj4575] = Capability(r.DecodeString())
			}

		}
		if yyrt4575 {
			for ; yyj4575 < yyl4575; yyj4575++ {
				yyv4575 = append(yyv4575, "")
				yyh4575.ElemContainerState(yyj4575)
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = ""
				} else {
					yyv4575[yyj4575] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4575 := 0
		for ; !r.CheckBreak(); yyj4575++ {

			if yyj4575 >= len(yyv4575) {
				yyv4575 = append(yyv4575, "") // var yyz4575 Capability
				yyc4575 = true
			}
			yyh4575.ElemContainerState(yyj4575)
			if yyj4575 < len(yyv4575) {
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = ""
				} else {
					yyv4575[yyj4575] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4575 < len(yyv4575) {
			yyv4575 = yyv4575[:yyj4575]
			yyc4575 = true
		} else if yyj4575 == 0 && yyv4575 == nil {
			yyv4575 = []Capability{}
			yyc4575 = true
		}
	}
	yyh4575.End()
	if yyc4575 {
		*v = yyv4575
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4579 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4580 := &yyv4579
		yy4580.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4581 := *v
	yyh4581, yyl4581 := z.DecSliceHelperStart()
	var yyc4581 bool
	if yyl4581 == 0 {
		if yyv4581 == nil {
			yyv4581 = []ContainerPort{}
			yyc4581 = true
		} else if len(yyv4581) != 0 {
			yyv4581 = yyv4581[:0]
			yyc4581 = true
		}
	} else if yyl4581 > 0 {
		var yyrr4581, yyrl4581 int
		var yyrt4581 bool
		if yyl4581 > cap(yyv4581) {

			yyrg4581 := len(yyv4581) > 0
			yyv24581 := yyv4581
			yyrl4581, yyrt4581 = z.DecInferLen(yyl4581, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4581 {
				if yyrl4581 <= cap(yyv4581) {
					yyv4581 = yyv4581[:yyrl4581]
				} else {
					yyv4581 = make([]ContainerPort, yyrl4581)
				}
			} else {
				yyv4581 = make([]ContainerPort, yyrl4581)
			}
			yyc4581 = true
			yyrr4581 = len(yyv4581)
			if yyrg4581 {
				copy(yyv4581, yyv24581)
			}
		} else if yyl4581 != len(yyv4581) {
			yyv4581 = yyv4581[:yyl4581]
			yyc4581 = true
		}
		yyj4581 := 0
		for ; yyj4581 < yyrr4581; yyj4581++ {
			yyh4581.ElemContainerState(yyj4581)
			if r.TryDecodeAsNil() {
				yyv4581[yyj4581] = ContainerPort{}
			} else {
				yyv4582 := &yyv4581[yyj4581]
				yyv4582.CodecDecodeSelf(d)
			}

		}
		if yyrt4581 {
			for ; yyj4581 < yyl4581; yyj4581++ {
				yyv4581 = append(yyv4581, ContainerPort{})
				yyh4581.ElemContainerState(yyj4581)
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = ContainerPort{}
				} else {
					yyv4583 := &yyv4581[yyj4581]
					yyv4583.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4581 := 0
		for ; !r.CheckBreak(); yyj4581++ {

			if yyj4581 >= len(yyv4581) {
				yyv4581 = append(yyv4581, ContainerPort{}) // var yyz4581 ContainerPort
				yyc4581 = true
			}
			yyh4581.ElemContainerState(yyj4581)
			if yyj4581 < len(yyv4581) {
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = ContainerPort{}
				} else {
					yyv4584 := &yyv4581[yyj4581]
					yyv4584.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4581 < len(yyv4581) {
			yyv4581 = yyv4581[:yyj4581]
			yyc4581 = true
		} else if yyj4581 == 0 && yyv4581 == nil {
			yyv4581 = []ContainerPort{}
			yyc4581 = true
		}
	}
	yyh4581.End()
	if yyc4581 {
		*v = yyv4581
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4585 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4586 := &yyv4585
		yy4586.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4587 := *v
	yyh4587, yyl4587 := z.DecSliceHelperStart()
	var yyc4587 bool
	if yyl4587 == 0 {
		if yyv4587 == nil {
			yyv4587 = []EnvVar{}
			yyc4587 = true
		} else if len(yyv4587) != 0 {
			yyv4587 = yyv4587[:0]
			yyc4587 = true
		}
	} else if yyl4587 > 0 {
		var yyrr4587, yyrl4587 int
		var yyrt4587 bool
		if yyl4587 > cap(yyv4587) {

			yyrg4587 := len(yyv4587) > 0
			yyv24587 := yyv4587
			yyrl4587, yyrt4587 = z.DecInferLen(yyl4587, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4587 {
				if yyrl4587 <= cap(yyv4587) {
					yyv4587 = yyv4587[:yyrl4587]
				} else {
					yyv4587 = make([]EnvVar, yyrl4587)
				}
			} else {
				yyv4587 = make([]EnvVar, yyrl4587)
			}
			yyc4587 = true
			yyrr4587 = len(yyv4587)
			if yyrg4587 {
				copy(yyv4587, yyv24587)
			}
		} else if yyl4587 != len(yyv4587) {
			yyv4587 = yyv4587[:yyl4587]
			yyc4587 = true
		}
		yyj4587 := 0
		for ; yyj4587 < yyrr4587; yyj4587++ {
			yyh4587.ElemContainerState(yyj4587)
			if r.TryDecodeAsNil() {
				yyv4587[yyj4587] = EnvVar{}
			} else {
				yyv4588 := &yyv4587[yyj4587]
				yyv4588.CodecDecodeSelf(d)
			}

		}
		if yyrt4587 {
			for ; yyj4587 < yyl4587; yyj4587++ {
				yyv4587 = append(yyv4587, EnvVar{})
				yyh4587.ElemContainerState(yyj4587)
				if r.TryDecodeAsNil() {
					yyv4587[yyj4587] = EnvVar{}
				} else {
					yyv4589 := &yyv4587[yyj4587]
					yyv4589.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4587 := 0
		for ; !r.CheckBreak(); yyj4587++ {

			if yyj4587 >= len(yyv4587) {
				yyv4587 = append(yyv4587, EnvVar{}) // var yyz4587 EnvVar
				yyc4587 = true
			}
			yyh4587.ElemContainerState(yyj4587)
			if yyj4587 < len(yyv4587) {
				if r.TryDecodeAsNil() {
					yyv4587[yyj4587] = EnvVar{}
				} else {
					yyv4590 := &yyv4587[yyj4587]
					yyv4590.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4587 < len(yyv4587) {
			yyv4587 = yyv4587[:yyj4587]
			yyc4587 = true
		} else if yyj4587 == 0 && yyv4587 == nil {
			yyv4587 = []EnvVar{}
			yyc4587 = true
		}
	}
	yyh4587.End()
	if yyc4587 {
		*v = yyv4587
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4591 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4592 := &yyv4591
		yy4592.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4593 := *v
	yyh4593, yyl4593 := z.DecSliceHelperStart()
	var yyc4593 bool
	if yyl4593 == 0 {
		if yyv4593 == nil {
			yyv4593 = []VolumeMount{}
			yyc4593 = true
		} else if len(yyv4593) != 0 {
			yyv4593 = yyv4593[:0]
			yyc4593 = true
		}
	} else if yyl4593 > 0 {
		var yyrr4593, yyrl4593 int
		var yyrt4593 bool
		if yyl4593 > cap(yyv4593) {

			yyrg4593 := len(yyv4593) > 0
			yyv24593 := yyv4593
			yyrl4593, yyrt4593 = z.DecInferLen(yyl4593, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4593 {
				if yyrl4593 <= cap(yyv4593) {
					yyv4593 = yyv4593[:yyrl4593]
				} else {
					yyv4593 = make([]VolumeMount, yyrl4593)
				}
			} else {
				yyv4593 = make([]VolumeMount, yyrl4593)
			}
			yyc4593 = true
			yyrr4593 = len(yyv4593)
			if yyrg4593 {
				copy(yyv4593, yyv24593)
			}
		} else if yyl4593 != len(yyv4593) {
			yyv4593 = yyv4593[:yyl4593]
			yyc4593 = true
		}
		yyj4593 := 0
		for ; yyj4593 < yyrr4593; yyj4593++ {
			yyh4593.ElemContainerState(yyj4593)
			if r.TryDecodeAsNil() {
				yyv4593[yyj4593] = VolumeMount{}
			} else {
				yyv4594 := &yyv4593[yyj4593]
				yyv4594.CodecDecodeSelf(d)
			}

		}
		if yyrt4593 {
			for ; yyj4593 < yyl4593; yyj4593++ {
				yyv4593 = append(yyv4593, VolumeMount{})
				yyh4593.ElemContainerState(yyj4593)
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = VolumeMount{}
				} else {
					yyv4595 := &yyv4593[yyj4593]
					yyv4595.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4593 := 0
		for ; !r.CheckBreak(); yyj4593++ {

			if yyj4593 >= len(yyv4593) {
				yyv4593 = append(yyv4593, VolumeMount{}) // var yyz4593 VolumeMount
				yyc4593 = true
			}
			yyh4593.ElemContainerState(yyj4593)
			if yyj4593 < len(yyv4593) {
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = VolumeMount{}
				} else {
					yyv4596 := &yyv4593[yyj4593]
					yyv4596.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4593 < len(yyv4593) {
			yyv4593 = yyv4593[:yyj4593]
			yyc4593 = true
		} else if yyj4593 == 0 && yyv4593 == nil {
			yyv4593 = []VolumeMount{}
			yyc4593 = true
		}
	}
	yyh4593.End()
	if yyc4593 {
		*v = yyv4593
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4597 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4598 := &yyv4597
		yy4598.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4599 := *v
	yyh4599, yyl4599 := z.DecSliceHelperStart()
	var yyc4599 bool
	if yyl4599 == 0 {
		if yyv4599 == nil {
			yyv4599 = []Pod{}
			yyc4599 = true
		} else if len(yyv4599) != 0 {
			yyv4599 = yyv4599[:0]
			yyc4599 = true
		}
	} else if yyl4599 > 0 {
		var yyrr4599, yyrl4599 int
		var yyrt4599 bool
		if yyl4599 > cap(yyv4599) {

			yyrg4599 := len(yyv4599) > 0
			yyv24599 := yyv4599
			yyrl4599, yyrt4599 = z.DecInferLen(yyl4599, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt4599 {
				if yyrl4599 <= cap(yyv4599) {
					yyv4599 = yyv4599[:yyrl4599]
				} else {
					yyv4599 = make([]Pod, yyrl4599)
				}
			} else {
				yyv4599 = make([]Pod, yyrl4599)
			}
			yyc4599 = true
			yyrr4599 = len(yyv4599)
			if yyrg4599 {
				copy(yyv4599, yyv24599)
			}
		} else if yyl4599 != len(yyv4599) {
			yyv4599 = yyv4599[:yyl4599]
			yyc4599 = true
		}
		yyj4599 := 0
		for ; yyj4599 < yyrr4599; yyj4599++ {
			yyh4599.ElemContainerState(yyj4599)
			if r.TryDecodeAsNil() {
				yyv4599[yyj4599] = Pod{}
			} else {
				yyv4600 := &yyv4599[yyj4599]
				yyv4600.CodecDecodeSelf(d)
			}

		}
		if yyrt4599 {
			for ; yyj4599 < yyl4599; yyj4599++ {
				yyv4599 = append(yyv4599, Pod{})
				yyh4599.ElemContainerState(yyj4599)
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = Pod{}
				} else {
					yyv4601 := &yyv4599[yyj4599]
					yyv4601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4599 := 0
		for ; !r.CheckBreak(); yyj4599++ {

			if yyj4599 >= len(yyv4599) {
				yyv4599 = append(yyv4599, Pod{}) // var yyz4599 Pod
				yyc4599 = true
			}
			yyh4599.ElemContainerState(yyj4599)
			if yyj4599 < len(yyv4599) {
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = Pod{}
				} else {
					yyv4602 := &yyv4599[yyj4599]
					yyv4602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4599 < len(yyv4599) {
			yyv4599 = yyv4599[:yyj4599]
			yyc4599 = true
		} else if yyj4599 == 0 && yyv4599 == nil {
			yyv4599 = []Pod{}
			yyc4599 = true
		}
	}
	yyh4599.End()
	if yyc4599 {
		*v = yyv4599
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4603 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4604 := &yyv4603
		yy4604.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4605 := *v
	yyh4605, yyl4605 := z.DecSliceHelperStart()
	var yyc4605 bool
	if yyl4605 == 0 {
		if yyv4605 == nil {
			yyv4605 = []NodeSelectorTerm{}
			yyc4605 = true
		} else if len(yyv4605) != 0 {
			yyv4605 = yyv4605[:0]
			yyc4605 = true
		}
	} else if yyl4605 > 0 {
		var yyrr4605, yyrl4605 int
		var yyrt4605 bool
		if yyl4605 > cap(yyv4605) {

			yyrg4605 := len(yyv4605) > 0
			yyv24605 := yyv4605
			yyrl4605, yyrt4605 = z.DecInferLen(yyl4605, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4605 {
				if yyrl4605 <= cap(yyv4605) {
					yyv4605 = yyv4605[:yyrl4605]
				} else {
					yyv4605 = make([]NodeSelectorTerm, yyrl4605)
				}
			} else {
				yyv4605 = make([]NodeSelectorTerm, yyrl4605)
			}
			yyc4605 = true
			yyrr4605 = len(yyv4605)
			if yyrg4605 {
				copy(yyv4605, yyv24605)
			}
		} else if yyl4605 != len(yyv4605) {
			yyv4605 = yyv4605[:yyl4605]
			yyc4605 = true
		}
		yyj4605 := 0
		for ; yyj4605 < yyrr4605; yyj4605++ {
			yyh4605.ElemContainerState(yyj4605)
			if r.TryDecodeAsNil() {
				yyv4605[yyj4605] = NodeSelectorTerm{}
			} else {
				yyv4606 := &yyv4605[yyj4605]
				yyv4606.CodecDecodeSelf(d)
			}

		}
		if yyrt4605 {
			for ; yyj4605 < yyl4605; yyj4605++ {
				yyv4605 = append(yyv4605, NodeSelectorTerm{})
				yyh4605.ElemContainerState(yyj4605)
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = NodeSelectorTerm{}
				} else {
					yyv4607 := &yyv4605[yyj4605]
					yyv4607.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4605 := 0
		for ; !r.CheckBreak(); yyj4605++ {

			if yyj4605 >= len(yyv4605) {
				yyv4605 = append(yyv4605, NodeSelectorTerm{}) // var yyz4605 NodeSelectorTerm
				yyc4605 = true
			}
			yyh4605.ElemContainerState(yyj4605)
			if yyj4605 < len(yyv4605) {
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = NodeSelectorTerm{}
				} else {
					yyv4608 := &yyv4605[yyj4605]
					yyv4608.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4605 < len(yyv4605) {
			yyv4605 = yyv4605[:yyj4605]
			yyc4605 = true
		} else if yyj4605 == 0 && yyv4605 == nil {
			yyv4605 = []NodeSelectorTerm{}
			yyc4605 = true
		}
	}
	yyh4605.End()
	if yyc4605 {
		*v = yyv4605
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4609 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4610 := &yyv4609
		yy4610.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4611 := *v
	yyh4611, yyl4611 := z.DecSliceHelperStart()
	var yyc4611 bool
	if yyl4611 == 0 {
		if yyv4611 == nil {
			yyv4611 = []NodeSelectorRequirement{}
			yyc4611 = true
		} else if len(yyv4611) != 0 {
			yyv4611 = yyv4611[:0]
			yyc4611 = true
		}
	} else if yyl4611 > 0 {
		var yyrr4611, yyrl4611 int
		var yyrt4611 bool
		if yyl4611 > cap(yyv4611) {

			yyrg4611 := len(yyv4611) > 0
			yyv24611 := yyv4611
			yyrl4611, yyrt4611 = z.DecInferLen(yyl4611, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4611 {
				if yyrl4611 <= cap(yyv4611) {
					yyv4611 = yyv4611[:yyrl4611]
				} else {
					yyv4611 = make([]NodeSelectorRequirement, yyrl4611)
				}
			} else {
				yyv4611 = make([]NodeSelectorRequirement, yyrl4611)
			}
			yyc4611 = true
			yyrr4611 = len(yyv4611)
			if yyrg4611 {
				copy(yyv4611, yyv24611)
			}
		} else if yyl4611 != len(yyv4611) {
			yyv4611 = yyv4611[:yyl4611]
			yyc4611 = true
		}
		yyj4611 := 0
		for ; yyj4611 < yyrr4611; yyj4611++ {
			yyh4611.ElemContainerState(yyj4611)
			if r.TryDecodeAsNil() {
				yyv4611[yyj4611] = NodeSelectorRequirement{}
			} else {
				yyv4612 := &yyv4611[yyj4611]
				yyv4612.CodecDecodeSelf(d)
			}

		}
		if yyrt4611 {
			for ; yyj4611 < yyl4611; yyj4611++ {
				yyv4611 = append(yyv4611, NodeSelectorRequirement{})
				yyh4611.ElemContainerState(yyj4611)
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = NodeSelectorRequirement{}
				} else {
					yyv4613 := &yyv4611[yyj4611]
					yyv4613.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4611 := 0
		for ; !r.CheckBreak(); yyj4611++ {

			if yyj4611 >= len(yyv4611) {
				yyv4611 = append(yyv4611, NodeSelectorRequirement{}) // var yyz4611 NodeSelectorRequirement
				yyc4611 = true
			}
			yyh4611.ElemContainerState(yyj4611)
			if yyj4611 < len(yyv4611) {
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = NodeSelectorRequirement{}
				} else {
					yyv4614 := &yyv4611[yyj4611]
					yyv4614.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4611 < len(yyv4611) {
			yyv4611 = yyv4611[:yyj4611]
			yyc4611 = true
		} else if yyj4611 == 0 && yyv4611 == nil {
			yyv4611 = []NodeSelectorRequirement{}
			yyc4611 = true
		}
	}
	yyh4611.End()
	if yyc4611 {
		*v = yyv4611
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4615 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4616 := &yyv4615
		yy4616.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4617 := *v
	yyh4617, yyl4617 := z.DecSliceHelperStart()
	var yyc4617 bool
	if yyl4617 == 0 {
		if yyv4617 == nil {
			yyv4617 = []PodAffinityTerm{}
			yyc4617 = true
		} else if len(yyv4617) != 0 {
			yyv4617 = yyv4617[:0]
			yyc4617 = true
		}
	} else if yyl4617 > 0 {
		var yyrr4617, yyrl4617 int
		var yyrt4617 bool
		if yyl4617 > cap(yyv4617) {

			yyrg4617 := len(yyv4617) > 0
			yyv24617 := yyv4617
			yyrl4617, yyrt4617 = z.DecInferLen(yyl4617, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4617 {
				if yyrl4617 <= cap(yyv4617) {
					yyv4617 = yyv4617[:yyrl4617]
				} else {
					yyv4617 = make([]PodAffinityTerm, yyrl4617)
				}
			} else {
				yyv4617 = make([]PodAffinityTerm, yyrl4617)
			}
			yyc4617 = true
			yyrr4617 = len(yyv4617)
			if yyrg4617 {
				copy(yyv4617, yyv24617)
			}
		} else if yyl4617 != len(yyv4617) {
			yyv4617 = yyv4617[:yyl4617]
			yyc4617 = true
		}
		yyj4617 := 0
		for ; yyj4617 < yyrr4617; yyj4617++ {
			yyh4617.ElemContainerState(yyj4617)
			if r.TryDecodeAsNil() {
				yyv4617[yyj4617] = PodAffinityTerm{}
			} else {
				yyv4618 := &yyv4617[yyj4617]
				yyv4618.CodecDecodeSelf(d)
			}

		}
		if yyrt4617 {
			for ; yyj4617 < yyl4617; yyj4617++ {
				yyv4617 = append(yyv4617, PodAffinityTerm{})
				yyh4617.ElemContainerState(yyj4617)
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = PodAffinityTerm{}
				} else {
					yyv4619 := &yyv4617[yyj4617]
					yyv4619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4617 := 0
		for ; !r.CheckBreak(); yyj4617++ {

			if yyj4617 >= len(yyv4617) {
				yyv4617 = append(yyv4617, PodAffinityTerm{}) // var yyz4617 PodAffinityTerm
				yyc4617 = true
			}
			yyh4617.ElemContainerState(yyj4617)
			if yyj4617 < len(yyv4617) {
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = PodAffinityTerm{}
				} else {
					yyv4620 := &yyv4617[yyj4617]
					yyv4620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4617 < len(yyv4617) {
			yyv4617 = yyv4617[:yyj4617]
			yyc4617 = true
		} else if yyj4617 == 0 && yyv4617 == nil {
			yyv4617 = []PodAffinityTerm{}
			yyc4617 = true
		}
	}
	yyh4617.End()
	if yyc4617 {
		*v = yyv4617
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4621 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4622 := &yyv4621
		yy4622.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4623 := *v
	yyh4623, yyl4623 := z.DecSliceHelperStart()
	var yyc4623 bool
	if yyl4623 == 0 {
		if yyv4623 == nil {
			yyv4623 = []WeightedPodAffinityTerm{}
			yyc4623 = true
		} else if len(yyv4623) != 0 {
			yyv4623 = yyv4623[:0]
			yyc4623 = true
		}
	} else if yyl4623 > 0 {
		var yyrr4623, yyrl4623 int
		var yyrt4623 bool
		if yyl4623 > cap(yyv4623) {

			yyrg4623 := len(yyv4623) > 0
			yyv24623 := yyv4623
			yyrl4623, yyrt4623 = z.DecInferLen(yyl4623, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4623 {
				if yyrl4623 <= cap(yyv4623) {
					yyv4623 = yyv4623[:yyrl4623]
				} else {
					yyv4623 = make([]WeightedPodAffinityTerm, yyrl4623)
				}
			} else {
				yyv4623 = make([]WeightedPodAffinityTerm, yyrl4623)
			}
			yyc4623 = true
			yyrr4623 = len(yyv4623)
			if yyrg4623 {
				copy(yyv4623, yyv24623)
			}
		} else if yyl4623 != len(yyv4623) {
			yyv4623 = yyv4623[:yyl4623]
			yyc4623 = true
		}
		yyj4623 := 0
		for ; yyj4623 < yyrr4623; yyj4623++ {
			yyh4623.ElemContainerState(yyj4623)
			if r.TryDecodeAsNil() {
				yyv4623[yyj4623] = WeightedPodAffinityTerm{}
			} else {
				yyv4624 := &yyv4623[yyj4623]
				yyv4624.CodecDecodeSelf(d)
			}

		}
		if yyrt4623 {
			for ; yyj4623 < yyl4623; yyj4623++ {
				yyv4623 = append(yyv4623, WeightedPodAffinityTerm{})
				yyh4623.ElemContainerState(yyj4623)
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = WeightedPodAffinityTerm{}
				} else {
					yyv4625 := &yyv4623[yyj4623]
					yyv4625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4623 := 0
		for ; !r.CheckBreak(); yyj4623++ {

			if yyj4623 >= len(yyv4623) {
				yyv4623 = append(yyv4623, WeightedPodAffinityTerm{}) // var yyz4623 WeightedPodAffinityTerm
				yyc4623 = true
			}
			yyh4623.ElemContainerState(yyj4623)
			if yyj4623 < len(yyv4623) {
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = WeightedPodAffinityTerm{}
				} else {
					yyv4626 := &yyv4623[yyj4623]
					yyv4626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4623 < len(yyv4623) {
			yyv4623 = yyv4623[:yyj4623]
			yyc4623 = true
		} else if yyj4623 == 0 && yyv4623 == nil {
			yyv4623 = []WeightedPodAffinityTerm{}
			yyc4623 = true
		}
	}
	yyh4623.End()
	if yyc4623 {
		*v = yyv4623
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4627 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4628 := &yyv4627
		yy4628.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4629 := *v
	yyh4629, yyl4629 := z.DecSliceHelperStart()
	var yyc4629 bool
	if yyl4629 == 0 {
		if yyv4629 == nil {
			yyv4629 = []PreferredSchedulingTerm{}
			yyc4629 = true
		} else if len(yyv4629) != 0 {
			yyv4629 = yyv4629[:0]
			yyc4629 = true
		}
	} else if yyl4629 > 0 {
		var yyrr4629, yyrl4629 int
		var yyrt4629 bool
		if yyl4629 > cap(yyv4629) {

			yyrg4629 := len(yyv4629) > 0
			yyv24629 := yyv4629
			yyrl4629, yyrt4629 = z.DecInferLen(yyl4629, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4629 {
				if yyrl4629 <= cap(yyv4629) {
					yyv4629 = yyv4629[:yyrl4629]
				} else {
					yyv4629 = make([]PreferredSchedulingTerm, yyrl4629)
				}
			} else {
				yyv4629 = make([]PreferredSchedulingTerm, yyrl4629)
			}
			yyc4629 = true
			yyrr4629 = len(yyv4629)
			if yyrg4629 {
				copy(yyv4629, yyv24629)
			}
		} else if yyl4629 != len(yyv4629) {
			yyv4629 = yyv4629[:yyl4629]
			yyc4629 = true
		}
		yyj4629 := 0
		for ; yyj4629 < yyrr4629; yyj4629++ {
			yyh4629.ElemContainerState(yyj4629)
			if r.TryDecodeAsNil() {
				yyv4629[yyj4629] = PreferredSchedulingTerm{}
			} else {
				yyv4630 := &yyv4629[yyj4629]
				yyv4630.CodecDecodeSelf(d)
			}

		}
		if yyrt4629 {
			for ; yyj4629 < yyl4629; yyj4629++ {
				yyv4629 = append(yyv4629, PreferredSchedulingTerm{})
				yyh4629.ElemContainerState(yyj4629)
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = PreferredSchedulingTerm{}
				} else {
					yyv4631 := &yyv4629[yyj4629]
					yyv4631.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4629 := 0
		for ; !r.CheckBreak(); yyj4629++ {

			if yyj4629 >= len(yyv4629) {
				yyv4629 = append(yyv4629, PreferredSchedulingTerm{}) // var yyz4629 PreferredSchedulingTerm
				yyc4629 = true
			}
			yyh4629.ElemContainerState(yyj4629)
			if yyj4629 < len(yyv4629) {
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = PreferredSchedulingTerm{}
				} else {
					yyv4632 := &yyv4629[yyj4629]
					yyv4632.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4629 < len(yyv4629) {
			yyv4629 = yyv4629[:yyj4629]
			yyc4629 = true
		} else if yyj4629 == 0 && yyv4629 == nil {
			yyv4629 = []PreferredSchedulingTerm{}
			yyc4629 = true
		}
	}
	yyh4629.End()
	if yyc4629 {
		*v = yyv4629
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4633 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4634 := &yyv4633
		yy4634.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4635 := *v
	yyh4635, yyl4635 := z.DecSliceHelperStart()
	var yyc4635 bool
	if yyl4635 == 0 {
		if yyv4635 == nil {
			yyv4635 = []Volume{}
			yyc4635 = true
		} else if len(yyv4635) != 0 {
			yyv4635 = yyv4635[:0]
			yyc4635 = true
		}
	} else if yyl4635 > 0 {
		var yyrr4635, yyrl4635 int
		var yyrt4635 bool
		if yyl4635 > cap(yyv4635) {

			yyrg4635 := len(yyv4635) > 0
			yyv24635 := yyv4635
			yyrl4635, yyrt4635 = z.DecInferLen(yyl4635, z.DecBasicHandle().MaxInitLen, 192)
			if yyrt4635 {
				if yyrl4635 <= cap(yyv4635) {
					yyv4635 = yyv4635[:yyrl4635]
				} else {
					yyv4635 = make([]Volume, yyrl4635)
				}
			} else {
				yyv4635 = make([]Volume, yyrl4635)
			}
			yyc4635 = true
			yyrr4635 = len(yyv4635)
			if yyrg4635 {
				copy(yyv4635, yyv24635)
			}
		} else if yyl4635 != len(yyv4635) {
			yyv4635 = yyv4635[:yyl4635]
			yyc4635 = true
		}
		yyj4635 := 0
		for ; yyj4635 < yyrr4635; yyj4635++ {
			yyh4635.ElemContainerState(yyj4635)
			if r.TryDecodeAsNil() {
				yyv4635[yyj4635] = Volume{}
			} else {
				yyv4636 := &yyv4635[yyj4635]
				yyv4636.CodecDecodeSelf(d)
			}

		}
		if yyrt4635 {
			for ; yyj4635 < yyl4635; yyj4635++ {
				yyv4635 = append(yyv4635, Volume{})
				yyh4635.ElemContainerState(yyj4635)
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = Volume{}
				} else {
					yyv4637 := &yyv4635[yyj4635]
					yyv4637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4635 := 0
		for ; !r.CheckBreak(); yyj4635++ {

			if yyj4635 >= len(yyv4635) {
				yyv4635 = append(yyv4635, Volume{}) // var yyz4635 Volume
				yyc4635 = true
			}
			yyh4635.ElemContainerState(yyj4635)
			if yyj4635 < len(yyv4635) {
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = Volume{}
				} else {
					yyv4638 := &yyv4635[yyj4635]
					yyv4638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4635 < len(yyv4635) {
			yyv4635 = yyv4635[:yyj4635]
			yyc4635 = true
		} else if yyj4635 == 0 && yyv4635 == nil {
			yyv4635 = []Volume{}
			yyc4635 = true
		}
	}
	yyh4635.End()
	if yyc4635 {
		*v = yyv4635
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4639 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4640 := &yyv4639
		yy4640.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4641 := *v
	yyh4641, yyl4641 := z.DecSliceHelperStart()
	var yyc4641 bool
	if yyl4641 == 0 {
		if yyv4641 == nil {
			yyv4641 = []Container{}
			yyc4641 = true
		} else if len(yyv4641) != 0 {
			yyv4641 = yyv4641[:0]
			yyc4641 = true
		}
	} else if yyl4641 > 0 {
		var yyrr4641, yyrl4641 int
		var yyrt4641 bool
		if yyl4641 > cap(yyv4641) {

			yyrg4641 := len(yyv4641) > 0
			yyv24641 := yyv4641
			yyrl4641, yyrt4641 = z.DecInferLen(yyl4641, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4641 {
				if yyrl4641 <= cap(yyv4641) {
					yyv4641 = yyv4641[:yyrl4641]
				} else {
					yyv4641 = make([]Container, yyrl4641)
				}
			} else {
				yyv4641 = make([]Container, yyrl4641)
			}
			yyc4641 = true
			yyrr4641 = len(yyv4641)
			if yyrg4641 {
				copy(yyv4641, yyv24641)
			}
		} else if yyl4641 != len(yyv4641) {
			yyv4641 = yyv4641[:yyl4641]
			yyc4641 = true
		}
		yyj4641 := 0
		for ; yyj4641 < yyrr4641; yyj4641++ {
			yyh4641.ElemContainerState(yyj4641)
			if r.TryDecodeAsNil() {
				yyv4641[yyj4641] = Container{}
			} else {
				yyv4642 := &yyv4641[yyj4641]
				yyv4642.CodecDecodeSelf(d)
			}

		}
		if yyrt4641 {
			for ; yyj4641 < yyl4641; yyj4641++ {
				yyv4641 = append(yyv4641, Container{})
				yyh4641.ElemContainerState(yyj4641)
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = Container{}
				} else {
					yyv4643 := &yyv4641[yyj4641]
					yyv4643.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4641 := 0
		for ; !r.CheckBreak(); yyj4641++ {

			if yyj4641 >= len(yyv4641) {
				yyv4641 = append(yyv4641, Container{}) // var yyz4641 Container
				yyc4641 = true
			}
			yyh4641.ElemContainerState(yyj4641)
			if yyj4641 < len(yyv4641) {
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = Container{}
				} else {
					yyv4644 := &yyv4641[yyj4641]
					yyv4644.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4641 < len(yyv4641) {
			yyv4641 = yyv4641[:yyj4641]
			yyc4641 = true
		} else if yyj4641 == 0 && yyv4641 == nil {
			yyv4641 = []Container{}
			yyc4641 = true
		}
	}
	yyh4641.End()
	if yyc4641 {
		*v = yyv4641
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4645 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4646 := &yyv4645
		yy4646.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4647 := *v
	yyh4647, yyl4647 := z.DecSliceHelperStart()
	var yyc4647 bool
	if yyl4647 == 0 {
		if yyv4647 == nil {
			yyv4647 = []LocalObjectReference{}
			yyc4647 = true
		} else if len(yyv4647) != 0 {
			yyv4647 = yyv4647[:0]
			yyc4647 = true
		}
	} else if yyl4647 > 0 {
		var yyrr4647, yyrl4647 int
		var yyrt4647 bool
		if yyl4647 > cap(yyv4647) {

			yyrg4647 := len(yyv4647) > 0
			yyv24647 := yyv4647
			yyrl4647, yyrt4647 = z.DecInferLen(yyl4647, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4647 {
				if yyrl4647 <= cap(yyv4647) {
					yyv4647 = yyv4647[:yyrl4647]
				} else {
					yyv4647 = make([]LocalObjectReference, yyrl4647)
				}
			} else {
				yyv4647 = make([]LocalObjectReference, yyrl4647)
			}
			yyc4647 = true
			yyrr4647 = len(yyv4647)
			if yyrg4647 {
				copy(yyv4647, yyv24647)
			}
		} else if yyl4647 != len(yyv4647) {
			yyv4647 = yyv4647[:yyl4647]
			yyc4647 = true
		}
		yyj4647 := 0
		for ; yyj4647 < yyrr4647; yyj4647++ {
			yyh4647.ElemContainerState(yyj4647)
			if r.TryDecodeAsNil() {
				yyv4647[yyj4647] = LocalObjectReference{}
			} else {
				yyv4648 := &yyv4647[yyj4647]
				yyv4648.CodecDecodeSelf(d)
			}

		}
		if yyrt4647 {
			for ; yyj4647 < yyl4647; yyj4647++ {
				yyv4647 = append(yyv4647, LocalObjectReference{})
				yyh4647.ElemContainerState(yyj4647)
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = LocalObjectReference{}
				} else {
					yyv4649 := &yyv4647[yyj4647]
					yyv4649.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4647 := 0
		for ; !r.CheckBreak(); yyj4647++ {

			if yyj4647 >= len(yyv4647) {
				yyv4647 = append(yyv4647, LocalObjectReference{}) // var yyz4647 LocalObjectReference
				yyc4647 = true
			}
			yyh4647.ElemContainerState(yyj4647)
			if yyj4647 < len(yyv4647) {
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = LocalObjectReference{}
				} else {
					yyv4650 := &yyv4647[yyj4647]
					yyv4650.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4647 < len(yyv4647) {
			yyv4647 = yyv4647[:yyj4647]
			yyc4647 = true
		} else if yyj4647 == 0 && yyv4647 == nil {
			yyv4647 = []LocalObjectReference{}
			yyc4647 = true
		}
	}
	yyh4647.End()
	if yyc4647 {
		*v = yyv4647
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4651 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4652 := &yyv4651
		yy4652.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4653 := *v
	yyh4653, yyl4653 := z.DecSliceHelperStart()
	var yyc4653 bool
	if yyl4653 == 0 {
		if yyv4653 == nil {
			yyv4653 = []PodCondition{}
			yyc4653 = true
		} else if len(yyv4653) != 0 {
			yyv4653 = yyv4653[:0]
			yyc4653 = true
		}
	} else if yyl4653 > 0 {
		var yyrr4653, yyrl4653 int
		var yyrt4653 bool
		if yyl4653 > cap(yyv4653) {

			yyrg4653 := len(yyv4653) > 0
			yyv24653 := yyv4653
			yyrl4653, yyrt4653 = z.DecInferLen(yyl4653, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4653 {
				if yyrl4653 <= cap(yyv4653) {
					yyv4653 = yyv4653[:yyrl4653]
				} else {
					yyv4653 = make([]PodCondition, yyrl4653)
				}
			} else {
				yyv4653 = make([]PodCondition, yyrl4653)
			}
			yyc4653 = true
			yyrr4653 = len(yyv4653)
			if yyrg4653 {
				copy(yyv4653, yyv24653)
			}
		} else if yyl4653 != len(yyv4653) {
			yyv4653 = yyv4653[:yyl4653]
			yyc4653 = true
		}
		yyj4653 := 0
		for ; yyj4653 < yyrr4653; yyj4653++ {
			yyh4653.ElemContainerState(yyj4653)
			if r.TryDecodeAsNil() {
				yyv4653[yyj4653] = PodCondition{}
			} else {
				yyv4654 := &yyv4653[yyj4653]
				yyv4654.CodecDecodeSelf(d)
			}

		}
		if yyrt4653 {
			for ; yyj4653 < yyl4653; yyj4653++ {
				yyv4653 = append(yyv4653, PodCondition{})
				yyh4653.ElemContainerState(yyj4653)
				if r.TryDecodeAsNil() {
					yyv4653[yyj4653] = PodCondition{}
				} else {
					yyv4655 := &yyv4653[yyj4653]
					yyv4655.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4653 := 0
		for ; !r.CheckBreak(); yyj4653++ {

			if yyj4653 >= len(yyv4653) {
				yyv4653 = append(yyv4653, PodCondition{}) // var yyz4653 PodCondition
				yyc4653 = true
			}
			yyh4653.ElemContainerState(yyj4653)
			if yyj4653 < len(yyv4653) {
				if r.TryDecodeAsNil() {
					yyv4653[yyj4653] = PodCondition{}
				} else {
					yyv4656 := &yyv4653[yyj4653]
					yyv4656.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4653 < len(yyv4653) {
			yyv4653 = yyv4653[:yyj4653]
			yyc4653 = true
		} else if yyj4653 == 0 && yyv4653 == nil {
			yyv4653 = []PodCondition{}
			yyc4653 = true
		}
	}
	yyh4653.End()
	if yyc4653 {
		*v = yyv4653
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4657 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4658 := &yyv4657
		yy4658.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4659 := *v
	yyh4659, yyl4659 := z.DecSliceHelperStart()
	var yyc4659 bool
	if yyl4659 == 0 {
		if yyv4659 == nil {
			yyv4659 = []ContainerStatus{}
			yyc4659 = true
		} else if len(yyv4659) != 0 {
			yyv4659 = yyv4659[:0]
			yyc4659 = true
		}
	} else if yyl4659 > 0 {
		var yyrr4659, yyrl4659 int
		var yyrt4659 bool
		if yyl4659 > cap(yyv4659) {

			yyrg4659 := len(yyv4659) > 0
			yyv24659 := yyv4659
			yyrl4659, yyrt4659 = z.DecInferLen(yyl4659, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4659 {
				if yyrl4659 <= cap(yyv4659) {
					yyv4659 = yyv4659[:yyrl4659]
				} else {
					yyv4659 = make([]ContainerStatus, yyrl4659)
				}
			} else {
				yyv4659 = make([]ContainerStatus, yyrl4659)
			}
			yyc4659 = true
			yyrr4659 = len(yyv4659)
			if yyrg4659 {
				copy(yyv4659, yyv24659)
			}
		} else if yyl4659 != len(yyv4659) {
			yyv4659 = yyv4659[:yyl4659]
			yyc4659 = true
		}
		yyj4659 := 0
		for ; yyj4659 < yyrr4659; yyj4659++ {
			yyh4659.ElemContainerState(yyj4659)
			if r.TryDecodeAsNil() {
				yyv4659[yyj4659] = ContainerStatus{}
			} else {
				yyv4660 := &yyv4659[yyj4659]
				yyv4660.CodecDecodeSelf(d)
			}

		}
		if yyrt4659 {
			for ; yyj4659 < yyl4659; yyj4659++ {
				yyv4659 = append(yyv4659, ContainerStatus{})
				yyh4659.ElemContainerState(yyj4659)
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = ContainerStatus{}
				} else {
					yyv4661 := &yyv4659[yyj4659]
					yyv4661.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4659 := 0
		for ; !r.CheckBreak(); yyj4659++ {

			if yyj4659 >= len(yyv4659) {
				yyv4659 = append(yyv4659, ContainerStatus{}) // var yyz4659 ContainerStatus
				yyc4659 = true
			}
			yyh4659.ElemContainerState(yyj4659)
			if yyj4659 < len(yyv4659) {
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = ContainerStatus{}
				} else {
					yyv4662 := &yyv4659[yyj4659]
					yyv4662.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4659 < len(yyv4659) {
			yyv4659 = yyv4659[:yyj4659]
			yyc4659 = true
		} else if yyj4659 == 0 && yyv4659 == nil {
			yyv4659 = []ContainerStatus{}
			yyc4659 = true
		}
	}
	yyh4659.End()
	if yyc4659 {
		*v = yyv4659
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4663 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4664 := &yyv4663
		yy4664.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4665 := *v
	yyh4665, yyl4665 := z.DecSliceHelperStart()
	var yyc4665 bool
	if yyl4665 == 0 {
		if yyv4665 == nil {
			yyv4665 = []PodTemplate{}
			yyc4665 = true
		} else if len(yyv4665) != 0 {
			yyv4665 = yyv4665[:0]
			yyc4665 = true
		}
	} else if yyl4665 > 0 {
		var yyrr4665, yyrl4665 int
		var yyrt4665 bool
		if yyl4665 > cap(yyv4665) {

			yyrg4665 := len(yyv4665) > 0
			yyv24665 := yyv4665
			yyrl4665, yyrt4665 = z.DecInferLen(yyl4665, z.DecBasicHandle().MaxInitLen, 704)
			if yyrt4665 {
				if yyrl4665 <= cap(yyv4665) {
					yyv4665 = yyv4665[:yyrl4665]
				} else {
					yyv4665 = make([]PodTemplate, yyrl4665)
				}
			} else {
				yyv4665 = make([]PodTemplate, yyrl4665)
			}
			yyc4665 = true
			yyrr4665 = len(yyv4665)
			if yyrg4665 {
				copy(yyv4665, yyv24665)
			}
		} else if yyl4665 != len(yyv4665) {
			yyv4665 = yyv4665[:yyl4665]
			yyc4665 = true
		}
		yyj4665 := 0
		for ; yyj4665 < yyrr4665; yyj4665++ {
			yyh4665.ElemContainerState(yyj4665)
			if r.TryDecodeAsNil() {
				yyv4665[yyj4665] = PodTemplate{}
			} else {
				yyv4666 := &yyv4665[yyj4665]
				yyv4666.CodecDecodeSelf(d)
			}

		}
		if yyrt4665 {
			for ; yyj4665 < yyl4665; yyj4665++ {
				yyv4665 = append(yyv4665, PodTemplate{})
				yyh4665.ElemContainerState(yyj4665)
				if r.TryDecodeAsNil() {
					yyv4665[yyj4665] = PodTemplate{}
				} else {
					yyv4667 := &yyv4665[yyj4665]
					yyv4667.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4665 := 0
		for ; !r.CheckBreak(); yyj4665++ {

			if yyj4665 >= len(yyv4665) {
				yyv4665 = append(yyv4665, PodTemplate{}) // var yyz4665 PodTemplate
				yyc4665 = true
			}
			yyh4665.ElemContainerState(yyj4665)
			if yyj4665 < len(yyv4665) {
				if r.TryDecodeAsNil() {
					yyv4665[yyj4665] = PodTemplate{}
				} else {
					yyv4668 := &yyv4665[yyj4665]
					yyv4668.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4665 < len(yyv4665) {
			yyv4665 = yyv4665[:yyj4665]
			yyc4665 = true
		} else if yyj4665 == 0 && yyv4665 == nil {
			yyv4665 = []PodTemplate{}
			yyc4665 = true
		}
	}
	yyh4665.End()
	if yyc4665 {
		*v = yyv4665
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4669 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4670 := &yyv4669
		yy4670.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4671 := *v
	yyh4671, yyl4671 := z.DecSliceHelperStart()
	var yyc4671 bool
	if yyl4671 == 0 {
		if yyv4671 == nil {
			yyv4671 = []ReplicationController{}
			yyc4671 = true
		} else if len(yyv4671) != 0 {
			yyv4671 = yyv4671[:0]
			yyc4671 = true
		}
	} else if yyl4671 > 0 {
		var yyrr4671, yyrl4671 int
		var yyrt4671 bool
		if yyl4671 > cap(yyv4671) {

			yyrg4671 := len(yyv4671) > 0
			yyv24671 := yyv4671
			yyrl4671, yyrt4671 = z.DecInferLen(yyl4671, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4671 {
				if yyrl4671 <= cap(yyv4671) {
					yyv4671 = yyv4671[:yyrl4671]
				} else {
					yyv4671 = make([]ReplicationController, yyrl4671)
				}
			} else {
				yyv4671 = make([]ReplicationController, yyrl4671)
			}
			yyc4671 = true
			yyrr4671 = len(yyv4671)
			if yyrg4671 {
				copy(yyv4671, yyv24671)
			}
		} else if yyl4671 != len(yyv4671) {
			yyv4671 = yyv4671[:yyl4671]
			yyc4671 = true
		}
		yyj4671 := 0
		for ; yyj4671 < yyrr4671; yyj4671++ {
			yyh4671.ElemContainerState(yyj4671)
			if r.TryDecodeAsNil() {
				yyv4671[yyj4671] = ReplicationController{}
			} else {
				yyv4672 := &yyv4671[yyj4671]
				yyv4672.CodecDecodeSelf(d)
			}

		}
		if yyrt4671 {
			for ; yyj4671 < yyl4671; yyj4671++ {
				yyv4671 = append(yyv4671, ReplicationController{})
				yyh4671.ElemContainerState(yyj4671)
				if r.TryDecodeAsNil() {
					yyv4671[yyj4671] = ReplicationController{}
				} else {
					yyv4673 := &yyv4671[yyj4671]
					yyv4673.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4671 := 0
		for ; !r.CheckBreak(); yyj4671++ {

			if yyj4671 >= len(yyv4671) {
				yyv4671 = append(yyv4671, ReplicationController{}) // var yyz4671 ReplicationController
				yyc4671 = true
			}
			yyh4671.ElemContainerState(yyj4671)
			if yyj4671 < len(yyv4671) {
				if r.TryDecodeAsNil() {
					yyv4671[yyj4671] = ReplicationController{}
				} else {
					yyv4674 := &yyv4671[yyj4671]
					yyv4674.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4671 < len(yyv4671) {
			yyv4671 = yyv4671[:yyj4671]
			yyc4671 = true
		} else if yyj4671 == 0 && yyv4671 == nil {
			yyv4671 = []ReplicationController{}
			yyc4671 = true
		}
	}
	yyh4671.End()
	if yyc4671 {
		*v = yyv4671
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4675 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4676 := &yyv4675
		yy4676.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4677 := *v
	yyh4677, yyl4677 := z.DecSliceHelperStart()
	var yyc4677 bool
	if yyl4677 == 0 {
		if yyv4677 == nil {
			yyv4677 = []Service{}
			yyc4677 = true
		} else if len(yyv4677) != 0 {
			yyv4677 = yyv4677[:0]
			yyc4677 = true
		}
	} else if yyl4677 > 0 {
		var yyrr4677, yyrl4677 int
		var yyrt4677 bool
		if yyl4677 > cap(yyv4677) {

			yyrg4677 := len(yyv4677) > 0
			yyv24677 := yyv4677
			yyrl4677, yyrt4677 = z.DecInferLen(yyl4677, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4677 {
				if yyrl4677 <= cap(yyv4677) {
					yyv4677 = yyv4677[:yyrl4677]
				} else {
					yyv4677 = make([]Service, yyrl4677)
				}
			} else {
				yyv4677 = make([]Service, yyrl4677)
			}
			yyc4677 = true
			yyrr4677 = len(yyv4677)
			if yyrg4677 {
				copy(yyv4677, yyv24677)
			}
		} else if yyl4677 != len(yyv4677) {
			yyv4677 = yyv4677[:yyl4677]
			yyc4677 = true
		}
		yyj4677 := 0
		for ; yyj4677 < yyrr4677; yyj4677++ {
			yyh4677.ElemContainerState(yyj4677)
			if r.TryDecodeAsNil() {
				yyv4677[yyj4677] = Service{}
			} else {
				yyv4678 := &yyv4677[yyj4677]
				yyv4678.CodecDecodeSelf(d)
			}

		}
		if yyrt4677 {
			for ; yyj4677 < yyl4677; yyj4677++ {
				yyv4677 = append(yyv4677, Service{})
				yyh4677.ElemContainerState(yyj4677)
				if r.TryDecodeAsNil() {
					yyv4677[yyj4677] = Service{}
				} else {
					yyv4679 := &yyv4677[yyj4677]
					yyv4679.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4677 := 0
		for ; !r.CheckBreak(); yyj4677++ {

			if yyj4677 >= len(yyv4677) {
				yyv4677 = append(yyv4677, Service{}) // var yyz4677 Service
				yyc4677 = true
			}
			yyh4677.ElemContainerState(yyj4677)
			if yyj4677 < len(yyv4677) {
				if r.TryDecodeAsNil() {
					yyv4677[yyj4677] = Service{}
				} else {
					yyv4680 := &yyv4677[yyj4677]
					yyv4680.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4677 < len(yyv4677) {
			yyv4677 = yyv4677[:yyj4677]
			yyc4677 = true
		} else if yyj4677 == 0 && yyv4677 == nil {
			yyv4677 = []Service{}
			yyc4677 = true
		}
	}
	yyh4677.End()
	if yyc4677 {
		*v = yyv4677
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4681 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4682 := &yyv4681
		yy4682.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4683 := *v
	yyh4683, yyl4683 := z.DecSliceHelperStart()
	var yyc4683 bool
	if yyl4683 == 0 {
		if yyv4683 == nil {
			yyv4683 = []LoadBalancerIngress{}
			yyc4683 = true
		} else if len(yyv4683) != 0 {
			yyv4683 = yyv4683[:0]
			yyc4683 = true
		}
	} else if yyl4683 > 0 {
		var yyrr4683, yyrl4683 int
		var yyrt4683 bool
		if yyl4683 > cap(yyv4683) {

			yyrg4683 := len(yyv4683) > 0
			yyv24683 := yyv4683
			yyrl4683, yyrt4683 = z.DecInferLen(yyl4683, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4683 {
				if yyrl4683 <= cap(yyv4683) {
					yyv4683 = yyv4683[:yyrl4683]
				} else {
					yyv4683 = make([]LoadBalancerIngress, yyrl4683)
				}
			} else {
				yyv4683 = make([]LoadBalancerIngress, yyrl4683)
			}
			yyc4683 = true
			yyrr4683 = len(yyv4683)
			if yyrg4683 {
				copy(yyv4683, yyv24683)
			}
		} else if yyl4683 != len(yyv4683) {
			yyv4683 = yyv4683[:yyl4683]
			yyc4683 = true
		}
		yyj4683 := 0
		for ; yyj4683 < yyrr4683; yyj4683++ {
			yyh4683.ElemContainerState(yyj4683)
			if r.TryDecodeAsNil() {
				yyv4683[yyj4683] = LoadBalancerIngress{}
			} else {
				yyv4684 := &yyv4683[yyj4683]
				yyv4684.CodecDecodeSelf(d)
			}

		}
		if yyrt4683 {
			for ; yyj4683 < yyl4683; yyj4683++ {
				yyv4683 = append(yyv4683, LoadBalancerIngress{})
				yyh4683.ElemContainerState(yyj4683)
				if r.TryDecodeAsNil() {
					yyv4683[yyj4683] = LoadBalancerIngress{}
				} else {
					yyv4685 := &yyv4683[yyj4683]
					yyv4685.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4683 := 0
		for ; !r.CheckBreak(); yyj4683++ {

			if yyj4683 >= len(yyv4683) {
				yyv4683 = append(yyv4683, LoadBalancerIngress{}) // var yyz4683 LoadBalancerIngress
				yyc4683 = true
			}
			yyh4683.ElemContainerState(yyj4683)
			if yyj4683 < len(yyv4683) {
				if r.TryDecodeAsNil() {
					yyv4683[yyj4683] = LoadBalancerIngress{}
				} else {
					yyv4686 := &yyv4683[yyj4683]
					yyv4686.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4683 < len(yyv4683) {
			yyv4683 = yyv4683[:yyj4683]
			yyc4683 = true
		} else if yyj4683 == 0 && yyv4683 == nil {
			yyv4683 = []LoadBalancerIngress{}
			yyc4683 = true
		}
	}
	yyh4683.End()
	if yyc4683 {
		*v = yyv4683
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4687 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4688 := &yyv4687
		yy4688.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4689 := *v
	yyh4689, yyl4689 := z.DecSliceHelperStart()
	var yyc4689 bool
	if yyl4689 == 0 {
		if yyv4689 == nil {
			yyv4689 = []ServicePort{}
			yyc4689 = true
		} else if len(yyv4689) != 0 {
			yyv4689 = yyv4689[:0]
			yyc4689 = true
		}
	} else if yyl4689 > 0 {
		var yyrr4689, yyrl4689 int
		var yyrt4689 bool
		if yyl4689 > cap(yyv4689) {

			yyrg4689 := len(yyv4689) > 0
			yyv24689 := yyv4689
			yyrl4689, yyrt4689 = z.DecInferLen(yyl4689, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4689 {
				if yyrl4689 <= cap(yyv4689) {
					yyv4689 = yyv4689[:yyrl4689]
				} else {
					yyv4689 = make([]ServicePort, yyrl4689)
				}
			} else {
				yyv4689 = make([]ServicePort, yyrl4689)
			}
			yyc4689 = true
			yyrr4689 = len(yyv4689)
			if yyrg4689 {
				copy(yyv4689, yyv24689)
			}
		} else if yyl4689 != len(yyv4689) {
			yyv4689 = yyv4689[:yyl4689]
			yyc4689 = true
		}
		yyj4689 := 0
		for ; yyj4689 < yyrr4689; yyj4689++ {
			yyh4689.ElemContainerState(yyj4689)
			if r.TryDecodeAsNil() {
				yyv4689[yyj4689] = ServicePort{}
			} else {
				yyv4690 := &yyv4689[yyj4689]
				yyv4690.CodecDecodeSelf(d)
			}

		}
		if yyrt4689 {
			for ; yyj4689 < yyl4689; yyj4689++ {
				yyv4689 = append(yyv4689, ServicePort{})
				yyh4689.ElemContainerState(yyj4689)
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = ServicePort{}
				} else {
					yyv4691 := &yyv4689[yyj4689]
					yyv4691.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4689 := 0
		for ; !r.CheckBreak(); yyj4689++ {

			if yyj4689 >= len(yyv4689) {
				yyv4689 = append(yyv4689, ServicePort{}) // var yyz4689 ServicePort
				yyc4689 = true
			}
			yyh4689.ElemContainerState(yyj4689)
			if yyj4689 < len(yyv4689) {
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = ServicePort{}
				} else {
					yyv4692 := &yyv4689[yyj4689]
					yyv4692.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4689 < len(yyv4689) {
			yyv4689 = yyv4689[:yyj4689]
			yyc4689 = true
		} else if yyj4689 == 0 && yyv4689 == nil {
			yyv4689 = []ServicePort{}
			yyc4689 = true
		}
	}
	yyh4689.End()
	if yyc4689 {
		*v = yyv4689
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4693 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4694 := &yyv4693
		yy4694.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4695 := *v
	yyh4695, yyl4695 := z.DecSliceHelperStart()
	var yyc4695 bool
	if yyl4695 == 0 {
		if yyv4695 == nil {
			yyv4695 = []ObjectReference{}
			yyc4695 = true
		} else if len(yyv4695) != 0 {
			yyv4695 = yyv4695[:0]
			yyc4695 = true
		}
	} else if yyl4695 > 0 {
		var yyrr4695, yyrl4695 int
		var yyrt4695 bool
		if yyl4695 > cap(yyv4695) {

			yyrg4695 := len(yyv4695) > 0
			yyv24695 := yyv4695
			yyrl4695, yyrt4695 = z.DecInferLen(yyl4695, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4695 {
				if yyrl4695 <= cap(yyv4695) {
					yyv4695 = yyv4695[:yyrl4695]
				} else {
					yyv4695 = make([]ObjectReference, yyrl4695)
				}
			} else {
				yyv4695 = make([]ObjectReference, yyrl4695)
			}
			yyc4695 = true
			yyrr4695 = len(yyv4695)
			if yyrg4695 {
				copy(yyv4695, yyv24695)
			}
		} else if yyl4695 != len(yyv4695) {
			yyv4695 = yyv4695[:yyl4695]
			yyc4695 = true
		}
		yyj4695 := 0
		for ; yyj4695 < yyrr4695; yyj4695++ {
			yyh4695.ElemContainerState(yyj4695)
			if r.TryDecodeAsNil() {
				yyv4695[yyj4695] = ObjectReference{}
			} else {
				yyv4696 := &yyv4695[yyj4695]
				yyv4696.CodecDecodeSelf(d)
			}

		}
		if yyrt4695 {
			for ; yyj4695 < yyl4695; yyj4695++ {
				yyv4695 = append(yyv4695, ObjectReference{})
				yyh4695.ElemContainerState(yyj4695)
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ObjectReference{}
				} else {
					yyv4697 := &yyv4695[yyj4695]
					yyv4697.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4695 := 0
		for ; !r.CheckBreak(); yyj4695++ {

			if yyj4695 >= len(yyv4695) {
				yyv4695 = append(yyv4695, ObjectReference{}) // var yyz4695 ObjectReference
				yyc4695 = true
			}
			yyh4695.ElemContainerState(yyj4695)
			if yyj4695 < len(yyv4695) {
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ObjectReference{}
				} else {
					yyv4698 := &yyv4695[yyj4695]
					yyv4698.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4695 < len(yyv4695) {
			yyv4695 = yyv4695[:yyj4695]
			yyc4695 = true
		} else if yyj4695 == 0 && yyv4695 == nil {
			yyv4695 = []ObjectReference{}
			yyc4695 = true
		}
	}
	yyh4695.End()
	if yyc4695 {
		*v = yyv4695
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4699 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4700 := &yyv4699
		yy4700.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4701 := *v
	yyh4701, yyl4701 := z.DecSliceHelperStart()
	var yyc4701 bool
	if yyl4701 == 0 {
		if yyv4701 == nil {
			yyv4701 = []ServiceAccount{}
			yyc4701 = true
		} else if len(yyv4701) != 0 {
			yyv4701 = yyv4701[:0]
			yyc4701 = true
		}
	} else if yyl4701 > 0 {
		var yyrr4701, yyrl4701 int
		var yyrt4701 bool
		if yyl4701 > cap(yyv4701) {

			yyrg4701 := len(yyv4701) > 0
			yyv24701 := yyv4701
			yyrl4701, yyrt4701 = z.DecInferLen(yyl4701, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4701 {
				if yyrl4701 <= cap(yyv4701) {
					yyv4701 = yyv4701[:yyrl4701]
				} else {
					yyv4701 = make([]ServiceAccount, yyrl4701)
				}
			} else {
				yyv4701 = make([]ServiceAccount, yyrl4701)
			}
			yyc4701 = true
			yyrr4701 = len(yyv4701)
			if yyrg4701 {
				copy(yyv4701, yyv24701)
			}
		} else if yyl4701 != len(yyv4701) {
			yyv4701 = yyv4701[:yyl4701]
			yyc4701 = true
		}
		yyj4701 := 0
		for ; yyj4701 < yyrr4701; yyj4701++ {
			yyh4701.ElemContainerState(yyj4701)
			if r.TryDecodeAsNil() {
				yyv4701[yyj4701] = ServiceAccount{}
			} else {
				yyv4702 := &yyv4701[yyj4701]
				yyv4702.CodecDecodeSelf(d)
			}

		}
		if yyrt4701 {
			for ; yyj4701 < yyl4701; yyj4701++ {
				yyv4701 = append(yyv4701, ServiceAccount{})
				yyh4701.ElemContainerState(yyj4701)
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = ServiceAccount{}
				} else {
					yyv4703 := &yyv4701[yyj4701]
					yyv4703.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4701 := 0
		for ; !r.CheckBreak(); yyj4701++ {

			if yyj4701 >= len(yyv4701) {
				yyv4701 = append(yyv4701, ServiceAccount{}) // var yyz4701 ServiceAccount
				yyc4701 = true
			}
			yyh4701.ElemContainerState(yyj4701)
			if yyj4701 < len(yyv4701) {
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = ServiceAccount{}
				} else {
					yyv4704 := &yyv4701[yyj4701]
					yyv4704.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4701 < len(yyv4701) {
			yyv4701 = yyv4701[:yyj4701]
			yyc4701 = true
		} else if yyj4701 == 0 && yyv4701 == nil {
			yyv4701 = []ServiceAccount{}
			yyc4701 = true
		}
	}
	yyh4701.End()
	if yyc4701 {
		*v = yyv4701
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4705 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4706 := &yyv4705
		yy4706.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4707 := *v
	yyh4707, yyl4707 := z.DecSliceHelperStart()
	var yyc4707 bool
	if yyl4707 == 0 {
		if yyv4707 == nil {
			yyv4707 = []EndpointSubset{}
			yyc4707 = true
		} else if len(yyv4707) != 0 {
			yyv4707 = yyv4707[:0]
			yyc4707 = true
		}
	} else if yyl4707 > 0 {
		var yyrr4707, yyrl4707 int
		var yyrt4707 bool
		if yyl4707 > cap(yyv4707) {

			yyrg4707 := len(yyv4707) > 0
			yyv24707 := yyv4707
			yyrl4707, yyrt4707 = z.DecInferLen(yyl4707, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4707 {
				if yyrl4707 <= cap(yyv4707) {
					yyv4707 = yyv4707[:yyrl4707]
				} else {
					yyv4707 = make([]EndpointSubset, yyrl4707)
				}
			} else {
				yyv4707 = make([]EndpointSubset, yyrl4707)
			}
			yyc4707 = true
			yyrr4707 = len(yyv4707)
			if yyrg4707 {
				copy(yyv4707, yyv24707)
			}
		} else if yyl4707 != len(yyv4707) {
			yyv4707 = yyv4707[:yyl4707]
			yyc4707 = true
		}
		yyj4707 := 0
		for ; yyj4707 < yyrr4707; yyj4707++ {
			yyh4707.ElemContainerState(yyj4707)
			if r.TryDecodeAsNil() {
				yyv4707[yyj4707] = EndpointSubset{}
			} else {
				yyv4708 := &yyv4707[yyj4707]
				yyv4708.CodecDecodeSelf(d)
			}

		}
		if yyrt4707 {
			for ; yyj4707 < yyl4707; yyj4707++ {
				yyv4707 = append(yyv4707, EndpointSubset{})
				yyh4707.ElemContainerState(yyj4707)
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = EndpointSubset{}
				} else {
					yyv4709 := &yyv4707[yyj4707]
					yyv4709.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4707 := 0
		for ; !r.CheckBreak(); yyj4707++ {

			if yyj4707 >= len(yyv4707) {
				yyv4707 = append(yyv4707, EndpointSubset{}) // var yyz4707 EndpointSubset
				yyc4707 = true
			}
			yyh4707.ElemContainerState(yyj4707)
			if yyj4707 < len(yyv4707) {
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = EndpointSubset{}
				} else {
					yyv4710 := &yyv4707[yyj4707]
					yyv4710.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4707 < len(yyv4707) {
			yyv4707 = yyv4707[:yyj4707]
			yyc4707 = true
		} else if yyj4707 == 0 && yyv4707 == nil {
			yyv4707 = []EndpointSubset{}
			yyc4707 = true
		}
	}
	yyh4707.End()
	if yyc4707 {
		*v = yyv4707
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4711 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4712 := &yyv4711
		yy4712.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4713 := *v
	yyh4713, yyl4713 := z.DecSliceHelperStart()
	var yyc4713 bool
	if yyl4713 == 0 {
		if yyv4713 == nil {
			yyv4713 = []EndpointAddress{}
			yyc4713 = true
		} else if len(yyv4713) != 0 {
			yyv4713 = yyv4713[:0]
			yyc4713 = true
		}
	} else if yyl4713 > 0 {
		var yyrr4713, yyrl4713 int
		var yyrt4713 bool
		if yyl4713 > cap(yyv4713) {

			yyrg4713 := len(yyv4713) > 0
			yyv24713 := yyv4713
			yyrl4713, yyrt4713 = z.DecInferLen(yyl4713, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4713 {
				if yyrl4713 <= cap(yyv4713) {
					yyv4713 = yyv4713[:yyrl4713]
				} else {
					yyv4713 = make([]EndpointAddress, yyrl4713)
				}
			} else {
				yyv4713 = make([]EndpointAddress, yyrl4713)
			}
			yyc4713 = true
			yyrr4713 = len(yyv4713)
			if yyrg4713 {
				copy(yyv4713, yyv24713)
			}
		} else if yyl4713 != len(yyv4713) {
			yyv4713 = yyv4713[:yyl4713]
			yyc4713 = true
		}
		yyj4713 := 0
		for ; yyj4713 < yyrr4713; yyj4713++ {
			yyh4713.ElemContainerState(yyj4713)
			if r.TryDecodeAsNil() {
				yyv4713[yyj4713] = EndpointAddress{}
			} else {
				yyv4714 := &yyv4713[yyj4713]
				yyv4714.CodecDecodeSelf(d)
			}

		}
		if yyrt4713 {
			for ; yyj4713 < yyl4713; yyj4713++ {
				yyv4713 = append(yyv4713, EndpointAddress{})
				yyh4713.ElemContainerState(yyj4713)
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = EndpointAddress{}
				} else {
					yyv4715 := &yyv4713[yyj4713]
					yyv4715.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4713 := 0
		for ; !r.CheckBreak(); yyj4713++ {

			if yyj4713 >= len(yyv4713) {
				yyv4713 = append(yyv4713, EndpointAddress{}) // var yyz4713 EndpointAddress
				yyc4713 = true
			}
			yyh4713.ElemContainerState(yyj4713)
			if yyj4713 < len(yyv4713) {
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = EndpointAddress{}
				} else {
					yyv4716 := &yyv4713[yyj4713]
					yyv4716.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4713 < len(yyv4713) {
			yyv4713 = yyv4713[:yyj4713]
			yyc4713 = true
		} else if yyj4713 == 0 && yyv4713 == nil {
			yyv4713 = []EndpointAddress{}
			yyc4713 = true
		}
	}
	yyh4713.End()
	if yyc4713 {
		*v = yyv4713
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4717 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4718 := &yyv4717
		yy4718.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4719 := *v
	yyh4719, yyl4719 := z.DecSliceHelperStart()
	var yyc4719 bool
	if yyl4719 == 0 {
		if yyv4719 == nil {
			yyv4719 = []EndpointPort{}
			yyc4719 = true
		} else if len(yyv4719) != 0 {
			yyv4719 = yyv4719[:0]
			yyc4719 = true
		}
	} else if yyl4719 > 0 {
		var yyrr4719, yyrl4719 int
		var yyrt4719 bool
		if yyl4719 > cap(yyv4719) {

			yyrg4719 := len(yyv4719) > 0
			yyv24719 := yyv4719
			yyrl4719, yyrt4719 = z.DecInferLen(yyl4719, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4719 {
				if yyrl4719 <= cap(yyv4719) {
					yyv4719 = yyv4719[:yyrl4719]
				} else {
					yyv4719 = make([]EndpointPort, yyrl4719)
				}
			} else {
				yyv4719 = make([]EndpointPort, yyrl4719)
			}
			yyc4719 = true
			yyrr4719 = len(yyv4719)
			if yyrg4719 {
				copy(yyv4719, yyv24719)
			}
		} else if yyl4719 != len(yyv4719) {
			yyv4719 = yyv4719[:yyl4719]
			yyc4719 = true
		}
		yyj4719 := 0
		for ; yyj4719 < yyrr4719; yyj4719++ {
			yyh4719.ElemContainerState(yyj4719)
			if r.TryDecodeAsNil() {
				yyv4719[yyj4719] = EndpointPort{}
			} else {
				yyv4720 := &yyv4719[yyj4719]
				yyv4720.CodecDecodeSelf(d)
			}

		}
		if yyrt4719 {
			for ; yyj4719 < yyl4719; yyj4719++ {
				yyv4719 = append(yyv4719, EndpointPort{})
				yyh4719.ElemContainerState(yyj4719)
				if r.TryDecodeAsNil() {
					yyv4719[yyj4719] = EndpointPort{}
				} else {
					yyv4721 := &yyv4719[yyj4719]
					yyv4721.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4719 := 0
		for ; !r.CheckBreak(); yyj4719++ {

			if yyj4719 >= len(yyv4719) {
				yyv4719 = append(yyv4719, EndpointPort{}) // var yyz4719 EndpointPort
				yyc4719 = true
			}
			yyh4719.ElemContainerState(yyj4719)
			if yyj4719 < len(yyv4719) {
				if r.TryDecodeAsNil() {
					yyv4719[yyj4719] = EndpointPort{}
				} else {
					yyv4722 := &yyv4719[yyj4719]
					yyv4722.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4719 < len(yyv4719) {
			yyv4719 = yyv4719[:yyj4719]
			yyc4719 = true
		} else if yyj4719 == 0 && yyv4719 == nil {
			yyv4719 = []EndpointPort{}
			yyc4719 = true
		}
	}
	yyh4719.End()
	if yyc4719 {
		*v = yyv4719
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4723 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4724 := &yyv4723
		yy4724.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4725 := *v
	yyh4725, yyl4725 := z.DecSliceHelperStart()
	var yyc4725 bool
	if yyl4725 == 0 {
		if yyv4725 == nil {
			yyv4725 = []Endpoints{}
			yyc4725 = true
		} else if len(yyv4725) != 0 {
			yyv4725 = yyv4725[:0]
			yyc4725 = true
		}
	} else if yyl4725 > 0 {
		var yyrr4725, yyrl4725 int
		var yyrt4725 bool
		if yyl4725 > cap(yyv4725) {

			yyrg4725 := len(yyv4725) > 0
			yyv24725 := yyv4725
			yyrl4725, yyrt4725 = z.DecInferLen(yyl4725, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4725 {
				if yyrl4725 <= cap(yyv4725) {
					yyv4725 = yyv4725[:yyrl4725]
				} else {
					yyv4725 = make([]Endpoints, yyrl4725)
				}
			} else {
				yyv4725 = make([]Endpoints, yyrl4725)
			}
			yyc4725 = true
			yyrr4725 = len(yyv4725)
			if yyrg4725 {
				copy(yyv4725, yyv24725)
			}
		} else if yyl4725 != len(yyv4725) {
			yyv4725 = yyv4725[:yyl4725]
			yyc4725 = true
		}
		yyj4725 := 0
		for ; yyj4725 < yyrr4725; yyj4725++ {
			yyh4725.ElemContainerState(yyj4725)
			if r.TryDecodeAsNil() {
				yyv4725[yyj4725] = Endpoints{}
			} else {
				yyv4726 := &yyv4725[yyj4725]
				yyv4726.CodecDecodeSelf(d)
			}

		}
		if yyrt4725 {
			for ; yyj4725 < yyl4725; yyj4725++ {
				yyv4725 = append(yyv4725, Endpoints{})
				yyh4725.ElemContainerState(yyj4725)
				if r.TryDecodeAsNil() {
					yyv4725[yyj4725] = Endpoints{}
				} else {
					yyv4727 := &yyv4725[yyj4725]
					yyv4727.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4725 := 0
		for ; !r.CheckBreak(); yyj4725++ {

			if yyj4725 >= len(yyv4725) {
				yyv4725 = append(yyv4725, Endpoints{}) // var yyz4725 Endpoints
				yyc4725 = true
			}
			yyh4725.ElemContainerState(yyj4725)
			if yyj4725 < len(yyv4725) {
				if r.TryDecodeAsNil() {
					yyv4725[yyj4725] = Endpoints{}
				} else {
					yyv4728 := &yyv4725[yyj4725]
					yyv4728.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4725 < len(yyv4725) {
			yyv4725 = yyv4725[:yyj4725]
			yyc4725 = true
		} else if yyj4725 == 0 && yyv4725 == nil {
			yyv4725 = []Endpoints{}
			yyc4725 = true
		}
	}
	yyh4725.End()
	if yyc4725 {
		*v = yyv4725
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4729 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4730 := &yyv4729
		yy4730.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4731 := *v
	yyh4731, yyl4731 := z.DecSliceHelperStart()
	var yyc4731 bool
	if yyl4731 == 0 {
		if yyv4731 == nil {
			yyv4731 = []NodeCondition{}
			yyc4731 = true
		} else if len(yyv4731) != 0 {
			yyv4731 = yyv4731[:0]
			yyc4731 = true
		}
	} else if yyl4731 > 0 {
		var yyrr4731, yyrl4731 int
		var yyrt4731 bool
		if yyl4731 > cap(yyv4731) {

			yyrg4731 := len(yyv4731) > 0
			yyv24731 := yyv4731
			yyrl4731, yyrt4731 = z.DecInferLen(yyl4731, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4731 {
				if yyrl4731 <= cap(yyv4731) {
					yyv4731 = yyv4731[:yyrl4731]
				} else {
					yyv4731 = make([]NodeCondition, yyrl4731)
				}
			} else {
				yyv4731 = make([]NodeCondition, yyrl4731)
			}
			yyc4731 = true
			yyrr4731 = len(yyv4731)
			if yyrg4731 {
				copy(yyv4731, yyv24731)
			}
		} else if yyl4731 != len(yyv4731) {
			yyv4731 = yyv4731[:yyl4731]
			yyc4731 = true
		}
		yyj4731 := 0
		for ; yyj4731 < yyrr4731; yyj4731++ {
			yyh4731.ElemContainerState(yyj4731)
			if r.TryDecodeAsNil() {
				yyv4731[yyj4731] = NodeCondition{}
			} else {
				yyv4732 := &yyv4731[yyj4731]
				yyv4732.CodecDecodeSelf(d)
			}

		}
		if yyrt4731 {
			for ; yyj4731 < yyl4731; yyj4731++ {
				yyv4731 = append(yyv4731, NodeCondition{})
				yyh4731.ElemContainerState(yyj4731)
				if r.TryDecodeAsNil() {
					yyv4731[yyj4731] = NodeCondition{}
				} else {
					yyv4733 := &yyv4731[yyj4731]
					yyv4733.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4731 := 0
		for ; !r.CheckBreak(); yyj4731++ {

			if yyj4731 >= len(yyv4731) {
				yyv4731 = append(yyv4731, NodeCondition{}) // var yyz4731 NodeCondition
				yyc4731 = true
			}
			yyh4731.ElemContainerState(yyj4731)
			if yyj4731 < len(yyv4731) {
				if r.TryDecodeAsNil() {
					yyv4731[yyj4731] = NodeCondition{}
				} else {
					yyv4734 := &yyv4731[yyj4731]
					yyv4734.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4731 < len(yyv4731) {
			yyv4731 = yyv4731[:yyj4731]
			yyc4731 = true
		} else if yyj4731 == 0 && yyv4731 == nil {
			yyv4731 = []NodeCondition{}
			yyc4731 = true
		}
	}
	yyh4731.End()
	if yyc4731 {
		*v = yyv4731
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4735 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4736 := &yyv4735
		yy4736.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4737 := *v
	yyh4737, yyl4737 := z.DecSliceHelperStart()
	var yyc4737 bool
	if yyl4737 == 0 {
		if yyv4737 == nil {
			yyv4737 = []NodeAddress{}
			yyc4737 = true
		} else if len(yyv4737) != 0 {
			yyv4737 = yyv4737[:0]
			yyc4737 = true
		}
	} else if yyl4737 > 0 {
		var yyrr4737, yyrl4737 int
		var yyrt4737 bool
		if yyl4737 > cap(yyv4737) {

			yyrg4737 := len(yyv4737) > 0
			yyv24737 := yyv4737
			yyrl4737, yyrt4737 = z.DecInferLen(yyl4737, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4737 {
				if yyrl4737 <= cap(yyv4737) {
					yyv4737 = yyv4737[:yyrl4737]
				} else {
					yyv4737 = make([]NodeAddress, yyrl4737)
				}
			} else {
				yyv4737 = make([]NodeAddress, yyrl4737)
			}
			yyc4737 = true
			yyrr4737 = len(yyv4737)
			if yyrg4737 {
				copy(yyv4737, yyv24737)
			}
		} else if yyl4737 != len(yyv4737) {
			yyv4737 = yyv4737[:yyl4737]
			yyc4737 = true
		}
		yyj4737 := 0
		for ; yyj4737 < yyrr4737; yyj4737++ {
			yyh4737.ElemContainerState(yyj4737)
			if r.TryDecodeAsNil() {
				yyv4737[yyj4737] = NodeAddress{}
			} else {
				yyv4738 := &yyv4737[yyj4737]
				yyv4738.CodecDecodeSelf(d)
			}

		}
		if yyrt4737 {
			for ; yyj4737 < yyl4737; yyj4737++ {
				yyv4737 = append(yyv4737, NodeAddress{})
				yyh4737.ElemContainerState(yyj4737)
				if r.TryDecodeAsNil() {
					yyv4737[yyj4737] = NodeAddress{}
				} else {
					yyv4739 := &yyv4737[yyj4737]
					yyv4739.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4737 := 0
		for ; !r.CheckBreak(); yyj4737++ {

			if yyj4737 >= len(yyv4737) {
				yyv4737 = append(yyv4737, NodeAddress{}) // var yyz4737 NodeAddress
				yyc4737 = true
			}
			yyh4737.ElemContainerState(yyj4737)
			if yyj4737 < len(yyv4737) {
				if r.TryDecodeAsNil() {
					yyv4737[yyj4737] = NodeAddress{}
				} else {
					yyv4740 := &yyv4737[yyj4737]
					yyv4740.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4737 < len(yyv4737) {
			yyv4737 = yyv4737[:yyj4737]
			yyc4737 = true
		} else if yyj4737 == 0 && yyv4737 == nil {
			yyv4737 = []NodeAddress{}
			yyc4737 = true
		}
	}
	yyh4737.End()
	if yyc4737 {
		*v = yyv4737
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4741 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4742 := &yyv4741
		yy4742.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4743 := *v
	yyh4743, yyl4743 := z.DecSliceHelperStart()
	var yyc4743 bool
	if yyl4743 == 0 {
		if yyv4743 == nil {
			yyv4743 = []ContainerImage{}
			yyc4743 = true
		} else if len(yyv4743) != 0 {
			yyv4743 = yyv4743[:0]
			yyc4743 = true
		}
	} else if yyl4743 > 0 {
		var yyrr4743, yyrl4743 int
		var yyrt4743 bool
		if yyl4743 > cap(yyv4743) {

			yyrg4743 := len(yyv4743) > 0
			yyv24743 := yyv4743
			yyrl4743, yyrt4743 = z.DecInferLen(yyl4743, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4743 {
				if yyrl4743 <= cap(yyv4743) {
					yyv4743 = yyv4743[:yyrl4743]
				} else {
					yyv4743 = make([]ContainerImage, yyrl4743)
				}
			} else {
				yyv4743 = make([]ContainerImage, yyrl4743)
			}
			yyc4743 = true
			yyrr4743 = len(yyv4743)
			if yyrg4743 {
				copy(yyv4743, yyv24743)
			}
		} else if yyl4743 != len(yyv4743) {
			yyv4743 = yyv4743[:yyl4743]
			yyc4743 = true
		}
		yyj4743 := 0
		for ; yyj4743 < yyrr4743; yyj4743++ {
			yyh4743.ElemContainerState(yyj4743)
			if r.TryDecodeAsNil() {
				yyv4743[yyj4743] = ContainerImage{}
			} else {
				yyv4744 := &yyv4743[yyj4743]
				yyv4744.CodecDecodeSelf(d)
			}

		}
		if yyrt4743 {
			for ; yyj4743 < yyl4743; yyj4743++ {
				yyv4743 = append(yyv4743, ContainerImage{})
				yyh4743.ElemContainerState(yyj4743)
				if r.TryDecodeAsNil() {
					yyv4743[yyj4743] = ContainerImage{}
				} else {
					yyv4745 := &yyv4743[yyj4743]
					yyv4745.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4743 := 0
		for ; !r.CheckBreak(); yyj4743++ {

			if yyj4743 >= len(yyv4743) {
				yyv4743 = append(yyv4743, ContainerImage{}) // var yyz4743 ContainerImage
				yyc4743 = true
			}
			yyh4743.ElemContainerState(yyj4743)
			if yyj4743 < len(yyv4743) {
				if r.TryDecodeAsNil() {
					yyv4743[yyj4743] = ContainerImage{}
				} else {
					yyv4746 := &yyv4743[yyj4743]
					yyv4746.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4743 < len(yyv4743) {
			yyv4743 = yyv4743[:yyj4743]
			yyc4743 = true
		} else if yyj4743 == 0 && yyv4743 == nil {
			yyv4743 = []ContainerImage{}
			yyc4743 = true
		}
	}
	yyh4743.End()
	if yyc4743 {
		*v = yyv4743
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4747 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4747.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4748 := *v
	yyh4748, yyl4748 := z.DecSliceHelperStart()
	var yyc4748 bool
	if yyl4748 == 0 {
		if yyv4748 == nil {
			yyv4748 = []UniqueVolumeName{}
			yyc4748 = true
		} else if len(yyv4748) != 0 {
			yyv4748 = yyv4748[:0]
			yyc4748 = true
		}
	} else if yyl4748 > 0 {
		var yyrr4748, yyrl4748 int
		var yyrt4748 bool
		if yyl4748 > cap(yyv4748) {

			yyrl4748, yyrt4748 = z.DecInferLen(yyl4748, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4748 {
				if yyrl4748 <= cap(yyv4748) {
					yyv4748 = yyv4748[:yyrl4748]
				} else {
					yyv4748 = make([]UniqueVolumeName, yyrl4748)
				}
			} else {
				yyv4748 = make([]UniqueVolumeName, yyrl4748)
			}
			yyc4748 = true
			yyrr4748 = len(yyv4748)
		} else if yyl4748 != len(yyv4748) {
			yyv4748 = yyv4748[:yyl4748]
			yyc4748 = true
		}
		yyj4748 := 0
		for ; yyj4748 < yyrr4748; yyj4748++ {
			yyh4748.ElemContainerState(yyj4748)
			if r.TryDecodeAsNil() {
				yyv4748[yyj4748] = ""
			} else {
				yyv4748[yyj4748] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4748 {
			for ; yyj4748 < yyl4748; yyj4748++ {
				yyv4748 = append(yyv4748, "")
				yyh4748.ElemContainerState(yyj4748)
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = ""
				} else {
					yyv4748[yyj4748] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4748 := 0
		for ; !r.CheckBreak(); yyj4748++ {

			if yyj4748 >= len(yyv4748) {
				yyv4748 = append(yyv4748, "") // var yyz4748 UniqueVolumeName
				yyc4748 = true
			}
			yyh4748.ElemContainerState(yyj4748)
			if yyj4748 < len(yyv4748) {
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = ""
				} else {
					yyv4748[yyj4748] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4748 < len(yyv4748) {
			yyv4748 = yyv4748[:yyj4748]
			yyc4748 = true
		} else if yyj4748 == 0 && yyv4748 == nil {
			yyv4748 = []UniqueVolumeName{}
			yyc4748 = true
		}
	}
	yyh4748.End()
	if yyc4748 {
		*v = yyv4748
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4752 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4753 := &yyv4752
		yy4753.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4754 := *v
	yyh4754, yyl4754 := z.DecSliceHelperStart()
	var yyc4754 bool
	if yyl4754 == 0 {
		if yyv4754 == nil {
			yyv4754 = []AttachedVolume{}
			yyc4754 = true
		} else if len(yyv4754) != 0 {
			yyv4754 = yyv4754[:0]
			yyc4754 = true
		}
	} else if yyl4754 > 0 {
		var yyrr4754, yyrl4754 int
		var yyrt4754 bool
		if yyl4754 > cap(yyv4754) {

			yyrg4754 := len(yyv4754) > 0
			yyv24754 := yyv4754
			yyrl4754, yyrt4754 = z.DecInferLen(yyl4754, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4754 {
				if yyrl4754 <= cap(yyv4754) {
					yyv4754 = yyv4754[:yyrl4754]
				} else {
					yyv4754 = make([]AttachedVolume, yyrl4754)
				}
			} else {
				yyv4754 = make([]AttachedVolume, yyrl4754)
			}
			yyc4754 = true
			yyrr4754 = len(yyv4754)
			if yyrg4754 {
				copy(yyv4754, yyv24754)
			}
		} else if yyl4754 != len(yyv4754) {
			yyv4754 = yyv4754[:yyl4754]
			yyc4754 = true
		}
		yyj4754 := 0
		for ; yyj4754 < yyrr4754; yyj4754++ {
			yyh4754.ElemContainerState(yyj4754)
			if r.TryDecodeAsNil() {
				yyv4754[yyj4754] = AttachedVolume{}
			} else {
				yyv4755 := &yyv4754[yyj4754]
				yyv4755.CodecDecodeSelf(d)
			}

		}
		if yyrt4754 {
			for ; yyj4754 < yyl4754; yyj4754++ {
				yyv4754 = append(yyv4754, AttachedVolume{})
				yyh4754.ElemContainerState(yyj4754)
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = AttachedVolume{}
				} else {
					yyv4756 := &yyv4754[yyj4754]
					yyv4756.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4754 := 0
		for ; !r.CheckBreak(); yyj4754++ {

			if yyj4754 >= len(yyv4754) {
				yyv4754 = append(yyv4754, AttachedVolume{}) // var yyz4754 AttachedVolume
				yyc4754 = true
			}
			yyh4754.ElemContainerState(yyj4754)
			if yyj4754 < len(yyv4754) {
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = AttachedVolume{}
				} else {
					yyv4757 := &yyv4754[yyj4754]
					yyv4757.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4754 < len(yyv4754) {
			yyv4754 = yyv4754[:yyj4754]
			yyc4754 = true
		} else if yyj4754 == 0 && yyv4754 == nil {
			yyv4754 = []AttachedVolume{}
			yyc4754 = true
		}
	}
	yyh4754.End()
	if yyc4754 {
		*v = yyv4754
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4758 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4759 := &yyv4758
		yy4759.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4760 := *v
	yyh4760, yyl4760 := z.DecSliceHelperStart()
	var yyc4760 bool
	if yyl4760 == 0 {
		if yyv4760 == nil {
			yyv4760 = []PreferAvoidPodsEntry{}
			yyc4760 = true
		} else if len(yyv4760) != 0 {
			yyv4760 = yyv4760[:0]
			yyc4760 = true
		}
	} else if yyl4760 > 0 {
		var yyrr4760, yyrl4760 int
		var yyrt4760 bool
		if yyl4760 > cap(yyv4760) {

			yyrg4760 := len(yyv4760) > 0
			yyv24760 := yyv4760
			yyrl4760, yyrt4760 = z.DecInferLen(yyl4760, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4760 {
				if yyrl4760 <= cap(yyv4760) {
					yyv4760 = yyv4760[:yyrl4760]
				} else {
					yyv4760 = make([]PreferAvoidPodsEntry, yyrl4760)
				}
			} else {
				yyv4760 = make([]PreferAvoidPodsEntry, yyrl4760)
			}
			yyc4760 = true
			yyrr4760 = len(yyv4760)
			if yyrg4760 {
				copy(yyv4760, yyv24760)
			}
		} else if yyl4760 != len(yyv4760) {
			yyv4760 = yyv4760[:yyl4760]
			yyc4760 = true
		}
		yyj4760 := 0
		for ; yyj4760 < yyrr4760; yyj4760++ {
			yyh4760.ElemContainerState(yyj4760)
			if r.TryDecodeAsNil() {
				yyv4760[yyj4760] = PreferAvoidPodsEntry{}
			} else {
				yyv4761 := &yyv4760[yyj4760]
				yyv4761.CodecDecodeSelf(d)
			}

		}
		if yyrt4760 {
			for ; yyj4760 < yyl4760; yyj4760++ {
				yyv4760 = append(yyv4760, PreferAvoidPodsEntry{})
				yyh4760.ElemContainerState(yyj4760)
				if r.TryDecodeAsNil() {
					yyv4760[yyj4760] = PreferAvoidPodsEntry{}
				} else {
					yyv4762 := &yyv4760[yyj4760]
					yyv4762.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4760 := 0
		for ; !r.CheckBreak(); yyj4760++ {

			if yyj4760 >= len(yyv4760) {
				yyv4760 = append(yyv4760, PreferAvoidPodsEntry{}) // var yyz4760 PreferAvoidPodsEntry
				yyc4760 = true
			}
			yyh4760.ElemContainerState(yyj4760)
			if yyj4760 < len(yyv4760) {
				if r.TryDecodeAsNil() {
					yyv4760[yyj4760] = PreferAvoidPodsEntry{}
				} else {
					yyv4763 := &yyv4760[yyj4760]
					yyv4763.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4760 < len(yyv4760) {
			yyv4760 = yyv4760[:yyj4760]
			yyc4760 = true
		} else if yyj4760 == 0 && yyv4760 == nil {
			yyv4760 = []PreferAvoidPodsEntry{}
			yyc4760 = true
		}
	}
	yyh4760.End()
	if yyc4760 {
		*v = yyv4760
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4764, yyv4764 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4764.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4765 := &yyv4764
		yym4766 := z.EncBinary()
		_ = yym4766
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4765) {
		} else if !yym4766 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4765)
		} else {
			z.EncFallback(yy4765)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4767 := *v
	yyl4767 := r.ReadMapStart()
	yybh4767 := z.DecBasicHandle()
	if yyv4767 == nil {
		yyrl4767, _ := z.DecInferLen(yyl4767, yybh4767.MaxInitLen, 72)
		yyv4767 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4767)
		*v = yyv4767
	}
	var yymk4767 ResourceName
	var yymv4767 pkg3_resource.Quantity
	var yymg4767 bool
	if yybh4767.MapValueReset {
		yymg4767 = true
	}
	if yyl4767 > 0 {
		for yyj4767 := 0; yyj4767 < yyl4767; yyj4767++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4767 = ""
			} else {
				yymk4767 = ResourceName(r.DecodeString())
			}

			if yymg4767 {
				yymv4767 = yyv4767[yymk4767]
			} else {
				yymv4767 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4767 = pkg3_resource.Quantity{}
			} else {
				yyv4769 := &yymv4767
				yym4770 := z.DecBinary()
				_ = yym4770
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4769) {
				} else if !yym4770 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4769)
				} else {
					z.DecFallback(yyv4769, false)
				}
			}

			if yyv4767 != nil {
				yyv4767[yymk4767] = yymv4767
			}
		}
	} else if yyl4767 < 0 {
		for yyj4767 := 0; !r.CheckBreak(); yyj4767++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4767 = ""
			} else {
				yymk4767 = ResourceName(r.DecodeString())
			}

			if yymg4767 {
				yymv4767 = yyv4767[yymk4767]
			} else {
				yymv4767 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4767 = pkg3_resource.Quantity{}
			} else {
				yyv4772 := &yymv4767
				yym4773 := z.DecBinary()
				_ = yym4773
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4772) {
				} else if !yym4773 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4772)
				} else {
					z.DecFallback(yyv4772, false)
				}
			}

			if yyv4767 != nil {
				yyv4767[yymk4767] = yymv4767
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4774 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4775 := &yyv4774
		yy4775.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4776 := *v
	yyh4776, yyl4776 := z.DecSliceHelperStart()
	var yyc4776 bool
	if yyl4776 == 0 {
		if yyv4776 == nil {
			yyv4776 = []Node{}
			yyc4776 = true
		} else if len(yyv4776) != 0 {
			yyv4776 = yyv4776[:0]
			yyc4776 = true
		}
	} else if yyl4776 > 0 {
		var yyrr4776, yyrl4776 int
		var yyrt4776 bool
		if yyl4776 > cap(yyv4776) {

			yyrg4776 := len(yyv4776) > 0
			yyv24776 := yyv4776
			yyrl4776, yyrt4776 = z.DecInferLen(yyl4776, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4776 {
				if yyrl4776 <= cap(yyv4776) {
					yyv4776 = yyv4776[:yyrl4776]
				} else {
					yyv4776 = make([]Node, yyrl4776)
				}
			} else {
				yyv4776 = make([]Node, yyrl4776)
			}
			yyc4776 = true
			yyrr4776 = len(yyv4776)
			if yyrg4776 {
				copy(yyv4776, yyv24776)
			}
		} else if yyl4776 != len(yyv4776) {
			yyv4776 = yyv4776[:yyl4776]
			yyc4776 = true
		}
		yyj4776 := 0
		for ; yyj4776 < yyrr4776; yyj4776++ {
			yyh4776.ElemContainerState(yyj4776)
			if r.TryDecodeAsNil() {
				yyv4776[yyj4776] = Node{}
			} else {
				yyv4777 := &yyv4776[yyj4776]
				yyv4777.CodecDecodeSelf(d)
			}

		}
		if yyrt4776 {
			for ; yyj4776 < yyl4776; yyj4776++ {
				yyv4776 = append(yyv4776, Node{})
				yyh4776.ElemContainerState(yyj4776)
				if r.TryDecodeAsNil() {
					yyv4776[yyj4776] = Node{}
				} else {
					yyv4778 := &yyv4776[yyj4776]
					yyv4778.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4776 := 0
		for ; !r.CheckBreak(); yyj4776++ {

			if yyj4776 >= len(yyv4776) {
				yyv4776 = append(yyv4776, Node{}) // var yyz4776 Node
				yyc4776 = true
			}
			yyh4776.ElemContainerState(yyj4776)
			if yyj4776 < len(yyv4776) {
				if r.TryDecodeAsNil() {
					yyv4776[yyj4776] = Node{}
				} else {
					yyv4779 := &yyv4776[yyj4776]
					yyv4779.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4776 < len(yyv4776) {
			yyv4776 = yyv4776[:yyj4776]
			yyc4776 = true
		} else if yyj4776 == 0 && yyv4776 == nil {
			yyv4776 = []Node{}
			yyc4776 = true
		}
	}
	yyh4776.End()
	if yyc4776 {
		*v = yyv4776
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4780 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4780.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4781 := *v
	yyh4781, yyl4781 := z.DecSliceHelperStart()
	var yyc4781 bool
	if yyl4781 == 0 {
		if yyv4781 == nil {
			yyv4781 = []FinalizerName{}
			yyc4781 = true
		} else if len(yyv4781) != 0 {
			yyv4781 = yyv4781[:0]
			yyc4781 = true
		}
	} else if yyl4781 > 0 {
		var yyrr4781, yyrl4781 int
		var yyrt4781 bool
		if yyl4781 > cap(yyv4781) {

			yyrl4781, yyrt4781 = z.DecInferLen(yyl4781, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4781 {
				if yyrl4781 <= cap(yyv4781) {
					yyv4781 = yyv4781[:yyrl4781]
				} else {
					yyv4781 = make([]FinalizerName, yyrl4781)
				}
			} else {
				yyv4781 = make([]FinalizerName, yyrl4781)
			}
			yyc4781 = true
			yyrr4781 = len(yyv4781)
		} else if yyl4781 != len(yyv4781) {
			yyv4781 = yyv4781[:yyl4781]
			yyc4781 = true
		}
		yyj4781 := 0
		for ; yyj4781 < yyrr4781; yyj4781++ {
			yyh4781.ElemContainerState(yyj4781)
			if r.TryDecodeAsNil() {
				yyv4781[yyj4781] = ""
			} else {
				yyv4781[yyj4781] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4781 {
			for ; yyj4781 < yyl4781; yyj4781++ {
				yyv4781 = append(yyv4781, "")
				yyh4781.ElemContainerState(yyj4781)
				if r.TryDecodeAsNil() {
					yyv4781[yyj4781] = ""
				} else {
					yyv4781[yyj4781] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4781 := 0
		for ; !r.CheckBreak(); yyj4781++ {

			if yyj4781 >= len(yyv4781) {
				yyv4781 = append(yyv4781, "") // var yyz4781 FinalizerName
				yyc4781 = true
			}
			yyh4781.ElemContainerState(yyj4781)
			if yyj4781 < len(yyv4781) {
				if r.TryDecodeAsNil() {
					yyv4781[yyj4781] = ""
				} else {
					yyv4781[yyj4781] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4781 < len(yyv4781) {
			yyv4781 = yyv4781[:yyj4781]
			yyc4781 = true
		} else if yyj4781 == 0 && yyv4781 == nil {
			yyv4781 = []FinalizerName{}
			yyc4781 = true
		}
	}
	yyh4781.End()
	if yyc4781 {
		*v = yyv4781
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4785 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4786 := &yyv4785
		yy4786.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4787 := *v
	yyh4787, yyl4787 := z.DecSliceHelperStart()
	var yyc4787 bool
	if yyl4787 == 0 {
		if yyv4787 == nil {
			yyv4787 = []Namespace{}
			yyc4787 = true
		} else if len(yyv4787) != 0 {
			yyv4787 = yyv4787[:0]
			yyc4787 = true
		}
	} else if yyl4787 > 0 {
		var yyrr4787, yyrl4787 int
		var yyrt4787 bool
		if yyl4787 > cap(yyv4787) {

			yyrg4787 := len(yyv4787) > 0
			yyv24787 := yyv4787
			yyrl4787, yyrt4787 = z.DecInferLen(yyl4787, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4787 {
				if yyrl4787 <= cap(yyv4787) {
					yyv4787 = yyv4787[:yyrl4787]
				} else {
					yyv4787 = make([]Namespace, yyrl4787)
				}
			} else {
				yyv4787 = make([]Namespace, yyrl4787)
			}
			yyc4787 = true
			yyrr4787 = len(yyv4787)
			if yyrg4787 {
				copy(yyv4787, yyv24787)
			}
		} else if yyl4787 != len(yyv4787) {
			yyv4787 = yyv4787[:yyl4787]
			yyc4787 = true
		}
		yyj4787 := 0
		for ; yyj4787 < yyrr4787; yyj4787++ {
			yyh4787.ElemContainerState(yyj4787)
			if r.TryDecodeAsNil() {
				yyv4787[yyj4787] = Namespace{}
			} else {
				yyv4788 := &yyv4787[yyj4787]
				yyv4788.CodecDecodeSelf(d)
			}

		}
		if yyrt4787 {
			for ; yyj4787 < yyl4787; yyj4787++ {
				yyv4787 = append(yyv4787, Namespace{})
				yyh4787.ElemContainerState(yyj4787)
				if r.TryDecodeAsNil() {
					yyv4787[yyj4787] = Namespace{}
				} else {
					yyv4789 := &yyv4787[yyj4787]
					yyv4789.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4787 := 0
		for ; !r.CheckBreak(); yyj4787++ {

			if yyj4787 >= len(yyv4787) {
				yyv4787 = append(yyv4787, Namespace{}) // var yyz4787 Namespace
				yyc4787 = true
			}
			yyh4787.ElemContainerState(yyj4787)
			if yyj4787 < len(yyv4787) {
				if r.TryDecodeAsNil() {
					yyv4787[yyj4787] = Namespace{}
				} else {
					yyv4790 := &yyv4787[yyj4787]
					yyv4790.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4787 < len(yyv4787) {
			yyv4787 = yyv4787[:yyj4787]
			yyc4787 = true
		} else if yyj4787 == 0 && yyv4787 == nil {
			yyv4787 = []Namespace{}
			yyc4787 = true
		}
	}
	yyh4787.End()
	if yyc4787 {
		*v = yyv4787
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4791 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4792 := &yyv4791
		yy4792.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4793 := *v
	yyh4793, yyl4793 := z.DecSliceHelperStart()
	var yyc4793 bool
	if yyl4793 == 0 {
		if yyv4793 == nil {
			yyv4793 = []Event{}
			yyc4793 = true
		} else if len(yyv4793) != 0 {
			yyv4793 = yyv4793[:0]
			yyc4793 = true
		}
	} else if yyl4793 > 0 {
		var yyrr4793, yyrl4793 int
		var yyrt4793 bool
		if yyl4793 > cap(yyv4793) {

			yyrg4793 := len(yyv4793) > 0
			yyv24793 := yyv4793
			yyrl4793, yyrt4793 = z.DecInferLen(yyl4793, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4793 {
				if yyrl4793 <= cap(yyv4793) {
					yyv4793 = yyv4793[:yyrl4793]
				} else {
					yyv4793 = make([]Event, yyrl4793)
				}
			} else {
				yyv4793 = make([]Event, yyrl4793)
			}
			yyc4793 = true
			yyrr4793 = len(yyv4793)
			if yyrg4793 {
				copy(yyv4793, yyv24793)
			}
		} else if yyl4793 != len(yyv4793) {
			yyv4793 = yyv4793[:yyl4793]
			yyc4793 = true
		}
		yyj4793 := 0
		for ; yyj4793 < yyrr4793; yyj4793++ {
			yyh4793.ElemContainerState(yyj4793)
			if r.TryDecodeAsNil() {
				yyv4793[yyj4793] = Event{}
			} else {
				yyv4794 := &yyv4793[yyj4793]
				yyv4794.CodecDecodeSelf(d)
			}

		}
		if yyrt4793 {
			for ; yyj4793 < yyl4793; yyj4793++ {
				yyv4793 = append(yyv4793, Event{})
				yyh4793.ElemContainerState(yyj4793)
				if r.TryDecodeAsNil() {
					yyv4793[yyj4793] = Event{}
				} else {
					yyv4795 := &yyv4793[yyj4793]
					yyv4795.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4793 := 0
		for ; !r.CheckBreak(); yyj4793++ {

			if yyj4793 >= len(yyv4793) {
				yyv4793 = append(yyv4793, Event{}) // var yyz4793 Event
				yyc4793 = true
			}
			yyh4793.ElemContainerState(yyj4793)
			if yyj4793 < len(yyv4793) {
				if r.TryDecodeAsNil() {
					yyv4793[yyj4793] = Event{}
				} else {
					yyv4796 := &yyv4793[yyj4793]
					yyv4796.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4793 < len(yyv4793) {
			yyv4793 = yyv4793[:yyj4793]
			yyc4793 = true
		} else if yyj4793 == 0 && yyv4793 == nil {
			yyv4793 = []Event{}
			yyc4793 = true
		}
	}
	yyh4793.End()
	if yyc4793 {
		*v = yyv4793
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4797 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4797 == nil {
			r.EncodeNil()
		} else {
			yym4798 := z.EncBinary()
			_ = yym4798
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4797) {
			} else {
				z.EncFallback(yyv4797)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4799 := *v
	yyh4799, yyl4799 := z.DecSliceHelperStart()
	var yyc4799 bool
	if yyl4799 == 0 {
		if yyv4799 == nil {
			yyv4799 = []pkg7_runtime.Object{}
			yyc4799 = true
		} else if len(yyv4799) != 0 {
			yyv4799 = yyv4799[:0]
			yyc4799 = true
		}
	} else if yyl4799 > 0 {
		var yyrr4799, yyrl4799 int
		var yyrt4799 bool
		if yyl4799 > cap(yyv4799) {

			yyrg4799 := len(yyv4799) > 0
			yyv24799 := yyv4799
			yyrl4799, yyrt4799 = z.DecInferLen(yyl4799, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4799 {
				if yyrl4799 <= cap(yyv4799) {
					yyv4799 = yyv4799[:yyrl4799]
				} else {
					yyv4799 = make([]pkg7_runtime.Object, yyrl4799)
				}
			} else {
				yyv4799 = make([]pkg7_runtime.Object, yyrl4799)
			}
			yyc4799 = true
			yyrr4799 = len(yyv4799)
			if yyrg4799 {
				copy(yyv4799, yyv24799)
			}
		} else if yyl4799 != len(yyv4799) {
			yyv4799 = yyv4799[:yyl4799]
			yyc4799 = true
		}
		yyj4799 := 0
		for ; yyj4799 < yyrr4799; yyj4799++ {
			yyh4799.ElemContainerState(yyj4799)
			if r.TryDecodeAsNil() {
				yyv4799[yyj4799] = nil
			} else {
				yyv4800 := &yyv4799[yyj4799]
				yym4801 := z.DecBinary()
				_ = yym4801
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4800) {
				} else {
					z.DecFallback(yyv4800, true)
				}
			}

		}
		if yyrt4799 {
			for ; yyj4799 < yyl4799; yyj4799++ {
				yyv4799 = append(yyv4799, nil)
				yyh4799.ElemContainerState(yyj4799)
				if r.TryDecodeAsNil() {
					yyv4799[yyj4799] = nil
				} else {
					yyv4802 := &yyv4799[yyj4799]
					yym4803 := z.DecBinary()
					_ = yym4803
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4802) {
					} else {
						z.DecFallback(yyv4802, true)
					}
				}

			}
		}

	} else {
		yyj4799 := 0
		for ; !r.CheckBreak(); yyj4799++ {

			if yyj4799 >= len(yyv4799) {
				yyv4799 = append(yyv4799, nil) // var yyz4799 pkg7_runtime.Object
				yyc4799 = true
			}
			yyh4799.ElemContainerState(yyj4799)
			if yyj4799 < len(yyv4799) {
				if r.TryDecodeAsNil() {
					yyv4799[yyj4799] = nil
				} else {
					yyv4804 := &yyv4799[yyj4799]
					yym4805 := z.DecBinary()
					_ = yym4805
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4804) {
					} else {
						z.DecFallback(yyv4804, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4799 < len(yyv4799) {
			yyv4799 = yyv4799[:yyj4799]
			yyc4799 = true
		} else if yyj4799 == 0 && yyv4799 == nil {
			yyv4799 = []pkg7_runtime.Object{}
			yyc4799 = true
		}
	}
	yyh4799.End()
	if yyc4799 {
		*v = yyv4799
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4806 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4807 := &yyv4806
		yy4807.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4808 := *v
	yyh4808, yyl4808 := z.DecSliceHelperStart()
	var yyc4808 bool
	if yyl4808 == 0 {
		if yyv4808 == nil {
			yyv4808 = []LimitRangeItem{}
			yyc4808 = true
		} else if len(yyv4808) != 0 {
			yyv4808 = yyv4808[:0]
			yyc4808 = true
		}
	} else if yyl4808 > 0 {
		var yyrr4808, yyrl4808 int
		var yyrt4808 bool
		if yyl4808 > cap(yyv4808) {

			yyrg4808 := len(yyv4808) > 0
			yyv24808 := yyv4808
			yyrl4808, yyrt4808 = z.DecInferLen(yyl4808, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4808 {
				if yyrl4808 <= cap(yyv4808) {
					yyv4808 = yyv4808[:yyrl4808]
				} else {
					yyv4808 = make([]LimitRangeItem, yyrl4808)
				}
			} else {
				yyv4808 = make([]LimitRangeItem, yyrl4808)
			}
			yyc4808 = true
			yyrr4808 = len(yyv4808)
			if yyrg4808 {
				copy(yyv4808, yyv24808)
			}
		} else if yyl4808 != len(yyv4808) {
			yyv4808 = yyv4808[:yyl4808]
			yyc4808 = true
		}
		yyj4808 := 0
		for ; yyj4808 < yyrr4808; yyj4808++ {
			yyh4808.ElemContainerState(yyj4808)
			if r.TryDecodeAsNil() {
				yyv4808[yyj4808] = LimitRangeItem{}
			} else {
				yyv4809 := &yyv4808[yyj4808]
				yyv4809.CodecDecodeSelf(d)
			}

		}
		if yyrt4808 {
			for ; yyj4808 < yyl4808; yyj4808++ {
				yyv4808 = append(yyv4808, LimitRangeItem{})
				yyh4808.ElemContainerState(yyj4808)
				if r.TryDecodeAsNil() {
					yyv4808[yyj4808] = LimitRangeItem{}
				} else {
					yyv4810 := &yyv4808[yyj4808]
					yyv4810.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4808 := 0
		for ; !r.CheckBreak(); yyj4808++ {

			if yyj4808 >= len(yyv4808) {
				yyv4808 = append(yyv4808, LimitRangeItem{}) // var yyz4808 LimitRangeItem
				yyc4808 = true
			}
			yyh4808.ElemContainerState(yyj4808)
			if yyj4808 < len(yyv4808) {
				if r.TryDecodeAsNil() {
					yyv4808[yyj4808] = LimitRangeItem{}
				} else {
					yyv4811 := &yyv4808[yyj4808]
					yyv4811.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4808 < len(yyv4808) {
			yyv4808 = yyv4808[:yyj4808]
			yyc4808 = true
		} else if yyj4808 == 0 && yyv4808 == nil {
			yyv4808 = []LimitRangeItem{}
			yyc4808 = true
		}
	}
	yyh4808.End()
	if yyc4808 {
		*v = yyv4808
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4812 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4813 := &yyv4812
		yy4813.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4814 := *v
	yyh4814, yyl4814 := z.DecSliceHelperStart()
	var yyc4814 bool
	if yyl4814 == 0 {
		if yyv4814 == nil {
			yyv4814 = []LimitRange{}
			yyc4814 = true
		} else if len(yyv4814) != 0 {
			yyv4814 = yyv4814[:0]
			yyc4814 = true
		}
	} else if yyl4814 > 0 {
		var yyrr4814, yyrl4814 int
		var yyrt4814 bool
		if yyl4814 > cap(yyv4814) {

			yyrg4814 := len(yyv4814) > 0
			yyv24814 := yyv4814
			yyrl4814, yyrt4814 = z.DecInferLen(yyl4814, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4814 {
				if yyrl4814 <= cap(yyv4814) {
					yyv4814 = yyv4814[:yyrl4814]
				} else {
					yyv4814 = make([]LimitRange, yyrl4814)
				}
			} else {
				yyv4814 = make([]LimitRange, yyrl4814)
			}
			yyc4814 = true
			yyrr4814 = len(yyv4814)
			if yyrg4814 {
				copy(yyv4814, yyv24814)
			}
		} else if yyl4814 != len(yyv4814) {
			yyv4814 = yyv4814[:yyl4814]
			yyc4814 = true
		}
		yyj4814 := 0
		for ; yyj4814 < yyrr4814; yyj4814++ {
			yyh4814.ElemContainerState(yyj4814)
			if r.TryDecodeAsNil() {
				yyv4814[yyj4814] = LimitRange{}
			} else {
				yyv4815 := &yyv4814[yyj4814]
				yyv4815.CodecDecodeSelf(d)
			}

		}
		if yyrt4814 {
			for ; yyj4814 < yyl4814; yyj4814++ {
				yyv4814 = append(yyv4814, LimitRange{})
				yyh4814.ElemContainerState(yyj4814)
				if r.TryDecodeAsNil() {
					yyv4814[yyj4814] = LimitRange{}
				} else {
					yyv4816 := &yyv4814[yyj4814]
					yyv4816.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4814 := 0
		for ; !r.CheckBreak(); yyj4814++ {

			if yyj4814 >= len(yyv4814) {
				yyv4814 = append(yyv4814, LimitRange{}) // var yyz4814 LimitRange
				yyc4814 = true
			}
			yyh4814.ElemContainerState(yyj4814)
			if yyj4814 < len(yyv4814) {
				if r.TryDecodeAsNil() {
					yyv4814[yyj4814] = LimitRange{}
				} else {
					yyv4817 := &yyv4814[yyj4814]
					yyv4817.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4814 < len(yyv4814) {
			yyv4814 = yyv4814[:yyj4814]
			yyc4814 = true
		} else if yyj4814 == 0 && yyv4814 == nil {
			yyv4814 = []LimitRange{}
			yyc4814 = true
		}
	}
	yyh4814.End()
	if yyc4814 {
		*v = yyv4814
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4818 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4818.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4819 := *v
	yyh4819, yyl4819 := z.DecSliceHelperStart()
	var yyc4819 bool
	if yyl4819 == 0 {
		if yyv4819 == nil {
			yyv4819 = []ResourceQuotaScope{}
			yyc4819 = true
		} else if len(yyv4819) != 0 {
			yyv4819 = yyv4819[:0]
			yyc4819 = true
		}
	} else if yyl4819 > 0 {
		var yyrr4819, yyrl4819 int
		var yyrt4819 bool
		if yyl4819 > cap(yyv4819) {

			yyrl4819, yyrt4819 = z.DecInferLen(yyl4819, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4819 {
				if yyrl4819 <= cap(yyv4819) {
					yyv4819 = yyv4819[:yyrl4819]
				} else {
					yyv4819 = make([]ResourceQuotaScope, yyrl4819)
				}
			} else {
				yyv4819 = make([]ResourceQuotaScope, yyrl4819)
			}
			yyc4819 = true
			yyrr4819 = len(yyv4819)
		} else if yyl4819 != len(yyv4819) {
			yyv4819 = yyv4819[:yyl4819]
			yyc4819 = true
		}
		yyj4819 := 0
		for ; yyj4819 < yyrr4819; yyj4819++ {
			yyh4819.ElemContainerState(yyj4819)
			if r.TryDecodeAsNil() {
				yyv4819[yyj4819] = ""
			} else {
				yyv4819[yyj4819] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4819 {
			for ; yyj4819 < yyl4819; yyj4819++ {
				yyv4819 = append(yyv4819, "")
				yyh4819.ElemContainerState(yyj4819)
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = ""
				} else {
					yyv4819[yyj4819] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4819 := 0
		for ; !r.CheckBreak(); yyj4819++ {

			if yyj4819 >= len(yyv4819) {
				yyv4819 = append(yyv4819, "") // var yyz4819 ResourceQuotaScope
				yyc4819 = true
			}
			yyh4819.ElemContainerState(yyj4819)
			if yyj4819 < len(yyv4819) {
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = ""
				} else {
					yyv4819[yyj4819] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4819 < len(yyv4819) {
			yyv4819 = yyv4819[:yyj4819]
			yyc4819 = true
		} else if yyj4819 == 0 && yyv4819 == nil {
			yyv4819 = []ResourceQuotaScope{}
			yyc4819 = true
		}
	}
	yyh4819.End()
	if yyc4819 {
		*v = yyv4819
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4823 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4824 := &yyv4823
		yy4824.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4825 := *v
	yyh4825, yyl4825 := z.DecSliceHelperStart()
	var yyc4825 bool
	if yyl4825 == 0 {
		if yyv4825 == nil {
			yyv4825 = []ResourceQuota{}
			yyc4825 = true
		} else if len(yyv4825) != 0 {
			yyv4825 = yyv4825[:0]
			yyc4825 = true
		}
	} else if yyl4825 > 0 {
		var yyrr4825, yyrl4825 int
		var yyrt4825 bool
		if yyl4825 > cap(yyv4825) {

			yyrg4825 := len(yyv4825) > 0
			yyv24825 := yyv4825
			yyrl4825, yyrt4825 = z.DecInferLen(yyl4825, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4825 {
				if yyrl4825 <= cap(yyv4825) {
					yyv4825 = yyv4825[:yyrl4825]
				} else {
					yyv4825 = make([]ResourceQuota, yyrl4825)
				}
			} else {
				yyv4825 = make([]ResourceQuota, yyrl4825)
			}
			yyc4825 = true
			yyrr4825 = len(yyv4825)
			if yyrg4825 {
				copy(yyv4825, yyv24825)
			}
		} else if yyl4825 != len(yyv4825) {
			yyv4825 = yyv4825[:yyl4825]
			yyc4825 = true
		}
		yyj4825 := 0
		for ; yyj4825 < yyrr4825; yyj4825++ {
			yyh4825.ElemContainerState(yyj4825)
			if r.TryDecodeAsNil() {
				yyv4825[yyj4825] = ResourceQuota{}
			} else {
				yyv4826 := &yyv4825[yyj4825]
				yyv4826.CodecDecodeSelf(d)
			}

		}
		if yyrt4825 {
			for ; yyj4825 < yyl4825; yyj4825++ {
				yyv4825 = append(yyv4825, ResourceQuota{})
				yyh4825.ElemContainerState(yyj4825)
				if r.TryDecodeAsNil() {
					yyv4825[yyj4825] = ResourceQuota{}
				} else {
					yyv4827 := &yyv4825[yyj4825]
					yyv4827.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4825 := 0
		for ; !r.CheckBreak(); yyj4825++ {

			if yyj4825 >= len(yyv4825) {
				yyv4825 = append(yyv4825, ResourceQuota{}) // var yyz4825 ResourceQuota
				yyc4825 = true
			}
			yyh4825.ElemContainerState(yyj4825)
			if yyj4825 < len(yyv4825) {
				if r.TryDecodeAsNil() {
					yyv4825[yyj4825] = ResourceQuota{}
				} else {
					yyv4828 := &yyv4825[yyj4825]
					yyv4828.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4825 < len(yyv4825) {
			yyv4825 = yyv4825[:yyj4825]
			yyc4825 = true
		} else if yyj4825 == 0 && yyv4825 == nil {
			yyv4825 = []ResourceQuota{}
			yyc4825 = true
		}
	}
	yyh4825.End()
	if yyc4825 {
		*v = yyv4825
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4829, yyv4829 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4830 := z.EncBinary()
		_ = yym4830
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4829))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4829 == nil {
			r.EncodeNil()
		} else {
			yym4831 := z.EncBinary()
			_ = yym4831
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4829))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4832 := *v
	yyl4832 := r.ReadMapStart()
	yybh4832 := z.DecBasicHandle()
	if yyv4832 == nil {
		yyrl4832, _ := z.DecInferLen(yyl4832, yybh4832.MaxInitLen, 40)
		yyv4832 = make(map[string][]uint8, yyrl4832)
		*v = yyv4832
	}
	var yymk4832 string
	var yymv4832 []uint8
	var yymg4832 bool
	if yybh4832.MapValueReset {
		yymg4832 = true
	}
	if yyl4832 > 0 {
		for yyj4832 := 0; yyj4832 < yyl4832; yyj4832++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4832 = ""
			} else {
				yymk4832 = string(r.DecodeString())
			}

			if yymg4832 {
				yymv4832 = yyv4832[yymk4832]
			} else {
				yymv4832 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4832 = nil
			} else {
				yyv4834 := &yymv4832
				yym4835 := z.DecBinary()
				_ = yym4835
				if false {
				} else {
					*yyv4834 = r.DecodeBytes(*(*[]byte)(yyv4834), false, false)
				}
			}

			if yyv4832 != nil {
				yyv4832[yymk4832] = yymv4832
			}
		}
	} else if yyl4832 < 0 {
		for yyj4832 := 0; !r.CheckBreak(); yyj4832++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4832 = ""
			} else {
				yymk4832 = string(r.DecodeString())
			}

			if yymg4832 {
				yymv4832 = yyv4832[yymk4832]
			} else {
				yymv4832 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4832 = nil
			} else {
				yyv4837 := &yymv4832
				yym4838 := z.DecBinary()
				_ = yym4838
				if false {
				} else {
					*yyv4837 = r.DecodeBytes(*(*[]byte)(yyv4837), false, false)
				}
			}

			if yyv4832 != nil {
				yyv4832[yymk4832] = yymv4832
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4839 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4840 := &yyv4839
		yy4840.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4841 := *v
	yyh4841, yyl4841 := z.DecSliceHelperStart()
	var yyc4841 bool
	if yyl4841 == 0 {
		if yyv4841 == nil {
			yyv4841 = []Secret{}
			yyc4841 = true
		} else if len(yyv4841) != 0 {
			yyv4841 = yyv4841[:0]
			yyc4841 = true
		}
	} else if yyl4841 > 0 {
		var yyrr4841, yyrl4841 int
		var yyrt4841 bool
		if yyl4841 > cap(yyv4841) {

			yyrg4841 := len(yyv4841) > 0
			yyv24841 := yyv4841
			yyrl4841, yyrt4841 = z.DecInferLen(yyl4841, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4841 {
				if yyrl4841 <= cap(yyv4841) {
					yyv4841 = yyv4841[:yyrl4841]
				} else {
					yyv4841 = make([]Secret, yyrl4841)
				}
			} else {
				yyv4841 = make([]Secret, yyrl4841)
			}
			yyc4841 = true
			yyrr4841 = len(yyv4841)
			if yyrg4841 {
				copy(yyv4841, yyv24841)
			}
		} else if yyl4841 != len(yyv4841) {
			yyv4841 = yyv4841[:yyl4841]
			yyc4841 = true
		}
		yyj4841 := 0
		for ; yyj4841 < yyrr4841; yyj4841++ {
			yyh4841.ElemContainerState(yyj4841)
			if r.TryDecodeAsNil() {
				yyv4841[yyj4841] = Secret{}
			} else {
				yyv4842 := &yyv4841[yyj4841]
				yyv4842.CodecDecodeSelf(d)
			}

		}
		if yyrt4841 {
			for ; yyj4841 < yyl4841; yyj4841++ {
				yyv4841 = append(yyv4841, Secret{})
				yyh4841.ElemContainerState(yyj4841)
				if r.TryDecodeAsNil() {
					yyv4841[yyj4841] = Secret{}
				} else {
					yyv4843 := &yyv4841[yyj4841]
					yyv4843.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4841 := 0
		for ; !r.CheckBreak(); yyj4841++ {

			if yyj4841 >= len(yyv4841) {
				yyv4841 = append(yyv4841, Secret{}) // var yyz4841 Secret
				yyc4841 = true
			}
			yyh4841.ElemContainerState(yyj4841)
			if yyj4841 < len(yyv4841) {
				if r.TryDecodeAsNil() {
					yyv4841[yyj4841] = Secret{}
				} else {
					yyv4844 := &yyv4841[yyj4841]
					yyv4844.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4841 < len(yyv4841) {
			yyv4841 = yyv4841[:yyj4841]
			yyc4841 = true
		} else if yyj4841 == 0 && yyv4841 == nil {
			yyv4841 = []Secret{}
			yyc4841 = true
		}
	}
	yyh4841.End()
	if yyc4841 {
		*v = yyv4841
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4845 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4846 := &yyv4845
		yy4846.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4847 := *v
	yyh4847, yyl4847 := z.DecSliceHelperStart()
	var yyc4847 bool
	if yyl4847 == 0 {
		if yyv4847 == nil {
			yyv4847 = []ConfigMap{}
			yyc4847 = true
		} else if len(yyv4847) != 0 {
			yyv4847 = yyv4847[:0]
			yyc4847 = true
		}
	} else if yyl4847 > 0 {
		var yyrr4847, yyrl4847 int
		var yyrt4847 bool
		if yyl4847 > cap(yyv4847) {

			yyrg4847 := len(yyv4847) > 0
			yyv24847 := yyv4847
			yyrl4847, yyrt4847 = z.DecInferLen(yyl4847, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4847 {
				if yyrl4847 <= cap(yyv4847) {
					yyv4847 = yyv4847[:yyrl4847]
				} else {
					yyv4847 = make([]ConfigMap, yyrl4847)
				}
			} else {
				yyv4847 = make([]ConfigMap, yyrl4847)
			}
			yyc4847 = true
			yyrr4847 = len(yyv4847)
			if yyrg4847 {
				copy(yyv4847, yyv24847)
			}
		} else if yyl4847 != len(yyv4847) {
			yyv4847 = yyv4847[:yyl4847]
			yyc4847 = true
		}
		yyj4847 := 0
		for ; yyj4847 < yyrr4847; yyj4847++ {
			yyh4847.ElemContainerState(yyj4847)
			if r.TryDecodeAsNil() {
				yyv4847[yyj4847] = ConfigMap{}
			} else {
				yyv4848 := &yyv4847[yyj4847]
				yyv4848.CodecDecodeSelf(d)
			}

		}
		if yyrt4847 {
			for ; yyj4847 < yyl4847; yyj4847++ {
				yyv4847 = append(yyv4847, ConfigMap{})
				yyh4847.ElemContainerState(yyj4847)
				if r.TryDecodeAsNil() {
					yyv4847[yyj4847] = ConfigMap{}
				} else {
					yyv4849 := &yyv4847[yyj4847]
					yyv4849.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4847 := 0
		for ; !r.CheckBreak(); yyj4847++ {

			if yyj4847 >= len(yyv4847) {
				yyv4847 = append(yyv4847, ConfigMap{}) // var yyz4847 ConfigMap
				yyc4847 = true
			}
			yyh4847.ElemContainerState(yyj4847)
			if yyj4847 < len(yyv4847) {
				if r.TryDecodeAsNil() {
					yyv4847[yyj4847] = ConfigMap{}
				} else {
					yyv4850 := &yyv4847[yyj4847]
					yyv4850.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4847 < len(yyv4847) {
			yyv4847 = yyv4847[:yyj4847]
			yyc4847 = true
		} else if yyj4847 == 0 && yyv4847 == nil {
			yyv4847 = []ConfigMap{}
			yyc4847 = true
		}
	}
	yyh4847.End()
	if yyc4847 {
		*v = yyv4847
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4851 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4852 := &yyv4851
		yy4852.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4853 := *v
	yyh4853, yyl4853 := z.DecSliceHelperStart()
	var yyc4853 bool
	if yyl4853 == 0 {
		if yyv4853 == nil {
			yyv4853 = []ComponentCondition{}
			yyc4853 = true
		} else if len(yyv4853) != 0 {
			yyv4853 = yyv4853[:0]
			yyc4853 = true
		}
	} else if yyl4853 > 0 {
		var yyrr4853, yyrl4853 int
		var yyrt4853 bool
		if yyl4853 > cap(yyv4853) {

			yyrg4853 := len(yyv4853) > 0
			yyv24853 := yyv4853
			yyrl4853, yyrt4853 = z.DecInferLen(yyl4853, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4853 {
				if yyrl4853 <= cap(yyv4853) {
					yyv4853 = yyv4853[:yyrl4853]
				} else {
					yyv4853 = make([]ComponentCondition, yyrl4853)
				}
			} else {
				yyv4853 = make([]ComponentCondition, yyrl4853)
			}
			yyc4853 = true
			yyrr4853 = len(yyv4853)
			if yyrg4853 {
				copy(yyv4853, yyv24853)
			}
		} else if yyl4853 != len(yyv4853) {
			yyv4853 = yyv4853[:yyl4853]
			yyc4853 = true
		}
		yyj4853 := 0
		for ; yyj4853 < yyrr4853; yyj4853++ {
			yyh4853.ElemContainerState(yyj4853)
			if r.TryDecodeAsNil() {
				yyv4853[yyj4853] = ComponentCondition{}
			} else {
				yyv4854 := &yyv4853[yyj4853]
				yyv4854.CodecDecodeSelf(d)
			}

		}
		if yyrt4853 {
			for ; yyj4853 < yyl4853; yyj4853++ {
				yyv4853 = append(yyv4853, ComponentCondition{})
				yyh4853.ElemContainerState(yyj4853)
				if r.TryDecodeAsNil() {
					yyv4853[yyj4853] = ComponentCondition{}
				} else {
					yyv4855 := &yyv4853[yyj4853]
					yyv4855.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4853 := 0
		for ; !r.CheckBreak(); yyj4853++ {

			if yyj4853 >= len(yyv4853) {
				yyv4853 = append(yyv4853, ComponentCondition{}) // var yyz4853 ComponentCondition
				yyc4853 = true
			}
			yyh4853.ElemContainerState(yyj4853)
			if yyj4853 < len(yyv4853) {
				if r.TryDecodeAsNil() {
					yyv4853[yyj4853] = ComponentCondition{}
				} else {
					yyv4856 := &yyv4853[yyj4853]
					yyv4856.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4853 < len(yyv4853) {
			yyv4853 = yyv4853[:yyj4853]
			yyc4853 = true
		} else if yyj4853 == 0 && yyv4853 == nil {
			yyv4853 = []ComponentCondition{}
			yyc4853 = true
		}
	}
	yyh4853.End()
	if yyc4853 {
		*v = yyv4853
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4857 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4858 := &yyv4857
		yy4858.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4859 := *v
	yyh4859, yyl4859 := z.DecSliceHelperStart()
	var yyc4859 bool
	if yyl4859 == 0 {
		if yyv4859 == nil {
			yyv4859 = []ComponentStatus{}
			yyc4859 = true
		} else if len(yyv4859) != 0 {
			yyv4859 = yyv4859[:0]
			yyc4859 = true
		}
	} else if yyl4859 > 0 {
		var yyrr4859, yyrl4859 int
		var yyrt4859 bool
		if yyl4859 > cap(yyv4859) {

			yyrg4859 := len(yyv4859) > 0
			yyv24859 := yyv4859
			yyrl4859, yyrt4859 = z.DecInferLen(yyl4859, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4859 {
				if yyrl4859 <= cap(yyv4859) {
					yyv4859 = yyv4859[:yyrl4859]
				} else {
					yyv4859 = make([]ComponentStatus, yyrl4859)
				}
			} else {
				yyv4859 = make([]ComponentStatus, yyrl4859)
			}
			yyc4859 = true
			yyrr4859 = len(yyv4859)
			if yyrg4859 {
				copy(yyv4859, yyv24859)
			}
		} else if yyl4859 != len(yyv4859) {
			yyv4859 = yyv4859[:yyl4859]
			yyc4859 = true
		}
		yyj4859 := 0
		for ; yyj4859 < yyrr4859; yyj4859++ {
			yyh4859.ElemContainerState(yyj4859)
			if r.TryDecodeAsNil() {
				yyv4859[yyj4859] = ComponentStatus{}
			} else {
				yyv4860 := &yyv4859[yyj4859]
				yyv4860.CodecDecodeSelf(d)
			}

		}
		if yyrt4859 {
			for ; yyj4859 < yyl4859; yyj4859++ {
				yyv4859 = append(yyv4859, ComponentStatus{})
				yyh4859.ElemContainerState(yyj4859)
				if r.TryDecodeAsNil() {
					yyv4859[yyj4859] = ComponentStatus{}
				} else {
					yyv4861 := &yyv4859[yyj4859]
					yyv4861.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4859 := 0
		for ; !r.CheckBreak(); yyj4859++ {

			if yyj4859 >= len(yyv4859) {
				yyv4859 = append(yyv4859, ComponentStatus{}) // var yyz4859 ComponentStatus
				yyc4859 = true
			}
			yyh4859.ElemContainerState(yyj4859)
			if yyj4859 < len(yyv4859) {
				if r.TryDecodeAsNil() {
					yyv4859[yyj4859] = ComponentStatus{}
				} else {
					yyv4862 := &yyv4859[yyj4859]
					yyv4862.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4859 < len(yyv4859) {
			yyv4859 = yyv4859[:yyj4859]
			yyc4859 = true
		} else if yyj4859 == 0 && yyv4859 == nil {
			yyv4859 = []ComponentStatus{}
			yyc4859 = true
		}
	}
	yyh4859.End()
	if yyc4859 {
		*v = yyv4859
	}
}
