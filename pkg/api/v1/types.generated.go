/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [23]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(23)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym127 := z.DecBinary()
	_ = yym127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct128 := r.ContainerType()
		if yyct128 == codecSelferValueTypeMap1234 {
			yyl128 := r.ReadMapStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl128, d)
			}
		} else if yyct128 == codecSelferValueTypeArray1234 {
			yyl128 := r.ReadArrayStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys129Slc
	var yyhl129 bool = l >= 0
	for yyj129 := 0; ; yyj129++ {
		if yyhl129 {
			if yyj129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys129Slc = r.DecodeBytes(yys129Slc, true, true)
		yys129 := string(yys129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys129 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys129)
		} // end switch yys129
	} // end for yyj129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj153 int
	var yyb153 bool
	var yyhl153 bool = l >= 0
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj153++
		if yyhl153 {
			yyb153 = yyj153 > l
		} else {
			yyb153 = r.CheckBreak()
		}
		if yyb153 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj153-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym177 := z.EncBinary()
		_ = yym177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep178 := !z.EncBinary()
			yy2arr178 := z.EncBasicHandle().StructToArray
			var yyq178 [22]bool
			_, _, _ = yysep178, yyq178, yy2arr178
			const yyr178 bool = false
			yyq178[0] = x.HostPath != nil
			yyq178[1] = x.EmptyDir != nil
			yyq178[2] = x.GCEPersistentDisk != nil
			yyq178[3] = x.AWSElasticBlockStore != nil
			yyq178[4] = x.GitRepo != nil
			yyq178[5] = x.Secret != nil
			yyq178[6] = x.NFS != nil
			yyq178[7] = x.ISCSI != nil
			yyq178[8] = x.Glusterfs != nil
			yyq178[9] = x.PersistentVolumeClaim != nil
			yyq178[10] = x.RBD != nil
			yyq178[11] = x.FlexVolume != nil
			yyq178[12] = x.Cinder != nil
			yyq178[13] = x.CephFS != nil
			yyq178[14] = x.Flocker != nil
			yyq178[15] = x.DownwardAPI != nil
			yyq178[16] = x.FC != nil
			yyq178[17] = x.AzureFile != nil
			yyq178[18] = x.ConfigMap != nil
			yyq178[19] = x.VsphereVolume != nil
			yyq178[20] = x.Quobyte != nil
			yyq178[21] = x.AzureDisk != nil
			var yynn178 int
			if yyr178 || yy2arr178 {
				r.EncodeArrayStart(22)
			} else {
				yynn178 = 0
				for _, b := range yyq178 {
					if b {
						yynn178++
					}
				}
				r.EncodeMapStart(yynn178)
				yynn178 = 0
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym201 := z.DecBinary()
	_ = yym201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct202 := r.ContainerType()
		if yyct202 == codecSelferValueTypeMap1234 {
			yyl202 := r.ReadMapStart()
			if yyl202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl202, d)
			}
		} else if yyct202 == codecSelferValueTypeArray1234 {
			yyl202 := r.ReadArrayStart()
			if yyl202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys203Slc
	var yyhl203 bool = l >= 0
	for yyj203 := 0; ; yyj203++ {
		if yyhl203 {
			if yyj203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys203Slc = r.DecodeBytes(yys203Slc, true, true)
		yys203 := string(yys203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys203 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys203)
		} // end switch yys203
	} // end for yyj203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj226 int
	var yyb226 bool
	var yyhl226 bool = l >= 0
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj226++
		if yyhl226 {
			yyb226 = yyj226 > l
		} else {
			yyb226 = r.CheckBreak()
		}
		if yyb226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [2]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[1] = x.ReadOnly != false
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(2)
			} else {
				yynn250 = 1
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym252 := z.EncBinary()
				_ = yym252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym253 := z.EncBinary()
				_ = yym253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym257 := z.DecBinary()
	_ = yym257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct258 := r.ContainerType()
		if yyct258 == codecSelferValueTypeMap1234 {
			yyl258 := r.ReadMapStart()
			if yyl258 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl258, d)
			}
		} else if yyct258 == codecSelferValueTypeArray1234 {
			yyl258 := r.ReadArrayStart()
			if yyl258 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys259Slc
	var yyhl259 bool = l >= 0
	for yyj259 := 0; ; yyj259++ {
		if yyhl259 {
			if yyj259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys259Slc = r.DecodeBytes(yys259Slc, true, true)
		yys259 := string(yys259Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys259 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys259)
		} // end switch yys259
	} // end for yyj259
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj262 int
	var yyb262 bool
	var yyhl262 bool = l >= 0
	yyj262++
	if yyhl262 {
		yyb262 = yyj262 > l
	} else {
		yyb262 = r.CheckBreak()
	}
	if yyb262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj262++
	if yyhl262 {
		yyb262 = yyj262 > l
	} else {
		yyb262 = r.CheckBreak()
	}
	if yyb262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj262++
		if yyhl262 {
			yyb262 = yyj262 > l
		} else {
			yyb262 = r.CheckBreak()
		}
		if yyb262 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj262-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym265 := z.EncBinary()
		_ = yym265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep266 := !z.EncBinary()
			yy2arr266 := z.EncBasicHandle().StructToArray
			var yyq266 [16]bool
			_, _, _ = yysep266, yyq266, yy2arr266
			const yyr266 bool = false
			yyq266[0] = x.GCEPersistentDisk != nil
			yyq266[1] = x.AWSElasticBlockStore != nil
			yyq266[2] = x.HostPath != nil
			yyq266[3] = x.Glusterfs != nil
			yyq266[4] = x.NFS != nil
			yyq266[5] = x.RBD != nil
			yyq266[6] = x.ISCSI != nil
			yyq266[7] = x.Cinder != nil
			yyq266[8] = x.CephFS != nil
			yyq266[9] = x.FC != nil
			yyq266[10] = x.Flocker != nil
			yyq266[11] = x.FlexVolume != nil
			yyq266[12] = x.AzureFile != nil
			yyq266[13] = x.VsphereVolume != nil
			yyq266[14] = x.Quobyte != nil
			yyq266[15] = x.AzureDisk != nil
			var yynn266 int
			if yyr266 || yy2arr266 {
				r.EncodeArrayStart(16)
			} else {
				yynn266 = 0
				for _, b := range yyq266 {
					if b {
						yynn266++
					}
				}
				r.EncodeMapStart(yynn266)
				yynn266 = 0
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym283 := z.DecBinary()
	_ = yym283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct284 := r.ContainerType()
		if yyct284 == codecSelferValueTypeMap1234 {
			yyl284 := r.ReadMapStart()
			if yyl284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl284, d)
			}
		} else if yyct284 == codecSelferValueTypeArray1234 {
			yyl284 := r.ReadArrayStart()
			if yyl284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys285Slc
	var yyhl285 bool = l >= 0
	for yyj285 := 0; ; yyj285++ {
		if yyhl285 {
			if yyj285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys285Slc = r.DecodeBytes(yys285Slc, true, true)
		yys285 := string(yys285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys285 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys285)
		} // end switch yys285
	} // end for yyj285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj302 int
	var yyb302 bool
	var yyhl302 bool = l >= 0
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj302++
		if yyhl302 {
			yyb302 = yyj302 > l
		} else {
			yyb302 = r.CheckBreak()
		}
		if yyb302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym319 := z.EncBinary()
		_ = yym319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep320 := !z.EncBinary()
			yy2arr320 := z.EncBasicHandle().StructToArray
			var yyq320 [5]bool
			_, _, _ = yysep320, yyq320, yy2arr320
			const yyr320 bool = false
			yyq320[0] = x.Kind != ""
			yyq320[1] = x.APIVersion != ""
			yyq320[2] = true
			yyq320[3] = true
			yyq320[4] = true
			var yynn320 int
			if yyr320 || yy2arr320 {
				r.EncodeArrayStart(5)
			} else {
				yynn320 = 0
				for _, b := range yyq320 {
					if b {
						yynn320++
					}
				}
				r.EncodeMapStart(yynn320)
				yynn320 = 0
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[0] {
					yym322 := z.EncBinary()
					_ = yym322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym323 := z.EncBinary()
					_ = yym323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[1] {
					yym325 := z.EncBinary()
					_ = yym325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[2] {
					yy328 := &x.ObjectMeta
					yy328.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy329 := &x.ObjectMeta
					yy329.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[3] {
					yy331 := &x.Spec
					yy331.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy332 := &x.Spec
					yy332.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[4] {
					yy334 := &x.Status
					yy334.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy335 := &x.Status
					yy335.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct337 := r.ContainerType()
		if yyct337 == codecSelferValueTypeMap1234 {
			yyl337 := r.ReadMapStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl337, d)
			}
		} else if yyct337 == codecSelferValueTypeArray1234 {
			yyl337 := r.ReadArrayStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys338Slc
	var yyhl338 bool = l >= 0
	for yyj338 := 0; ; yyj338++ {
		if yyhl338 {
			if yyj338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys338Slc = r.DecodeBytes(yys338Slc, true, true)
		yys338 := string(yys338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys338 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv341 := &x.ObjectMeta
				yyv341.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv342 := &x.Spec
				yyv342.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv343 := &x.Status
				yyv343.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys338)
		} // end switch yys338
	} // end for yyj338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj344 int
	var yyb344 bool
	var yyhl344 bool = l >= 0
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv347 := &x.ObjectMeta
		yyv347.CodecDecodeSelf(d)
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv348 := &x.Spec
		yyv348.CodecDecodeSelf(d)
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv349 := &x.Status
		yyv349.CodecDecodeSelf(d)
	}
	for {
		yyj344++
		if yyhl344 {
			yyb344 = yyj344 > l
		} else {
			yyb344 = r.CheckBreak()
		}
		if yyb344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym350 := z.EncBinary()
		_ = yym350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep351 := !z.EncBinary()
			yy2arr351 := z.EncBasicHandle().StructToArray
			var yyq351 [20]bool
			_, _, _ = yysep351, yyq351, yy2arr351
			const yyr351 bool = false
			yyq351[0] = len(x.Capacity) != 0
			yyq351[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq351[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq351[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq351[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq351[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq351[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq351[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq351[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq351[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq351[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq351[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq351[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq351[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq351[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq351[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq351[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq351[17] = len(x.AccessModes) != 0
			yyq351[18] = x.ClaimRef != nil
			yyq351[19] = x.PersistentVolumeReclaimPolicy != ""
			var yynn351 int
			if yyr351 || yy2arr351 {
				r.EncodeArrayStart(20)
			} else {
				yynn351 = 0
				for _, b := range yyq351 {
					if b {
						yynn351++
					}
				}
				r.EncodeMapStart(yynn351)
				yynn351 = 0
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr351 || yy2arr351 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr351 || yy2arr351 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr351 || yy2arr351 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr351 || yy2arr351 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr351 || yy2arr351 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn358 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn358 = true
				goto LABEL358
			}
		LABEL358:
			if yyr351 || yy2arr351 {
				if yyn358 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn358 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn359 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn359 = true
				goto LABEL359
			}
		LABEL359:
			if yyr351 || yy2arr351 {
				if yyn359 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn359 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn360 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn360 = true
				goto LABEL360
			}
		LABEL360:
			if yyr351 || yy2arr351 {
				if yyn360 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn360 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn361 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn361 = true
				goto LABEL361
			}
		LABEL361:
			if yyr351 || yy2arr351 {
				if yyn361 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn361 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr351 || yy2arr351 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr351 || yy2arr351 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr351 || yy2arr351 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr351 || yy2arr351 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr351 || yy2arr351 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr351 || yy2arr351 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr351 || yy2arr351 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[17] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym370 := z.EncBinary()
						_ = yym370
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym371 := z.EncBinary()
						_ = yym371
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[18] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[19] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq351[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym374 := z.DecBinary()
	_ = yym374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct375 := r.ContainerType()
		if yyct375 == codecSelferValueTypeMap1234 {
			yyl375 := r.ReadMapStart()
			if yyl375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl375, d)
			}
		} else if yyct375 == codecSelferValueTypeArray1234 {
			yyl375 := r.ReadArrayStart()
			if yyl375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys376Slc
	var yyhl376 bool = l >= 0
	for yyj376 := 0; ; yyj376++ {
		if yyhl376 {
			if yyj376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys376Slc = r.DecodeBytes(yys376Slc, true, true)
		yys376 := string(yys376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys376 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv377 := &x.Capacity
				yyv377.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv394 := &x.AccessModes
				yym395 := z.DecBinary()
				_ = yym395
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv394), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys376)
		} // end switch yys376
	} // end for yyj376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj398 int
	var yyb398 bool
	var yyhl398 bool = l >= 0
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv399 := &x.Capacity
		yyv399.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv416 := &x.AccessModes
		yym417 := z.DecBinary()
		_ = yym417
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv416), d)
		}
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj398++
		if yyhl398 {
			yyb398 = yyj398 > l
		} else {
			yyb398 = r.CheckBreak()
		}
		if yyb398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym420 := z.EncBinary()
	_ = yym420
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym421 := z.DecBinary()
	_ = yym421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym422 := z.EncBinary()
		_ = yym422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep423 := !z.EncBinary()
			yy2arr423 := z.EncBasicHandle().StructToArray
			var yyq423 [3]bool
			_, _, _ = yysep423, yyq423, yy2arr423
			const yyr423 bool = false
			yyq423[0] = x.Phase != ""
			yyq423[1] = x.Message != ""
			yyq423[2] = x.Reason != ""
			var yynn423 int
			if yyr423 || yy2arr423 {
				r.EncodeArrayStart(3)
			} else {
				yynn423 = 0
				for _, b := range yyq423 {
					if b {
						yynn423++
					}
				}
				r.EncodeMapStart(yynn423)
				yynn423 = 0
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[1] {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[2] {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym431 := z.DecBinary()
	_ = yym431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct432 := r.ContainerType()
		if yyct432 == codecSelferValueTypeMap1234 {
			yyl432 := r.ReadMapStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl432, d)
			}
		} else if yyct432 == codecSelferValueTypeArray1234 {
			yyl432 := r.ReadArrayStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys433Slc
	var yyhl433 bool = l >= 0
	for yyj433 := 0; ; yyj433++ {
		if yyhl433 {
			if yyj433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys433Slc = r.DecodeBytes(yys433Slc, true, true)
		yys433 := string(yys433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys433 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys433)
		} // end switch yys433
	} // end for yyj433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym441 := z.EncBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep442 := !z.EncBinary()
			yy2arr442 := z.EncBasicHandle().StructToArray
			var yyq442 [4]bool
			_, _, _ = yysep442, yyq442, yy2arr442
			const yyr442 bool = false
			yyq442[0] = x.Kind != ""
			yyq442[1] = x.APIVersion != ""
			yyq442[2] = true
			var yynn442 int
			if yyr442 || yy2arr442 {
				r.EncodeArrayStart(4)
			} else {
				yynn442 = 1
				for _, b := range yyq442 {
					if b {
						yynn442++
					}
				}
				r.EncodeMapStart(yynn442)
				yynn442 = 0
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[0] {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[1] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[2] {
					yy450 := &x.ListMeta
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else if z.HasExtensions() && z.EncExt(yy450) {
					} else {
						z.EncFallback(yy450)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.ListMeta
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy452) {
					} else {
						z.EncFallback(yy452)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym455 := z.EncBinary()
					_ = yym455
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym457 := z.DecBinary()
	_ = yym457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct458 := r.ContainerType()
		if yyct458 == codecSelferValueTypeMap1234 {
			yyl458 := r.ReadMapStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl458, d)
			}
		} else if yyct458 == codecSelferValueTypeArray1234 {
			yyl458 := r.ReadArrayStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys459Slc
	var yyhl459 bool = l >= 0
	for yyj459 := 0; ; yyj459++ {
		if yyhl459 {
			if yyj459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys459Slc = r.DecodeBytes(yys459Slc, true, true)
		yys459 := string(yys459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys459 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv462 := &x.ListMeta
				yym463 := z.DecBinary()
				_ = yym463
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv462) {
				} else {
					z.DecFallback(yyv462, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv464 := &x.Items
				yym465 := z.DecBinary()
				_ = yym465
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv464), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys459)
		} // end switch yys459
	} // end for yyj459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj466 int
	var yyb466 bool
	var yyhl466 bool = l >= 0
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv469 := &x.ListMeta
		yym470 := z.DecBinary()
		_ = yym470
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv469) {
		} else {
			z.DecFallback(yyv469, false)
		}
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv471 := &x.Items
		yym472 := z.DecBinary()
		_ = yym472
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv471), d)
		}
	}
	for {
		yyj466++
		if yyhl466 {
			yyb466 = yyj466 > l
		} else {
			yyb466 = r.CheckBreak()
		}
		if yyb466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym473 := z.EncBinary()
		_ = yym473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep474 := !z.EncBinary()
			yy2arr474 := z.EncBasicHandle().StructToArray
			var yyq474 [5]bool
			_, _, _ = yysep474, yyq474, yy2arr474
			const yyr474 bool = false
			yyq474[0] = x.Kind != ""
			yyq474[1] = x.APIVersion != ""
			yyq474[2] = true
			yyq474[3] = true
			yyq474[4] = true
			var yynn474 int
			if yyr474 || yy2arr474 {
				r.EncodeArrayStart(5)
			} else {
				yynn474 = 0
				for _, b := range yyq474 {
					if b {
						yynn474++
					}
				}
				r.EncodeMapStart(yynn474)
				yynn474 = 0
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[0] {
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq474[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[1] {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq474[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[2] {
					yy482 := &x.ObjectMeta
					yy482.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy483 := &x.ObjectMeta
					yy483.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[3] {
					yy485 := &x.Spec
					yy485.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy486 := &x.Spec
					yy486.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[4] {
					yy488 := &x.Status
					yy488.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy489 := &x.Status
					yy489.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym490 := z.DecBinary()
	_ = yym490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct491 := r.ContainerType()
		if yyct491 == codecSelferValueTypeMap1234 {
			yyl491 := r.ReadMapStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl491, d)
			}
		} else if yyct491 == codecSelferValueTypeArray1234 {
			yyl491 := r.ReadArrayStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys492Slc
	var yyhl492 bool = l >= 0
	for yyj492 := 0; ; yyj492++ {
		if yyhl492 {
			if yyj492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys492Slc = r.DecodeBytes(yys492Slc, true, true)
		yys492 := string(yys492Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys492 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv495 := &x.ObjectMeta
				yyv495.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv496 := &x.Spec
				yyv496.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv497 := &x.Status
				yyv497.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys492)
		} // end switch yys492
	} // end for yyj492
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj498 int
	var yyb498 bool
	var yyhl498 bool = l >= 0
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv501 := &x.ObjectMeta
		yyv501.CodecDecodeSelf(d)
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv502 := &x.Spec
		yyv502.CodecDecodeSelf(d)
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv503 := &x.Status
		yyv503.CodecDecodeSelf(d)
	}
	for {
		yyj498++
		if yyhl498 {
			yyb498 = yyj498 > l
		} else {
			yyb498 = r.CheckBreak()
		}
		if yyb498 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj498-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym504 := z.EncBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep505 := !z.EncBinary()
			yy2arr505 := z.EncBasicHandle().StructToArray
			var yyq505 [4]bool
			_, _, _ = yysep505, yyq505, yy2arr505
			const yyr505 bool = false
			yyq505[0] = x.Kind != ""
			yyq505[1] = x.APIVersion != ""
			yyq505[2] = true
			var yynn505 int
			if yyr505 || yy2arr505 {
				r.EncodeArrayStart(4)
			} else {
				yynn505 = 1
				for _, b := range yyq505 {
					if b {
						yynn505++
					}
				}
				r.EncodeMapStart(yynn505)
				yynn505 = 0
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[0] {
					yym507 := z.EncBinary()
					_ = yym507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq505[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[1] {
					yym510 := z.EncBinary()
					_ = yym510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq505[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym511 := z.EncBinary()
					_ = yym511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[2] {
					yy513 := &x.ListMeta
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy513) {
					} else {
						z.EncFallback(yy513)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq505[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy515 := &x.ListMeta
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else if z.HasExtensions() && z.EncExt(yy515) {
					} else {
						z.EncFallback(yy515)
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym518 := z.EncBinary()
					_ = yym518
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct521 := r.ContainerType()
		if yyct521 == codecSelferValueTypeMap1234 {
			yyl521 := r.ReadMapStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl521, d)
			}
		} else if yyct521 == codecSelferValueTypeArray1234 {
			yyl521 := r.ReadArrayStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys522Slc
	var yyhl522 bool = l >= 0
	for yyj522 := 0; ; yyj522++ {
		if yyhl522 {
			if yyj522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys522Slc = r.DecodeBytes(yys522Slc, true, true)
		yys522 := string(yys522Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys522 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv525 := &x.ListMeta
				yym526 := z.DecBinary()
				_ = yym526
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv525) {
				} else {
					z.DecFallback(yyv525, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv527 := &x.Items
				yym528 := z.DecBinary()
				_ = yym528
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv527), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys522)
		} // end switch yys522
	} // end for yyj522
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj529 int
	var yyb529 bool
	var yyhl529 bool = l >= 0
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv532 := &x.ListMeta
		yym533 := z.DecBinary()
		_ = yym533
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv532) {
		} else {
			z.DecFallback(yyv532, false)
		}
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv534 := &x.Items
		yym535 := z.DecBinary()
		_ = yym535
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv534), d)
		}
	}
	for {
		yyj529++
		if yyhl529 {
			yyb529 = yyj529 > l
		} else {
			yyb529 = r.CheckBreak()
		}
		if yyb529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym536 := z.EncBinary()
		_ = yym536
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep537 := !z.EncBinary()
			yy2arr537 := z.EncBasicHandle().StructToArray
			var yyq537 [4]bool
			_, _, _ = yysep537, yyq537, yy2arr537
			const yyr537 bool = false
			yyq537[0] = len(x.AccessModes) != 0
			yyq537[1] = x.Selector != nil
			yyq537[2] = true
			yyq537[3] = x.VolumeName != ""
			var yynn537 int
			if yyr537 || yy2arr537 {
				r.EncodeArrayStart(4)
			} else {
				yynn537 = 0
				for _, b := range yyq537 {
					if b {
						yynn537++
					}
				}
				r.EncodeMapStart(yynn537)
				yynn537 = 0
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym539 := z.EncBinary()
						_ = yym539
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym540 := z.EncBinary()
						_ = yym540
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym542 := z.EncBinary()
						_ = yym542
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym543 := z.EncBinary()
						_ = yym543
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[2] {
					yy545 := &x.Resources
					yy545.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy546 := &x.Resources
					yy546.CodecEncodeSelf(e)
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[3] {
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq537[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym549 := z.EncBinary()
					_ = yym549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym550 := z.DecBinary()
	_ = yym550
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct551 := r.ContainerType()
		if yyct551 == codecSelferValueTypeMap1234 {
			yyl551 := r.ReadMapStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl551, d)
			}
		} else if yyct551 == codecSelferValueTypeArray1234 {
			yyl551 := r.ReadArrayStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl551, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys552Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys552Slc
	var yyhl552 bool = l >= 0
	for yyj552 := 0; ; yyj552++ {
		if yyhl552 {
			if yyj552 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys552Slc = r.DecodeBytes(yys552Slc, true, true)
		yys552 := string(yys552Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys552 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv553 := &x.AccessModes
				yym554 := z.DecBinary()
				_ = yym554
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv553), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym556 := z.DecBinary()
				_ = yym556
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv557 := &x.Resources
				yyv557.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys552)
		} // end switch yys552
	} // end for yyj552
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj559 int
	var yyb559 bool
	var yyhl559 bool = l >= 0
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv560 := &x.AccessModes
		yym561 := z.DecBinary()
		_ = yym561
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv560), d)
		}
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym563 := z.DecBinary()
		_ = yym563
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv564 := &x.Resources
		yyv564.CodecDecodeSelf(d)
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj559++
		if yyhl559 {
			yyb559 = yyj559 > l
		} else {
			yyb559 = r.CheckBreak()
		}
		if yyb559 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj559-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym566 := z.EncBinary()
		_ = yym566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep567 := !z.EncBinary()
			yy2arr567 := z.EncBasicHandle().StructToArray
			var yyq567 [3]bool
			_, _, _ = yysep567, yyq567, yy2arr567
			const yyr567 bool = false
			yyq567[0] = x.Phase != ""
			yyq567[1] = len(x.AccessModes) != 0
			yyq567[2] = len(x.Capacity) != 0
			var yynn567 int
			if yyr567 || yy2arr567 {
				r.EncodeArrayStart(3)
			} else {
				yynn567 = 0
				for _, b := range yyq567 {
					if b {
						yynn567++
					}
				}
				r.EncodeMapStart(yynn567)
				yynn567 = 0
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq567[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym570 := z.EncBinary()
						_ = yym570
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq567[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym571 := z.EncBinary()
						_ = yym571
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq567[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct574 := r.ContainerType()
		if yyct574 == codecSelferValueTypeMap1234 {
			yyl574 := r.ReadMapStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl574, d)
			}
		} else if yyct574 == codecSelferValueTypeArray1234 {
			yyl574 := r.ReadArrayStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys575Slc
	var yyhl575 bool = l >= 0
	for yyj575 := 0; ; yyj575++ {
		if yyhl575 {
			if yyj575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys575Slc = r.DecodeBytes(yys575Slc, true, true)
		yys575 := string(yys575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys575 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv577 := &x.AccessModes
				yym578 := z.DecBinary()
				_ = yym578
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv579 := &x.Capacity
				yyv579.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys575)
		} // end switch yys575
	} // end for yyj575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj580 int
	var yyb580 bool
	var yyhl580 bool = l >= 0
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv582 := &x.AccessModes
		yym583 := z.DecBinary()
		_ = yym583
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv582), d)
		}
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv584 := &x.Capacity
		yyv584.CodecDecodeSelf(d)
	}
	for {
		yyj580++
		if yyhl580 {
			yyb580 = yyj580 > l
		} else {
			yyb580 = r.CheckBreak()
		}
		if yyb580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym585 := z.EncBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym586 := z.DecBinary()
	_ = yym586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym587 := z.EncBinary()
	_ = yym587
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym588 := z.DecBinary()
	_ = yym588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym589 := z.EncBinary()
	_ = yym589
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym590 := z.DecBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym591 := z.EncBinary()
		_ = yym591
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep592 := !z.EncBinary()
			yy2arr592 := z.EncBasicHandle().StructToArray
			var yyq592 [1]bool
			_, _, _ = yysep592, yyq592, yy2arr592
			const yyr592 bool = false
			var yynn592 int
			if yyr592 || yy2arr592 {
				r.EncodeArrayStart(1)
			} else {
				yynn592 = 1
				for _, b := range yyq592 {
					if b {
						yynn592++
					}
				}
				r.EncodeMapStart(yynn592)
				yynn592 = 0
			}
			if yyr592 || yy2arr592 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym594 := z.EncBinary()
				_ = yym594
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym595 := z.EncBinary()
				_ = yym595
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr592 || yy2arr592 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct597 := r.ContainerType()
		if yyct597 == codecSelferValueTypeMap1234 {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if yyct597 == codecSelferValueTypeArray1234 {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys598 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj600 int
	var yyb600 bool
	var yyhl600 bool = l >= 0
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj600++
		if yyhl600 {
			yyb600 = yyj600 > l
		} else {
			yyb600 = r.CheckBreak()
		}
		if yyb600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym602 := z.EncBinary()
		_ = yym602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep603 := !z.EncBinary()
			yy2arr603 := z.EncBasicHandle().StructToArray
			var yyq603 [1]bool
			_, _, _ = yysep603, yyq603, yy2arr603
			const yyr603 bool = false
			yyq603[0] = x.Medium != ""
			var yynn603 int
			if yyr603 || yy2arr603 {
				r.EncodeArrayStart(1)
			} else {
				yynn603 = 0
				for _, b := range yyq603 {
					if b {
						yynn603++
					}
				}
				r.EncodeMapStart(yynn603)
				yynn603 = 0
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq603[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym605 := z.DecBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct606 := r.ContainerType()
		if yyct606 == codecSelferValueTypeMap1234 {
			yyl606 := r.ReadMapStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl606, d)
			}
		} else if yyct606 == codecSelferValueTypeArray1234 {
			yyl606 := r.ReadArrayStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys607Slc
	var yyhl607 bool = l >= 0
	for yyj607 := 0; ; yyj607++ {
		if yyhl607 {
			if yyj607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys607Slc = r.DecodeBytes(yys607Slc, true, true)
		yys607 := string(yys607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys607 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys607)
		} // end switch yys607
	} // end for yyj607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj609 int
	var yyb609 bool
	var yyhl609 bool = l >= 0
	yyj609++
	if yyhl609 {
		yyb609 = yyj609 > l
	} else {
		yyb609 = r.CheckBreak()
	}
	if yyb609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj609++
		if yyhl609 {
			yyb609 = yyj609 > l
		} else {
			yyb609 = r.CheckBreak()
		}
		if yyb609 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj609-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym611 := z.EncBinary()
		_ = yym611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep612 := !z.EncBinary()
			yy2arr612 := z.EncBasicHandle().StructToArray
			var yyq612 [4]bool
			_, _, _ = yysep612, yyq612, yy2arr612
			const yyr612 bool = false
			yyq612[1] = len(x.Servers) != 0
			yyq612[3] = x.ReadOnly != false
			var yynn612 int
			if yyr612 || yy2arr612 {
				r.EncodeArrayStart(4)
			} else {
				yynn612 = 2
				for _, b := range yyq612 {
					if b {
						yynn612++
					}
				}
				r.EncodeMapStart(yynn612)
				yynn612 = 0
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym614 := z.EncBinary()
				_ = yym614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq612[1] {
					if x.Servers == nil {
						r.EncodeNil()
					} else {
						yym617 := z.EncBinary()
						_ = yym617
						if false {
						} else {
							z.F.EncSliceStringV(x.Servers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq612[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("servers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Servers == nil {
						r.EncodeNil()
					} else {
						yym618 := z.EncBinary()
						_ = yym618
						if false {
						} else {
							z.F.EncSliceStringV(x.Servers, false, e)
						}
					}
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym620 := z.EncBinary()
				_ = yym620
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym621 := z.EncBinary()
				_ = yym621
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq612[3] {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq612[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym625 := z.DecBinary()
	_ = yym625
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct626 := r.ContainerType()
		if yyct626 == codecSelferValueTypeMap1234 {
			yyl626 := r.ReadMapStart()
			if yyl626 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl626, d)
			}
		} else if yyct626 == codecSelferValueTypeArray1234 {
			yyl626 := r.ReadArrayStart()
			if yyl626 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl626, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys627Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys627Slc
	var yyhl627 bool = l >= 0
	for yyj627 := 0; ; yyj627++ {
		if yyhl627 {
			if yyj627 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys627Slc = r.DecodeBytes(yys627Slc, true, true)
		yys627 := string(yys627Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys627 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "servers":
			if r.TryDecodeAsNil() {
				x.Servers = nil
			} else {
				yyv629 := &x.Servers
				yym630 := z.DecBinary()
				_ = yym630
				if false {
				} else {
					z.F.DecSliceStringX(yyv629, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys627)
		} // end switch yys627
	} // end for yyj627
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Servers = nil
	} else {
		yyv635 := &x.Servers
		yym636 := z.DecBinary()
		_ = yym636
		if false {
		} else {
			z.F.DecSliceStringX(yyv635, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym639 := z.EncBinary()
		_ = yym639
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep640 := !z.EncBinary()
			yy2arr640 := z.EncBasicHandle().StructToArray
			var yyq640 [8]bool
			_, _, _ = yysep640, yyq640, yy2arr640
			const yyr640 bool = false
			yyq640[2] = x.FSType != ""
			yyq640[3] = x.RBDPool != ""
			yyq640[4] = x.RadosUser != ""
			yyq640[5] = x.Keyring != ""
			yyq640[6] = x.SecretRef != nil
			yyq640[7] = x.ReadOnly != false
			var yynn640 int
			if yyr640 || yy2arr640 {
				r.EncodeArrayStart(8)
			} else {
				yynn640 = 2
				for _, b := range yyq640 {
					if b {
						yynn640++
					}
				}
				r.EncodeMapStart(yynn640)
				yynn640 = 0
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym645 := z.EncBinary()
				_ = yym645
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym646 := z.EncBinary()
				_ = yym646
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[2] {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq640[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[3] {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq640[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[4] {
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq640[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[5] {
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq640[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym658 := z.EncBinary()
					_ = yym658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq640[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[7] {
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq640[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym663 := z.DecBinary()
	_ = yym663
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct664 := r.ContainerType()
		if yyct664 == codecSelferValueTypeMap1234 {
			yyl664 := r.ReadMapStart()
			if yyl664 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl664, d)
			}
		} else if yyct664 == codecSelferValueTypeArray1234 {
			yyl664 := r.ReadArrayStart()
			if yyl664 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl664, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys665Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys665Slc
	var yyhl665 bool = l >= 0
	for yyj665 := 0; ; yyj665++ {
		if yyhl665 {
			if yyj665 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys665Slc = r.DecodeBytes(yys665Slc, true, true)
		yys665 := string(yys665Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys665 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv666 := &x.CephMonitors
				yym667 := z.DecBinary()
				_ = yym667
				if false {
				} else {
					z.F.DecSliceStringX(yyv666, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys665)
		} // end switch yys665
	} // end for yyj665
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj675 int
	var yyb675 bool
	var yyhl675 bool = l >= 0
	yyj675++
	if yyhl675 {
		yyb675 = yyj675 > l
	} else {
		yyb675 = r.CheckBreak()
	}
	if yyb675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv676 := &x.CephMonitors
		yym677 := z.DecBinary()
		_ = yym677
		if false {
		} else {
			z.F.DecSliceStringX(yyv676, false, d)
		}
	}
	yyj675++
	if yyhl675 {
		yyb675 = yyj675 > l
	} else {
		yyb675 = r.CheckBreak()
	}
	if yyb675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj675++
	if yyhl675 {
		yyb675 = yyj675 > l
	} else {
		yyb675 = r.CheckBreak()
	}
	if yyb675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj675++
	if yyhl675 {
		yyb675 = yyj675 > l
	} else {
		yyb675 = r.CheckBreak()
	}
	if yyb675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj675++
	if yyhl675 {
		yyb675 = yyj675 > l
	} else {
		yyb675 = r.CheckBreak()
	}
	if yyb675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj675++
	if yyhl675 {
		yyb675 = yyj675 > l
	} else {
		yyb675 = r.CheckBreak()
	}
	if yyb675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj675++
	if yyhl675 {
		yyb675 = yyj675 > l
	} else {
		yyb675 = r.CheckBreak()
	}
	if yyb675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj675++
	if yyhl675 {
		yyb675 = yyj675 > l
	} else {
		yyb675 = r.CheckBreak()
	}
	if yyb675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj675++
		if yyhl675 {
			yyb675 = yyj675 > l
		} else {
			yyb675 = r.CheckBreak()
		}
		if yyb675 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj675-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym685 := z.EncBinary()
		_ = yym685
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep686 := !z.EncBinary()
			yy2arr686 := z.EncBasicHandle().StructToArray
			var yyq686 [3]bool
			_, _, _ = yysep686, yyq686, yy2arr686
			const yyr686 bool = false
			yyq686[1] = x.FSType != ""
			yyq686[2] = x.ReadOnly != false
			var yynn686 int
			if yyr686 || yy2arr686 {
				r.EncodeArrayStart(3)
			} else {
				yynn686 = 1
				for _, b := range yyq686 {
					if b {
						yynn686++
					}
				}
				r.EncodeMapStart(yynn686)
				yynn686 = 0
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym688 := z.EncBinary()
				_ = yym688
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq686[1] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq686[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq686[2] {
					yym694 := z.EncBinary()
					_ = yym694
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq686[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym696 := z.DecBinary()
	_ = yym696
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct697 := r.ContainerType()
		if yyct697 == codecSelferValueTypeMap1234 {
			yyl697 := r.ReadMapStart()
			if yyl697 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl697, d)
			}
		} else if yyct697 == codecSelferValueTypeArray1234 {
			yyl697 := r.ReadArrayStart()
			if yyl697 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl697, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys698Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys698Slc
	var yyhl698 bool = l >= 0
	for yyj698 := 0; ; yyj698++ {
		if yyhl698 {
			if yyj698 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys698Slc = r.DecodeBytes(yys698Slc, true, true)
		yys698 := string(yys698Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys698 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys698)
		} // end switch yys698
	} // end for yyj698
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj702 int
	var yyb702 bool
	var yyhl702 bool = l >= 0
	yyj702++
	if yyhl702 {
		yyb702 = yyj702 > l
	} else {
		yyb702 = r.CheckBreak()
	}
	if yyb702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj702++
	if yyhl702 {
		yyb702 = yyj702 > l
	} else {
		yyb702 = r.CheckBreak()
	}
	if yyb702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj702++
	if yyhl702 {
		yyb702 = yyj702 > l
	} else {
		yyb702 = r.CheckBreak()
	}
	if yyb702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj702++
		if yyhl702 {
			yyb702 = yyj702 > l
		} else {
			yyb702 = r.CheckBreak()
		}
		if yyb702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym706 := z.EncBinary()
		_ = yym706
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep707 := !z.EncBinary()
			yy2arr707 := z.EncBasicHandle().StructToArray
			var yyq707 [6]bool
			_, _, _ = yysep707, yyq707, yy2arr707
			const yyr707 bool = false
			yyq707[1] = x.Path != ""
			yyq707[2] = x.User != ""
			yyq707[3] = x.SecretFile != ""
			yyq707[4] = x.SecretRef != nil
			yyq707[5] = x.ReadOnly != false
			var yynn707 int
			if yyr707 || yy2arr707 {
				r.EncodeArrayStart(6)
			} else {
				yynn707 = 1
				for _, b := range yyq707 {
					if b {
						yynn707++
					}
				}
				r.EncodeMapStart(yynn707)
				yynn707 = 0
			}
			if yyr707 || yy2arr707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr707 || yy2arr707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq707[1] {
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq707[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym713 := z.EncBinary()
					_ = yym713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr707 || yy2arr707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq707[2] {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq707[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr707 || yy2arr707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq707[3] {
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq707[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr707 || yy2arr707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq707[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq707[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr707 || yy2arr707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq707[5] {
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq707[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr707 || yy2arr707 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym724 := z.DecBinary()
	_ = yym724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct725 := r.ContainerType()
		if yyct725 == codecSelferValueTypeMap1234 {
			yyl725 := r.ReadMapStart()
			if yyl725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl725, d)
			}
		} else if yyct725 == codecSelferValueTypeArray1234 {
			yyl725 := r.ReadArrayStart()
			if yyl725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys726Slc
	var yyhl726 bool = l >= 0
	for yyj726 := 0; ; yyj726++ {
		if yyhl726 {
			if yyj726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys726Slc = r.DecodeBytes(yys726Slc, true, true)
		yys726 := string(yys726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys726 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv727 := &x.Monitors
				yym728 := z.DecBinary()
				_ = yym728
				if false {
				} else {
					z.F.DecSliceStringX(yyv727, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys726)
		} // end switch yys726
	} // end for yyj726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj734 int
	var yyb734 bool
	var yyhl734 bool = l >= 0
	yyj734++
	if yyhl734 {
		yyb734 = yyj734 > l
	} else {
		yyb734 = r.CheckBreak()
	}
	if yyb734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv735 := &x.Monitors
		yym736 := z.DecBinary()
		_ = yym736
		if false {
		} else {
			z.F.DecSliceStringX(yyv735, false, d)
		}
	}
	yyj734++
	if yyhl734 {
		yyb734 = yyj734 > l
	} else {
		yyb734 = r.CheckBreak()
	}
	if yyb734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj734++
	if yyhl734 {
		yyb734 = yyj734 > l
	} else {
		yyb734 = r.CheckBreak()
	}
	if yyb734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj734++
	if yyhl734 {
		yyb734 = yyj734 > l
	} else {
		yyb734 = r.CheckBreak()
	}
	if yyb734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj734++
	if yyhl734 {
		yyb734 = yyj734 > l
	} else {
		yyb734 = r.CheckBreak()
	}
	if yyb734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj734++
	if yyhl734 {
		yyb734 = yyj734 > l
	} else {
		yyb734 = r.CheckBreak()
	}
	if yyb734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj734++
		if yyhl734 {
			yyb734 = yyj734 > l
		} else {
			yyb734 = r.CheckBreak()
		}
		if yyb734 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj734-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym742 := z.EncBinary()
		_ = yym742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep743 := !z.EncBinary()
			yy2arr743 := z.EncBasicHandle().StructToArray
			var yyq743 [1]bool
			_, _, _ = yysep743, yyq743, yy2arr743
			const yyr743 bool = false
			var yynn743 int
			if yyr743 || yy2arr743 {
				r.EncodeArrayStart(1)
			} else {
				yynn743 = 1
				for _, b := range yyq743 {
					if b {
						yynn743++
					}
				}
				r.EncodeMapStart(yynn743)
				yynn743 = 0
			}
			if yyr743 || yy2arr743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym745 := z.EncBinary()
				_ = yym745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr743 || yy2arr743 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym747 := z.DecBinary()
	_ = yym747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct748 := r.ContainerType()
		if yyct748 == codecSelferValueTypeMap1234 {
			yyl748 := r.ReadMapStart()
			if yyl748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl748, d)
			}
		} else if yyct748 == codecSelferValueTypeArray1234 {
			yyl748 := r.ReadArrayStart()
			if yyl748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys749Slc
	var yyhl749 bool = l >= 0
	for yyj749 := 0; ; yyj749++ {
		if yyhl749 {
			if yyj749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys749Slc = r.DecodeBytes(yys749Slc, true, true)
		yys749 := string(yys749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys749 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys749)
		} // end switch yys749
	} // end for yyj749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj751 int
	var yyb751 bool
	var yyhl751 bool = l >= 0
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj751++
		if yyhl751 {
			yyb751 = yyj751 > l
		} else {
			yyb751 = r.CheckBreak()
		}
		if yyb751 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj751-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym753 := z.EncBinary()
	_ = yym753
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym754 := z.DecBinary()
	_ = yym754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym755 := z.EncBinary()
	_ = yym755
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym756 := z.DecBinary()
	_ = yym756
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym757 := z.EncBinary()
		_ = yym757
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep758 := !z.EncBinary()
			yy2arr758 := z.EncBasicHandle().StructToArray
			var yyq758 [4]bool
			_, _, _ = yysep758, yyq758, yy2arr758
			const yyr758 bool = false
			yyq758[1] = x.FSType != ""
			yyq758[2] = x.Partition != 0
			yyq758[3] = x.ReadOnly != false
			var yynn758 int
			if yyr758 || yy2arr758 {
				r.EncodeArrayStart(4)
			} else {
				yynn758 = 1
				for _, b := range yyq758 {
					if b {
						yynn758++
					}
				}
				r.EncodeMapStart(yynn758)
				yynn758 = 0
			}
			if yyr758 || yy2arr758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr758 || yy2arr758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq758[1] {
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq758[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr758 || yy2arr758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq758[2] {
					yym766 := z.EncBinary()
					_ = yym766
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq758[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr758 || yy2arr758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq758[3] {
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq758[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr758 || yy2arr758 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym771 := z.DecBinary()
	_ = yym771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct772 := r.ContainerType()
		if yyct772 == codecSelferValueTypeMap1234 {
			yyl772 := r.ReadMapStart()
			if yyl772 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl772, d)
			}
		} else if yyct772 == codecSelferValueTypeArray1234 {
			yyl772 := r.ReadArrayStart()
			if yyl772 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl772, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys773Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys773Slc
	var yyhl773 bool = l >= 0
	for yyj773 := 0; ; yyj773++ {
		if yyhl773 {
			if yyj773 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys773Slc = r.DecodeBytes(yys773Slc, true, true)
		yys773 := string(yys773Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys773 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys773)
		} // end switch yys773
	} // end for yyj773
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym783 := z.EncBinary()
		_ = yym783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep784 := !z.EncBinary()
			yy2arr784 := z.EncBasicHandle().StructToArray
			var yyq784 [5]bool
			_, _, _ = yysep784, yyq784, yy2arr784
			const yyr784 bool = false
			yyq784[2] = x.ReadOnly != false
			yyq784[3] = x.User != ""
			yyq784[4] = x.Group != ""
			var yynn784 int
			if yyr784 || yy2arr784 {
				r.EncodeArrayStart(5)
			} else {
				yynn784 = 2
				for _, b := range yyq784 {
					if b {
						yynn784++
					}
				}
				r.EncodeMapStart(yynn784)
				yynn784 = 0
			}
			if yyr784 || yy2arr784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym786 := z.EncBinary()
				_ = yym786
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym787 := z.EncBinary()
				_ = yym787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr784 || yy2arr784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym789 := z.EncBinary()
				_ = yym789
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym790 := z.EncBinary()
				_ = yym790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr784 || yy2arr784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq784[2] {
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq784[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr784 || yy2arr784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq784[3] {
					yym795 := z.EncBinary()
					_ = yym795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq784[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr784 || yy2arr784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq784[4] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq784[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr784 || yy2arr784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct801 := r.ContainerType()
		if yyct801 == codecSelferValueTypeMap1234 {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if yyct801 == codecSelferValueTypeArray1234 {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys802 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj808 int
	var yyb808 bool
	var yyhl808 bool = l >= 0
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj808++
		if yyhl808 {
			yyb808 = yyj808 > l
		} else {
			yyb808 = r.CheckBreak()
		}
		if yyb808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym814 := z.EncBinary()
		_ = yym814
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep815 := !z.EncBinary()
			yy2arr815 := z.EncBasicHandle().StructToArray
			var yyq815 [5]bool
			_, _, _ = yysep815, yyq815, yy2arr815
			const yyr815 bool = false
			yyq815[1] = x.FSType != ""
			yyq815[2] = x.SecretRef != nil
			yyq815[3] = x.ReadOnly != false
			yyq815[4] = len(x.Options) != 0
			var yynn815 int
			if yyr815 || yy2arr815 {
				r.EncodeArrayStart(5)
			} else {
				yynn815 = 1
				for _, b := range yyq815 {
					if b {
						yynn815++
					}
				}
				r.EncodeMapStart(yynn815)
				yynn815 = 0
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym817 := z.EncBinary()
				_ = yym817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym818 := z.EncBinary()
				_ = yym818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[1] {
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq815[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym821 := z.EncBinary()
					_ = yym821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq815[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[3] {
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq815[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym825 := z.EncBinary()
					_ = yym825
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym827 := z.EncBinary()
						_ = yym827
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq815[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym828 := z.EncBinary()
						_ = yym828
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym829 := z.DecBinary()
	_ = yym829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct830 := r.ContainerType()
		if yyct830 == codecSelferValueTypeMap1234 {
			yyl830 := r.ReadMapStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl830, d)
			}
		} else if yyct830 == codecSelferValueTypeArray1234 {
			yyl830 := r.ReadArrayStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys831Slc
	var yyhl831 bool = l >= 0
	for yyj831 := 0; ; yyj831++ {
		if yyhl831 {
			if yyj831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys831Slc = r.DecodeBytes(yys831Slc, true, true)
		yys831 := string(yys831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys831 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv836 := &x.Options
				yym837 := z.DecBinary()
				_ = yym837
				if false {
				} else {
					z.F.DecMapStringStringX(yyv836, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys831)
		} // end switch yys831
	} // end for yyj831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj838 int
	var yyb838 bool
	var yyhl838 bool = l >= 0
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv843 := &x.Options
		yym844 := z.DecBinary()
		_ = yym844
		if false {
		} else {
			z.F.DecMapStringStringX(yyv843, false, d)
		}
	}
	for {
		yyj838++
		if yyhl838 {
			yyb838 = yyj838 > l
		} else {
			yyb838 = r.CheckBreak()
		}
		if yyb838 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj838-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [4]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[1] = x.FSType != ""
			yyq846[2] = x.Partition != 0
			yyq846[3] = x.ReadOnly != false
			var yynn846 int
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(4)
			} else {
				yynn846 = 1
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
				yynn846 = 0
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[2] {
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq846[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[3] {
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq846[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym859 := z.DecBinary()
	_ = yym859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct860 := r.ContainerType()
		if yyct860 == codecSelferValueTypeMap1234 {
			yyl860 := r.ReadMapStart()
			if yyl860 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl860, d)
			}
		} else if yyct860 == codecSelferValueTypeArray1234 {
			yyl860 := r.ReadArrayStart()
			if yyl860 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys861Slc
	var yyhl861 bool = l >= 0
	for yyj861 := 0; ; yyj861++ {
		if yyhl861 {
			if yyj861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys861Slc = r.DecodeBytes(yys861Slc, true, true)
		yys861 := string(yys861Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys861 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys861)
		} // end switch yys861
	} // end for yyj861
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj866 int
	var yyb866 bool
	var yyhl866 bool = l >= 0
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj866++
		if yyhl866 {
			yyb866 = yyj866 > l
		} else {
			yyb866 = r.CheckBreak()
		}
		if yyb866 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj866-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym871 := z.EncBinary()
		_ = yym871
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep872 := !z.EncBinary()
			yy2arr872 := z.EncBasicHandle().StructToArray
			var yyq872 [3]bool
			_, _, _ = yysep872, yyq872, yy2arr872
			const yyr872 bool = false
			yyq872[1] = x.Revision != ""
			yyq872[2] = x.Directory != ""
			var yynn872 int
			if yyr872 || yy2arr872 {
				r.EncodeArrayStart(3)
			} else {
				yynn872 = 1
				for _, b := range yyq872 {
					if b {
						yynn872++
					}
				}
				r.EncodeMapStart(yynn872)
				yynn872 = 0
			}
			if yyr872 || yy2arr872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym874 := z.EncBinary()
				_ = yym874
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym875 := z.EncBinary()
				_ = yym875
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr872 || yy2arr872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq872[1] {
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq872[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr872 || yy2arr872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq872[2] {
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq872[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr872 || yy2arr872 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym882 := z.DecBinary()
	_ = yym882
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct883 := r.ContainerType()
		if yyct883 == codecSelferValueTypeMap1234 {
			yyl883 := r.ReadMapStart()
			if yyl883 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl883, d)
			}
		} else if yyct883 == codecSelferValueTypeArray1234 {
			yyl883 := r.ReadArrayStart()
			if yyl883 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl883, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys884Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys884Slc
	var yyhl884 bool = l >= 0
	for yyj884 := 0; ; yyj884++ {
		if yyhl884 {
			if yyj884 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys884Slc = r.DecodeBytes(yys884Slc, true, true)
		yys884 := string(yys884Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys884 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys884)
		} // end switch yys884
	} // end for yyj884
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj888 int
	var yyb888 bool
	var yyhl888 bool = l >= 0
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj888++
		if yyhl888 {
			yyb888 = yyj888 > l
		} else {
			yyb888 = r.CheckBreak()
		}
		if yyb888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym892 := z.EncBinary()
		_ = yym892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep893 := !z.EncBinary()
			yy2arr893 := z.EncBasicHandle().StructToArray
			var yyq893 [3]bool
			_, _, _ = yysep893, yyq893, yy2arr893
			const yyr893 bool = false
			yyq893[0] = x.SecretName != ""
			yyq893[1] = len(x.Items) != 0
			yyq893[2] = x.DefaultMode != nil
			var yynn893 int
			if yyr893 || yy2arr893 {
				r.EncodeArrayStart(3)
			} else {
				yynn893 = 0
				for _, b := range yyq893 {
					if b {
						yynn893++
					}
				}
				r.EncodeMapStart(yynn893)
				yynn893 = 0
			}
			if yyr893 || yy2arr893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq893[0] {
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq893[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym896 := z.EncBinary()
					_ = yym896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr893 || yy2arr893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq893[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym898 := z.EncBinary()
						_ = yym898
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq893[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym899 := z.EncBinary()
						_ = yym899
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr893 || yy2arr893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq893[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy901 := *x.DefaultMode
						yym902 := z.EncBinary()
						_ = yym902
						if false {
						} else {
							r.EncodeInt(int64(yy901))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq893[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy903 := *x.DefaultMode
						yym904 := z.EncBinary()
						_ = yym904
						if false {
						} else {
							r.EncodeInt(int64(yy903))
						}
					}
				}
			}
			if yyr893 || yy2arr893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym905 := z.DecBinary()
	_ = yym905
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct906 := r.ContainerType()
		if yyct906 == codecSelferValueTypeMap1234 {
			yyl906 := r.ReadMapStart()
			if yyl906 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl906, d)
			}
		} else if yyct906 == codecSelferValueTypeArray1234 {
			yyl906 := r.ReadArrayStart()
			if yyl906 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl906, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys907Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys907Slc
	var yyhl907 bool = l >= 0
	for yyj907 := 0; ; yyj907++ {
		if yyhl907 {
			if yyj907 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys907Slc = r.DecodeBytes(yys907Slc, true, true)
		yys907 := string(yys907Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys907 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv909 := &x.Items
				yym910 := z.DecBinary()
				_ = yym910
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv909), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym912 := z.DecBinary()
				_ = yym912
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys907)
		} // end switch yys907
	} // end for yyj907
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj913 int
	var yyb913 bool
	var yyhl913 bool = l >= 0
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv915 := &x.Items
		yym916 := z.DecBinary()
		_ = yym916
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv915), d)
		}
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym918 := z.DecBinary()
		_ = yym918
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj913++
		if yyhl913 {
			yyb913 = yyj913 > l
		} else {
			yyb913 = r.CheckBreak()
		}
		if yyb913 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj913-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym919 := z.EncBinary()
		_ = yym919
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep920 := !z.EncBinary()
			yy2arr920 := z.EncBasicHandle().StructToArray
			var yyq920 [3]bool
			_, _, _ = yysep920, yyq920, yy2arr920
			const yyr920 bool = false
			yyq920[2] = x.ReadOnly != false
			var yynn920 int
			if yyr920 || yy2arr920 {
				r.EncodeArrayStart(3)
			} else {
				yynn920 = 2
				for _, b := range yyq920 {
					if b {
						yynn920++
					}
				}
				r.EncodeMapStart(yynn920)
				yynn920 = 0
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym922 := z.EncBinary()
				_ = yym922
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym923 := z.EncBinary()
				_ = yym923
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym925 := z.EncBinary()
				_ = yym925
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym926 := z.EncBinary()
				_ = yym926
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq920[2] {
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq920[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym930 := z.DecBinary()
	_ = yym930
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct931 := r.ContainerType()
		if yyct931 == codecSelferValueTypeMap1234 {
			yyl931 := r.ReadMapStart()
			if yyl931 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl931, d)
			}
		} else if yyct931 == codecSelferValueTypeArray1234 {
			yyl931 := r.ReadArrayStart()
			if yyl931 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl931, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys932Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys932Slc
	var yyhl932 bool = l >= 0
	for yyj932 := 0; ; yyj932++ {
		if yyhl932 {
			if yyj932 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys932Slc = r.DecodeBytes(yys932Slc, true, true)
		yys932 := string(yys932Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys932 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys932)
		} // end switch yys932
	} // end for yyj932
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj936 int
	var yyb936 bool
	var yyhl936 bool = l >= 0
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj936++
		if yyhl936 {
			yyb936 = yyj936 > l
		} else {
			yyb936 = r.CheckBreak()
		}
		if yyb936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [6]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			yyq941[3] = x.ISCSIInterface != ""
			yyq941[4] = x.FSType != ""
			yyq941[5] = x.ReadOnly != false
			var yynn941 int
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(6)
			} else {
				yynn941 = 3
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
				yynn941 = 0
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym943 := z.EncBinary()
				_ = yym943
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym947 := z.EncBinary()
				_ = yym947
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym949 := z.EncBinary()
				_ = yym949
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym950 := z.EncBinary()
				_ = yym950
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq941[3] {
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq941[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq941[4] {
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq941[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq941[5] {
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq941[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct961 := r.ContainerType()
		if yyct961 == codecSelferValueTypeMap1234 {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if yyct961 == codecSelferValueTypeArray1234 {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys962 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj969 int
	var yyb969 bool
	var yyhl969 bool = l >= 0
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj969++
		if yyhl969 {
			yyb969 = yyj969 > l
		} else {
			yyb969 = r.CheckBreak()
		}
		if yyb969 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj969-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym976 := z.EncBinary()
		_ = yym976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep977 := !z.EncBinary()
			yy2arr977 := z.EncBasicHandle().StructToArray
			var yyq977 [4]bool
			_, _, _ = yysep977, yyq977, yy2arr977
			const yyr977 bool = false
			yyq977[2] = x.FSType != ""
			yyq977[3] = x.ReadOnly != false
			var yynn977 int
			if yyr977 || yy2arr977 {
				r.EncodeArrayStart(4)
			} else {
				yynn977 = 2
				for _, b := range yyq977 {
					if b {
						yynn977++
					}
				}
				r.EncodeMapStart(yynn977)
				yynn977 = 0
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym979 := z.EncBinary()
					_ = yym979
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym980 := z.EncBinary()
					_ = yym980
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy982 := *x.Lun
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeInt(int64(yy982))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy984 := *x.Lun
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeInt(int64(yy984))
					}
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq977[2] {
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq977[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq977[3] {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq977[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym992 := z.DecBinary()
	_ = yym992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct993 := r.ContainerType()
		if yyct993 == codecSelferValueTypeMap1234 {
			yyl993 := r.ReadMapStart()
			if yyl993 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl993, d)
			}
		} else if yyct993 == codecSelferValueTypeArray1234 {
			yyl993 := r.ReadArrayStart()
			if yyl993 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys994Slc
	var yyhl994 bool = l >= 0
	for yyj994 := 0; ; yyj994++ {
		if yyhl994 {
			if yyj994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys994Slc = r.DecodeBytes(yys994Slc, true, true)
		yys994 := string(yys994Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys994 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv995 := &x.TargetWWNs
				yym996 := z.DecBinary()
				_ = yym996
				if false {
				} else {
					z.F.DecSliceStringX(yyv995, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym998 := z.DecBinary()
				_ = yym998
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys994)
		} // end switch yys994
	} // end for yyj994
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1001 int
	var yyb1001 bool
	var yyhl1001 bool = l >= 0
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1002 := &x.TargetWWNs
		yym1003 := z.DecBinary()
		_ = yym1003
		if false {
		} else {
			z.F.DecSliceStringX(yyv1002, false, d)
		}
	}
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1005 := z.DecBinary()
		_ = yym1005
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1001++
		if yyhl1001 {
			yyb1001 = yyj1001 > l
		} else {
			yyb1001 = r.CheckBreak()
		}
		if yyb1001 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1001-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1008 := z.EncBinary()
		_ = yym1008
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1009 := !z.EncBinary()
			yy2arr1009 := z.EncBasicHandle().StructToArray
			var yyq1009 [3]bool
			_, _, _ = yysep1009, yyq1009, yy2arr1009
			const yyr1009 bool = false
			yyq1009[2] = x.ReadOnly != false
			var yynn1009 int
			if yyr1009 || yy2arr1009 {
				r.EncodeArrayStart(3)
			} else {
				yynn1009 = 2
				for _, b := range yyq1009 {
					if b {
						yynn1009++
					}
				}
				r.EncodeMapStart(yynn1009)
				yynn1009 = 0
			}
			if yyr1009 || yy2arr1009 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1011 := z.EncBinary()
				_ = yym1011
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1012 := z.EncBinary()
				_ = yym1012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1009 || yy2arr1009 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1014 := z.EncBinary()
				_ = yym1014
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1015 := z.EncBinary()
				_ = yym1015
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1009 || yy2arr1009 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1009[2] {
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1009[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1018 := z.EncBinary()
					_ = yym1018
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1009 || yy2arr1009 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1019 := z.DecBinary()
	_ = yym1019
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1020 := r.ContainerType()
		if yyct1020 == codecSelferValueTypeMap1234 {
			yyl1020 := r.ReadMapStart()
			if yyl1020 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1020, d)
			}
		} else if yyct1020 == codecSelferValueTypeArray1234 {
			yyl1020 := r.ReadArrayStart()
			if yyl1020 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1020, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1021Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1021Slc
	var yyhl1021 bool = l >= 0
	for yyj1021 := 0; ; yyj1021++ {
		if yyhl1021 {
			if yyj1021 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1021Slc = r.DecodeBytes(yys1021Slc, true, true)
		yys1021 := string(yys1021Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1021 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1021)
		} // end switch yys1021
	} // end for yyj1021
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1025 int
	var yyb1025 bool
	var yyhl1025 bool = l >= 0
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1025++
		if yyhl1025 {
			yyb1025 = yyj1025 > l
		} else {
			yyb1025 = r.CheckBreak()
		}
		if yyb1025 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1025-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1029 := z.EncBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1030 := !z.EncBinary()
			yy2arr1030 := z.EncBasicHandle().StructToArray
			var yyq1030 [2]bool
			_, _, _ = yysep1030, yyq1030, yy2arr1030
			const yyr1030 bool = false
			yyq1030[1] = x.FSType != ""
			var yynn1030 int
			if yyr1030 || yy2arr1030 {
				r.EncodeArrayStart(2)
			} else {
				yynn1030 = 1
				for _, b := range yyq1030 {
					if b {
						yynn1030++
					}
				}
				r.EncodeMapStart(yynn1030)
				yynn1030 = 0
			}
			if yyr1030 || yy2arr1030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1030 || yy2arr1030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1030[1] {
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1037 := z.DecBinary()
	_ = yym1037
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1038 := r.ContainerType()
		if yyct1038 == codecSelferValueTypeMap1234 {
			yyl1038 := r.ReadMapStart()
			if yyl1038 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1038, d)
			}
		} else if yyct1038 == codecSelferValueTypeArray1234 {
			yyl1038 := r.ReadArrayStart()
			if yyl1038 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1038, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1039Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1039Slc
	var yyhl1039 bool = l >= 0
	for yyj1039 := 0; ; yyj1039++ {
		if yyhl1039 {
			if yyj1039 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1039Slc = r.DecodeBytes(yys1039Slc, true, true)
		yys1039 := string(yys1039Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1039 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1039)
		} // end switch yys1039
	} // end for yyj1039
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1042 int
	var yyb1042 bool
	var yyhl1042 bool = l >= 0
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1042++
		if yyhl1042 {
			yyb1042 = yyj1042 > l
		} else {
			yyb1042 = r.CheckBreak()
		}
		if yyb1042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1045 := z.EncBinary()
	_ = yym1045
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1046 := z.DecBinary()
	_ = yym1046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1047 := z.EncBinary()
		_ = yym1047
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1048 := !z.EncBinary()
			yy2arr1048 := z.EncBasicHandle().StructToArray
			var yyq1048 [5]bool
			_, _, _ = yysep1048, yyq1048, yy2arr1048
			const yyr1048 bool = false
			yyq1048[2] = x.CachingMode != nil
			yyq1048[3] = x.FSType != nil
			yyq1048[4] = x.ReadOnly != nil
			var yynn1048 int
			if yyr1048 || yy2arr1048 {
				r.EncodeArrayStart(5)
			} else {
				yynn1048 = 2
				for _, b := range yyq1048 {
					if b {
						yynn1048++
					}
				}
				r.EncodeMapStart(yynn1048)
				yynn1048 = 0
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1050 := z.EncBinary()
				_ = yym1050
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1051 := z.EncBinary()
				_ = yym1051
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1053 := z.EncBinary()
				_ = yym1053
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1054 := z.EncBinary()
				_ = yym1054
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1056 := *x.CachingMode
						yy1056.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1057 := *x.CachingMode
						yy1057.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1059 := *x.FSType
						yym1060 := z.EncBinary()
						_ = yym1060
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1059))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1061 := *x.FSType
						yym1062 := z.EncBinary()
						_ = yym1062
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1061))
						}
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1064 := *x.ReadOnly
						yym1065 := z.EncBinary()
						_ = yym1065
						if false {
						} else {
							r.EncodeBool(bool(yy1064))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1066 := *x.ReadOnly
						yym1067 := z.EncBinary()
						_ = yym1067
						if false {
						} else {
							r.EncodeBool(bool(yy1066))
						}
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1068 := z.DecBinary()
	_ = yym1068
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1069 := r.ContainerType()
		if yyct1069 == codecSelferValueTypeMap1234 {
			yyl1069 := r.ReadMapStart()
			if yyl1069 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1069, d)
			}
		} else if yyct1069 == codecSelferValueTypeArray1234 {
			yyl1069 := r.ReadArrayStart()
			if yyl1069 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1069, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1070Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1070Slc
	var yyhl1070 bool = l >= 0
	for yyj1070 := 0; ; yyj1070++ {
		if yyhl1070 {
			if yyj1070 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1070Slc = r.DecodeBytes(yys1070Slc, true, true)
		yys1070 := string(yys1070Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1070 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1075 := z.DecBinary()
				_ = yym1075
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1077 := z.DecBinary()
				_ = yym1077
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1070)
		} // end switch yys1070
	} // end for yyj1070
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1078 int
	var yyb1078 bool
	var yyhl1078 bool = l >= 0
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1083 := z.DecBinary()
		_ = yym1083
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1085 := z.DecBinary()
		_ = yym1085
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1078++
		if yyhl1078 {
			yyb1078 = yyj1078 > l
		} else {
			yyb1078 = r.CheckBreak()
		}
		if yyb1078 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1078-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1086 := z.EncBinary()
		_ = yym1086
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1087 := !z.EncBinary()
			yy2arr1087 := z.EncBasicHandle().StructToArray
			var yyq1087 [3]bool
			_, _, _ = yysep1087, yyq1087, yy2arr1087
			const yyr1087 bool = false
			yyq1087[0] = x.Name != ""
			yyq1087[1] = len(x.Items) != 0
			yyq1087[2] = x.DefaultMode != nil
			var yynn1087 int
			if yyr1087 || yy2arr1087 {
				r.EncodeArrayStart(3)
			} else {
				yynn1087 = 0
				for _, b := range yyq1087 {
					if b {
						yynn1087++
					}
				}
				r.EncodeMapStart(yynn1087)
				yynn1087 = 0
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1087[0] {
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1087[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1090 := z.EncBinary()
					_ = yym1090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1087[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1092 := z.EncBinary()
						_ = yym1092
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1087[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1093 := z.EncBinary()
						_ = yym1093
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1087[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1095 := *x.DefaultMode
						yym1096 := z.EncBinary()
						_ = yym1096
						if false {
						} else {
							r.EncodeInt(int64(yy1095))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1087[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1097 := *x.DefaultMode
						yym1098 := z.EncBinary()
						_ = yym1098
						if false {
						} else {
							r.EncodeInt(int64(yy1097))
						}
					}
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1099 := z.DecBinary()
	_ = yym1099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1100 := r.ContainerType()
		if yyct1100 == codecSelferValueTypeMap1234 {
			yyl1100 := r.ReadMapStart()
			if yyl1100 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1100, d)
			}
		} else if yyct1100 == codecSelferValueTypeArray1234 {
			yyl1100 := r.ReadArrayStart()
			if yyl1100 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1101Slc
	var yyhl1101 bool = l >= 0
	for yyj1101 := 0; ; yyj1101++ {
		if yyhl1101 {
			if yyj1101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1101Slc = r.DecodeBytes(yys1101Slc, true, true)
		yys1101 := string(yys1101Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1101 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1103 := &x.Items
				yym1104 := z.DecBinary()
				_ = yym1104
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1103), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1106 := z.DecBinary()
				_ = yym1106
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1101)
		} // end switch yys1101
	} // end for yyj1101
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1107 int
	var yyb1107 bool
	var yyhl1107 bool = l >= 0
	yyj1107++
	if yyhl1107 {
		yyb1107 = yyj1107 > l
	} else {
		yyb1107 = r.CheckBreak()
	}
	if yyb1107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1107++
	if yyhl1107 {
		yyb1107 = yyj1107 > l
	} else {
		yyb1107 = r.CheckBreak()
	}
	if yyb1107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1109 := &x.Items
		yym1110 := z.DecBinary()
		_ = yym1110
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1109), d)
		}
	}
	yyj1107++
	if yyhl1107 {
		yyb1107 = yyj1107 > l
	} else {
		yyb1107 = r.CheckBreak()
	}
	if yyb1107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1112 := z.DecBinary()
		_ = yym1112
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1107++
		if yyhl1107 {
			yyb1107 = yyj1107 > l
		} else {
			yyb1107 = r.CheckBreak()
		}
		if yyb1107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1113 := z.EncBinary()
		_ = yym1113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1114 := !z.EncBinary()
			yy2arr1114 := z.EncBasicHandle().StructToArray
			var yyq1114 [3]bool
			_, _, _ = yysep1114, yyq1114, yy2arr1114
			const yyr1114 bool = false
			yyq1114[2] = x.Mode != nil
			var yynn1114 int
			if yyr1114 || yy2arr1114 {
				r.EncodeArrayStart(3)
			} else {
				yynn1114 = 2
				for _, b := range yyq1114 {
					if b {
						yynn1114++
					}
				}
				r.EncodeMapStart(yynn1114)
				yynn1114 = 0
			}
			if yyr1114 || yy2arr1114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1116 := z.EncBinary()
				_ = yym1116
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1117 := z.EncBinary()
				_ = yym1117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1114 || yy2arr1114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1119 := z.EncBinary()
				_ = yym1119
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1120 := z.EncBinary()
				_ = yym1120
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1114 || yy2arr1114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1114[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1122 := *x.Mode
						yym1123 := z.EncBinary()
						_ = yym1123
						if false {
						} else {
							r.EncodeInt(int64(yy1122))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1114[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1124 := *x.Mode
						yym1125 := z.EncBinary()
						_ = yym1125
						if false {
						} else {
							r.EncodeInt(int64(yy1124))
						}
					}
				}
			}
			if yyr1114 || yy2arr1114 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1126 := z.DecBinary()
	_ = yym1126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1127 := r.ContainerType()
		if yyct1127 == codecSelferValueTypeMap1234 {
			yyl1127 := r.ReadMapStart()
			if yyl1127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1127, d)
			}
		} else if yyct1127 == codecSelferValueTypeArray1234 {
			yyl1127 := r.ReadArrayStart()
			if yyl1127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1128Slc
	var yyhl1128 bool = l >= 0
	for yyj1128 := 0; ; yyj1128++ {
		if yyhl1128 {
			if yyj1128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1128Slc = r.DecodeBytes(yys1128Slc, true, true)
		yys1128 := string(yys1128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1128 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1132 := z.DecBinary()
				_ = yym1132
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1128)
		} // end switch yys1128
	} // end for yyj1128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1133 int
	var yyb1133 bool
	var yyhl1133 bool = l >= 0
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1137 := z.DecBinary()
		_ = yym1137
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1133++
		if yyhl1133 {
			yyb1133 = yyj1133 > l
		} else {
			yyb1133 = r.CheckBreak()
		}
		if yyb1133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1138 := z.EncBinary()
		_ = yym1138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1139 := !z.EncBinary()
			yy2arr1139 := z.EncBasicHandle().StructToArray
			var yyq1139 [5]bool
			_, _, _ = yysep1139, yyq1139, yy2arr1139
			const yyr1139 bool = false
			yyq1139[0] = x.Name != ""
			yyq1139[1] = x.HostPort != 0
			yyq1139[3] = x.Protocol != ""
			yyq1139[4] = x.HostIP != ""
			var yynn1139 int
			if yyr1139 || yy2arr1139 {
				r.EncodeArrayStart(5)
			} else {
				yynn1139 = 1
				for _, b := range yyq1139 {
					if b {
						yynn1139++
					}
				}
				r.EncodeMapStart(yynn1139)
				yynn1139 = 0
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1139[0] {
					yym1141 := z.EncBinary()
					_ = yym1141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1139[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1142 := z.EncBinary()
					_ = yym1142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1139[1] {
					yym1144 := z.EncBinary()
					_ = yym1144
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1139[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1145 := z.EncBinary()
					_ = yym1145
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1147 := z.EncBinary()
				_ = yym1147
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1148 := z.EncBinary()
				_ = yym1148
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1139[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1139[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1139[4] {
					yym1151 := z.EncBinary()
					_ = yym1151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1139[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1152 := z.EncBinary()
					_ = yym1152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1153 := z.DecBinary()
	_ = yym1153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1154 := r.ContainerType()
		if yyct1154 == codecSelferValueTypeMap1234 {
			yyl1154 := r.ReadMapStart()
			if yyl1154 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1154, d)
			}
		} else if yyct1154 == codecSelferValueTypeArray1234 {
			yyl1154 := r.ReadArrayStart()
			if yyl1154 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1154, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1155Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1155Slc
	var yyhl1155 bool = l >= 0
	for yyj1155 := 0; ; yyj1155++ {
		if yyhl1155 {
			if yyj1155 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1155Slc = r.DecodeBytes(yys1155Slc, true, true)
		yys1155 := string(yys1155Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1155 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1155)
		} // end switch yys1155
	} // end for yyj1155
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1167 := z.EncBinary()
		_ = yym1167
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1168 := !z.EncBinary()
			yy2arr1168 := z.EncBasicHandle().StructToArray
			var yyq1168 [4]bool
			_, _, _ = yysep1168, yyq1168, yy2arr1168
			const yyr1168 bool = false
			yyq1168[1] = x.ReadOnly != false
			yyq1168[3] = x.SubPath != ""
			var yynn1168 int
			if yyr1168 || yy2arr1168 {
				r.EncodeArrayStart(4)
			} else {
				yynn1168 = 2
				for _, b := range yyq1168 {
					if b {
						yynn1168++
					}
				}
				r.EncodeMapStart(yynn1168)
				yynn1168 = 0
			}
			if yyr1168 || yy2arr1168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1170 := z.EncBinary()
				_ = yym1170
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1171 := z.EncBinary()
				_ = yym1171
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1168 || yy2arr1168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1168[1] {
					yym1173 := z.EncBinary()
					_ = yym1173
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1168[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1168 || yy2arr1168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1176 := z.EncBinary()
				_ = yym1176
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1177 := z.EncBinary()
				_ = yym1177
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1168 || yy2arr1168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1168[3] {
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1168[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1168 || yy2arr1168 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1181 := z.DecBinary()
	_ = yym1181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1182 := r.ContainerType()
		if yyct1182 == codecSelferValueTypeMap1234 {
			yyl1182 := r.ReadMapStart()
			if yyl1182 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1182, d)
			}
		} else if yyct1182 == codecSelferValueTypeArray1234 {
			yyl1182 := r.ReadArrayStart()
			if yyl1182 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1182, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1183Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1183Slc
	var yyhl1183 bool = l >= 0
	for yyj1183 := 0; ; yyj1183++ {
		if yyhl1183 {
			if yyj1183 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1183Slc = r.DecodeBytes(yys1183Slc, true, true)
		yys1183 := string(yys1183Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1183 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1183)
		} // end switch yys1183
	} // end for yyj1183
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1188 int
	var yyb1188 bool
	var yyhl1188 bool = l >= 0
	yyj1188++
	if yyhl1188 {
		yyb1188 = yyj1188 > l
	} else {
		yyb1188 = r.CheckBreak()
	}
	if yyb1188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1188++
	if yyhl1188 {
		yyb1188 = yyj1188 > l
	} else {
		yyb1188 = r.CheckBreak()
	}
	if yyb1188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1188++
	if yyhl1188 {
		yyb1188 = yyj1188 > l
	} else {
		yyb1188 = r.CheckBreak()
	}
	if yyb1188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1188++
	if yyhl1188 {
		yyb1188 = yyj1188 > l
	} else {
		yyb1188 = r.CheckBreak()
	}
	if yyb1188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1188++
		if yyhl1188 {
			yyb1188 = yyj1188 > l
		} else {
			yyb1188 = r.CheckBreak()
		}
		if yyb1188 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1188-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1193 := z.EncBinary()
		_ = yym1193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1194 := !z.EncBinary()
			yy2arr1194 := z.EncBasicHandle().StructToArray
			var yyq1194 [3]bool
			_, _, _ = yysep1194, yyq1194, yy2arr1194
			const yyr1194 bool = false
			yyq1194[1] = x.Value != ""
			yyq1194[2] = x.ValueFrom != nil
			var yynn1194 int
			if yyr1194 || yy2arr1194 {
				r.EncodeArrayStart(3)
			} else {
				yynn1194 = 1
				for _, b := range yyq1194 {
					if b {
						yynn1194++
					}
				}
				r.EncodeMapStart(yynn1194)
				yynn1194 = 0
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1197 := z.EncBinary()
				_ = yym1197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[1] {
					yym1199 := z.EncBinary()
					_ = yym1199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1200 := z.EncBinary()
					_ = yym1200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1194[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1202 := z.DecBinary()
	_ = yym1202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1203 := r.ContainerType()
		if yyct1203 == codecSelferValueTypeMap1234 {
			yyl1203 := r.ReadMapStart()
			if yyl1203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1203, d)
			}
		} else if yyct1203 == codecSelferValueTypeArray1234 {
			yyl1203 := r.ReadArrayStart()
			if yyl1203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1204Slc
	var yyhl1204 bool = l >= 0
	for yyj1204 := 0; ; yyj1204++ {
		if yyhl1204 {
			if yyj1204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1204Slc = r.DecodeBytes(yys1204Slc, true, true)
		yys1204 := string(yys1204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1204 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1204)
		} // end switch yys1204
	} // end for yyj1204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1208 int
	var yyb1208 bool
	var yyhl1208 bool = l >= 0
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1208++
		if yyhl1208 {
			yyb1208 = yyj1208 > l
		} else {
			yyb1208 = r.CheckBreak()
		}
		if yyb1208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1212 := z.EncBinary()
		_ = yym1212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1213 := !z.EncBinary()
			yy2arr1213 := z.EncBasicHandle().StructToArray
			var yyq1213 [4]bool
			_, _, _ = yysep1213, yyq1213, yy2arr1213
			const yyr1213 bool = false
			yyq1213[0] = x.FieldRef != nil
			yyq1213[1] = x.ResourceFieldRef != nil
			yyq1213[2] = x.ConfigMapKeyRef != nil
			yyq1213[3] = x.SecretKeyRef != nil
			var yynn1213 int
			if yyr1213 || yy2arr1213 {
				r.EncodeArrayStart(4)
			} else {
				yynn1213 = 0
				for _, b := range yyq1213 {
					if b {
						yynn1213++
					}
				}
				r.EncodeMapStart(yynn1213)
				yynn1213 = 0
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1213[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1213[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1213[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1213[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1213[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1213[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1213[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1218 := z.DecBinary()
	_ = yym1218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1219 := r.ContainerType()
		if yyct1219 == codecSelferValueTypeMap1234 {
			yyl1219 := r.ReadMapStart()
			if yyl1219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1219, d)
			}
		} else if yyct1219 == codecSelferValueTypeArray1234 {
			yyl1219 := r.ReadArrayStart()
			if yyl1219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1220Slc
	var yyhl1220 bool = l >= 0
	for yyj1220 := 0; ; yyj1220++ {
		if yyhl1220 {
			if yyj1220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1220Slc = r.DecodeBytes(yys1220Slc, true, true)
		yys1220 := string(yys1220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1220 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1220)
		} // end switch yys1220
	} // end for yyj1220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1225 int
	var yyb1225 bool
	var yyhl1225 bool = l >= 0
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1225++
		if yyhl1225 {
			yyb1225 = yyj1225 > l
		} else {
			yyb1225 = r.CheckBreak()
		}
		if yyb1225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1230 := z.EncBinary()
		_ = yym1230
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1231 := !z.EncBinary()
			yy2arr1231 := z.EncBasicHandle().StructToArray
			var yyq1231 [2]bool
			_, _, _ = yysep1231, yyq1231, yy2arr1231
			const yyr1231 bool = false
			yyq1231[0] = x.APIVersion != ""
			var yynn1231 int
			if yyr1231 || yy2arr1231 {
				r.EncodeArrayStart(2)
			} else {
				yynn1231 = 1
				for _, b := range yyq1231 {
					if b {
						yynn1231++
					}
				}
				r.EncodeMapStart(yynn1231)
				yynn1231 = 0
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1231[0] {
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1231[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1234 := z.EncBinary()
					_ = yym1234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1236 := z.EncBinary()
				_ = yym1236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1237 := z.EncBinary()
				_ = yym1237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1238 := z.DecBinary()
	_ = yym1238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1239 := r.ContainerType()
		if yyct1239 == codecSelferValueTypeMap1234 {
			yyl1239 := r.ReadMapStart()
			if yyl1239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1239, d)
			}
		} else if yyct1239 == codecSelferValueTypeArray1234 {
			yyl1239 := r.ReadArrayStart()
			if yyl1239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1240Slc
	var yyhl1240 bool = l >= 0
	for yyj1240 := 0; ; yyj1240++ {
		if yyhl1240 {
			if yyj1240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1240Slc = r.DecodeBytes(yys1240Slc, true, true)
		yys1240 := string(yys1240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1240 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1240)
		} // end switch yys1240
	} // end for yyj1240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1243 int
	var yyb1243 bool
	var yyhl1243 bool = l >= 0
	yyj1243++
	if yyhl1243 {
		yyb1243 = yyj1243 > l
	} else {
		yyb1243 = r.CheckBreak()
	}
	if yyb1243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1243++
	if yyhl1243 {
		yyb1243 = yyj1243 > l
	} else {
		yyb1243 = r.CheckBreak()
	}
	if yyb1243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1243++
		if yyhl1243 {
			yyb1243 = yyj1243 > l
		} else {
			yyb1243 = r.CheckBreak()
		}
		if yyb1243 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1243-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1246 := z.EncBinary()
		_ = yym1246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1247 := !z.EncBinary()
			yy2arr1247 := z.EncBasicHandle().StructToArray
			var yyq1247 [3]bool
			_, _, _ = yysep1247, yyq1247, yy2arr1247
			const yyr1247 bool = false
			yyq1247[0] = x.ContainerName != ""
			yyq1247[2] = true
			var yynn1247 int
			if yyr1247 || yy2arr1247 {
				r.EncodeArrayStart(3)
			} else {
				yynn1247 = 1
				for _, b := range yyq1247 {
					if b {
						yynn1247++
					}
				}
				r.EncodeMapStart(yynn1247)
				yynn1247 = 0
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1247[0] {
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1250 := z.EncBinary()
					_ = yym1250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1252 := z.EncBinary()
				_ = yym1252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1253 := z.EncBinary()
				_ = yym1253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1247[2] {
					yy1255 := &x.Divisor
					yym1256 := z.EncBinary()
					_ = yym1256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1255) {
					} else if !yym1256 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1255)
					} else {
						z.EncFallback(yy1255)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1247[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1257 := &x.Divisor
					yym1258 := z.EncBinary()
					_ = yym1258
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1257) {
					} else if !yym1258 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1257)
					} else {
						z.EncFallback(yy1257)
					}
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1259 := z.DecBinary()
	_ = yym1259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1260 := r.ContainerType()
		if yyct1260 == codecSelferValueTypeMap1234 {
			yyl1260 := r.ReadMapStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1260, d)
			}
		} else if yyct1260 == codecSelferValueTypeArray1234 {
			yyl1260 := r.ReadArrayStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1261Slc
	var yyhl1261 bool = l >= 0
	for yyj1261 := 0; ; yyj1261++ {
		if yyhl1261 {
			if yyj1261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1261Slc = r.DecodeBytes(yys1261Slc, true, true)
		yys1261 := string(yys1261Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1261 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1264 := &x.Divisor
				yym1265 := z.DecBinary()
				_ = yym1265
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1264) {
				} else if !yym1265 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1264)
				} else {
					z.DecFallback(yyv1264, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1261)
		} // end switch yys1261
	} // end for yyj1261
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1266 int
	var yyb1266 bool
	var yyhl1266 bool = l >= 0
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1269 := &x.Divisor
		yym1270 := z.DecBinary()
		_ = yym1270
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1269) {
		} else if !yym1270 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1269)
		} else {
			z.DecFallback(yyv1269, false)
		}
	}
	for {
		yyj1266++
		if yyhl1266 {
			yyb1266 = yyj1266 > l
		} else {
			yyb1266 = r.CheckBreak()
		}
		if yyb1266 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1266-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1271 := z.EncBinary()
		_ = yym1271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1272 := !z.EncBinary()
			yy2arr1272 := z.EncBasicHandle().StructToArray
			var yyq1272 [2]bool
			_, _, _ = yysep1272, yyq1272, yy2arr1272
			const yyr1272 bool = false
			yyq1272[0] = x.Name != ""
			var yynn1272 int
			if yyr1272 || yy2arr1272 {
				r.EncodeArrayStart(2)
			} else {
				yynn1272 = 1
				for _, b := range yyq1272 {
					if b {
						yynn1272++
					}
				}
				r.EncodeMapStart(yynn1272)
				yynn1272 = 0
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1272[0] {
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1277 := z.EncBinary()
				_ = yym1277
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1279 := z.DecBinary()
	_ = yym1279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1280 := r.ContainerType()
		if yyct1280 == codecSelferValueTypeMap1234 {
			yyl1280 := r.ReadMapStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1280, d)
			}
		} else if yyct1280 == codecSelferValueTypeArray1234 {
			yyl1280 := r.ReadArrayStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1281Slc
	var yyhl1281 bool = l >= 0
	for yyj1281 := 0; ; yyj1281++ {
		if yyhl1281 {
			if yyj1281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1281Slc = r.DecodeBytes(yys1281Slc, true, true)
		yys1281 := string(yys1281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1281 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1281)
		} // end switch yys1281
	} // end for yyj1281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1284 int
	var yyb1284 bool
	var yyhl1284 bool = l >= 0
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1284++
		if yyhl1284 {
			yyb1284 = yyj1284 > l
		} else {
			yyb1284 = r.CheckBreak()
		}
		if yyb1284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1287 := z.EncBinary()
		_ = yym1287
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1288 := !z.EncBinary()
			yy2arr1288 := z.EncBasicHandle().StructToArray
			var yyq1288 [2]bool
			_, _, _ = yysep1288, yyq1288, yy2arr1288
			const yyr1288 bool = false
			yyq1288[0] = x.Name != ""
			var yynn1288 int
			if yyr1288 || yy2arr1288 {
				r.EncodeArrayStart(2)
			} else {
				yynn1288 = 1
				for _, b := range yyq1288 {
					if b {
						yynn1288++
					}
				}
				r.EncodeMapStart(yynn1288)
				yynn1288 = 0
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1288[0] {
					yym1290 := z.EncBinary()
					_ = yym1290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1288[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1294 := z.EncBinary()
				_ = yym1294
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1295 := z.DecBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1296 := r.ContainerType()
		if yyct1296 == codecSelferValueTypeMap1234 {
			yyl1296 := r.ReadMapStart()
			if yyl1296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1296, d)
			}
		} else if yyct1296 == codecSelferValueTypeArray1234 {
			yyl1296 := r.ReadArrayStart()
			if yyl1296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1297Slc
	var yyhl1297 bool = l >= 0
	for yyj1297 := 0; ; yyj1297++ {
		if yyhl1297 {
			if yyj1297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1297Slc = r.DecodeBytes(yys1297Slc, true, true)
		yys1297 := string(yys1297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1297 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1297)
		} // end switch yys1297
	} // end for yyj1297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1300 int
	var yyb1300 bool
	var yyhl1300 bool = l >= 0
	yyj1300++
	if yyhl1300 {
		yyb1300 = yyj1300 > l
	} else {
		yyb1300 = r.CheckBreak()
	}
	if yyb1300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1300++
	if yyhl1300 {
		yyb1300 = yyj1300 > l
	} else {
		yyb1300 = r.CheckBreak()
	}
	if yyb1300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1300++
		if yyhl1300 {
			yyb1300 = yyj1300 > l
		} else {
			yyb1300 = r.CheckBreak()
		}
		if yyb1300 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1300-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1303 := z.EncBinary()
		_ = yym1303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1304 := !z.EncBinary()
			yy2arr1304 := z.EncBasicHandle().StructToArray
			var yyq1304 [2]bool
			_, _, _ = yysep1304, yyq1304, yy2arr1304
			const yyr1304 bool = false
			var yynn1304 int
			if yyr1304 || yy2arr1304 {
				r.EncodeArrayStart(2)
			} else {
				yynn1304 = 2
				for _, b := range yyq1304 {
					if b {
						yynn1304++
					}
				}
				r.EncodeMapStart(yynn1304)
				yynn1304 = 0
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1306 := z.EncBinary()
				_ = yym1306
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1307 := z.EncBinary()
				_ = yym1307
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1309 := z.EncBinary()
				_ = yym1309
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1310 := z.EncBinary()
				_ = yym1310
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1311 := z.DecBinary()
	_ = yym1311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1312 := r.ContainerType()
		if yyct1312 == codecSelferValueTypeMap1234 {
			yyl1312 := r.ReadMapStart()
			if yyl1312 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1312, d)
			}
		} else if yyct1312 == codecSelferValueTypeArray1234 {
			yyl1312 := r.ReadArrayStart()
			if yyl1312 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1313Slc
	var yyhl1313 bool = l >= 0
	for yyj1313 := 0; ; yyj1313++ {
		if yyhl1313 {
			if yyj1313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1313Slc = r.DecodeBytes(yys1313Slc, true, true)
		yys1313 := string(yys1313Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1313 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1313)
		} // end switch yys1313
	} // end for yyj1313
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1316 int
	var yyb1316 bool
	var yyhl1316 bool = l >= 0
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1316++
		if yyhl1316 {
			yyb1316 = yyj1316 > l
		} else {
			yyb1316 = r.CheckBreak()
		}
		if yyb1316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1319 := z.EncBinary()
		_ = yym1319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1320 := !z.EncBinary()
			yy2arr1320 := z.EncBasicHandle().StructToArray
			var yyq1320 [5]bool
			_, _, _ = yysep1320, yyq1320, yy2arr1320
			const yyr1320 bool = false
			yyq1320[0] = x.Path != ""
			yyq1320[2] = x.Host != ""
			yyq1320[3] = x.Scheme != ""
			yyq1320[4] = len(x.HTTPHeaders) != 0
			var yynn1320 int
			if yyr1320 || yy2arr1320 {
				r.EncodeArrayStart(5)
			} else {
				yynn1320 = 1
				for _, b := range yyq1320 {
					if b {
						yynn1320++
					}
				}
				r.EncodeMapStart(yynn1320)
				yynn1320 = 0
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1320[0] {
					yym1322 := z.EncBinary()
					_ = yym1322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1323 := z.EncBinary()
					_ = yym1323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1325 := &x.Port
				yym1326 := z.EncBinary()
				_ = yym1326
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1325) {
				} else if !yym1326 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1325)
				} else {
					z.EncFallback(yy1325)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1327 := &x.Port
				yym1328 := z.EncBinary()
				_ = yym1328
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1327) {
				} else if !yym1328 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1327)
				} else {
					z.EncFallback(yy1327)
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1320[2] {
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1331 := z.EncBinary()
					_ = yym1331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1320[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1320[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1334 := z.EncBinary()
						_ = yym1334
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1320[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1335 := z.EncBinary()
						_ = yym1335
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1336 := z.DecBinary()
	_ = yym1336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1337 := r.ContainerType()
		if yyct1337 == codecSelferValueTypeMap1234 {
			yyl1337 := r.ReadMapStart()
			if yyl1337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1337, d)
			}
		} else if yyct1337 == codecSelferValueTypeArray1234 {
			yyl1337 := r.ReadArrayStart()
			if yyl1337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1338Slc
	var yyhl1338 bool = l >= 0
	for yyj1338 := 0; ; yyj1338++ {
		if yyhl1338 {
			if yyj1338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1338Slc = r.DecodeBytes(yys1338Slc, true, true)
		yys1338 := string(yys1338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1338 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1340 := &x.Port
				yym1341 := z.DecBinary()
				_ = yym1341
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1340) {
				} else if !yym1341 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1340)
				} else {
					z.DecFallback(yyv1340, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1344 := &x.HTTPHeaders
				yym1345 := z.DecBinary()
				_ = yym1345
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1344), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1338)
		} // end switch yys1338
	} // end for yyj1338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1346 int
	var yyb1346 bool
	var yyhl1346 bool = l >= 0
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1348 := &x.Port
		yym1349 := z.DecBinary()
		_ = yym1349
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1348) {
		} else if !yym1349 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1348)
		} else {
			z.DecFallback(yyv1348, false)
		}
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1352 := &x.HTTPHeaders
		yym1353 := z.DecBinary()
		_ = yym1353
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1352), d)
		}
	}
	for {
		yyj1346++
		if yyhl1346 {
			yyb1346 = yyj1346 > l
		} else {
			yyb1346 = r.CheckBreak()
		}
		if yyb1346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1354 := z.EncBinary()
	_ = yym1354
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1355 := z.DecBinary()
	_ = yym1355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1356 := z.EncBinary()
		_ = yym1356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1357 := !z.EncBinary()
			yy2arr1357 := z.EncBasicHandle().StructToArray
			var yyq1357 [1]bool
			_, _, _ = yysep1357, yyq1357, yy2arr1357
			const yyr1357 bool = false
			var yynn1357 int
			if yyr1357 || yy2arr1357 {
				r.EncodeArrayStart(1)
			} else {
				yynn1357 = 1
				for _, b := range yyq1357 {
					if b {
						yynn1357++
					}
				}
				r.EncodeMapStart(yynn1357)
				yynn1357 = 0
			}
			if yyr1357 || yy2arr1357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1359 := &x.Port
				yym1360 := z.EncBinary()
				_ = yym1360
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1359) {
				} else if !yym1360 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1359)
				} else {
					z.EncFallback(yy1359)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1361 := &x.Port
				yym1362 := z.EncBinary()
				_ = yym1362
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1361) {
				} else if !yym1362 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1361)
				} else {
					z.EncFallback(yy1361)
				}
			}
			if yyr1357 || yy2arr1357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1363 := z.DecBinary()
	_ = yym1363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1364 := r.ContainerType()
		if yyct1364 == codecSelferValueTypeMap1234 {
			yyl1364 := r.ReadMapStart()
			if yyl1364 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1364, d)
			}
		} else if yyct1364 == codecSelferValueTypeArray1234 {
			yyl1364 := r.ReadArrayStart()
			if yyl1364 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1365Slc
	var yyhl1365 bool = l >= 0
	for yyj1365 := 0; ; yyj1365++ {
		if yyhl1365 {
			if yyj1365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1365Slc = r.DecodeBytes(yys1365Slc, true, true)
		yys1365 := string(yys1365Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1365 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1366 := &x.Port
				yym1367 := z.DecBinary()
				_ = yym1367
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1366) {
				} else if !yym1367 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1366)
				} else {
					z.DecFallback(yyv1366, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1365)
		} // end switch yys1365
	} // end for yyj1365
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1368 int
	var yyb1368 bool
	var yyhl1368 bool = l >= 0
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1369 := &x.Port
		yym1370 := z.DecBinary()
		_ = yym1370
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1369) {
		} else if !yym1370 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1369)
		} else {
			z.DecFallback(yyv1369, false)
		}
	}
	for {
		yyj1368++
		if yyhl1368 {
			yyb1368 = yyj1368 > l
		} else {
			yyb1368 = r.CheckBreak()
		}
		if yyb1368 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1368-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1371 := z.EncBinary()
		_ = yym1371
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1372 := !z.EncBinary()
			yy2arr1372 := z.EncBasicHandle().StructToArray
			var yyq1372 [1]bool
			_, _, _ = yysep1372, yyq1372, yy2arr1372
			const yyr1372 bool = false
			yyq1372[0] = len(x.Command) != 0
			var yynn1372 int
			if yyr1372 || yy2arr1372 {
				r.EncodeArrayStart(1)
			} else {
				yynn1372 = 0
				for _, b := range yyq1372 {
					if b {
						yynn1372++
					}
				}
				r.EncodeMapStart(yynn1372)
				yynn1372 = 0
			}
			if yyr1372 || yy2arr1372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1372[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1374 := z.EncBinary()
						_ = yym1374
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1372[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1375 := z.EncBinary()
						_ = yym1375
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1372 || yy2arr1372 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1376 := z.DecBinary()
	_ = yym1376
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1377 := r.ContainerType()
		if yyct1377 == codecSelferValueTypeMap1234 {
			yyl1377 := r.ReadMapStart()
			if yyl1377 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1377, d)
			}
		} else if yyct1377 == codecSelferValueTypeArray1234 {
			yyl1377 := r.ReadArrayStart()
			if yyl1377 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1377, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1378Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1378Slc
	var yyhl1378 bool = l >= 0
	for yyj1378 := 0; ; yyj1378++ {
		if yyhl1378 {
			if yyj1378 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1378Slc = r.DecodeBytes(yys1378Slc, true, true)
		yys1378 := string(yys1378Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1378 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1379 := &x.Command
				yym1380 := z.DecBinary()
				_ = yym1380
				if false {
				} else {
					z.F.DecSliceStringX(yyv1379, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1378)
		} // end switch yys1378
	} // end for yyj1378
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1381 int
	var yyb1381 bool
	var yyhl1381 bool = l >= 0
	yyj1381++
	if yyhl1381 {
		yyb1381 = yyj1381 > l
	} else {
		yyb1381 = r.CheckBreak()
	}
	if yyb1381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1382 := &x.Command
		yym1383 := z.DecBinary()
		_ = yym1383
		if false {
		} else {
			z.F.DecSliceStringX(yyv1382, false, d)
		}
	}
	for {
		yyj1381++
		if yyhl1381 {
			yyb1381 = yyj1381 > l
		} else {
			yyb1381 = r.CheckBreak()
		}
		if yyb1381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1384 := z.EncBinary()
		_ = yym1384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1385 := !z.EncBinary()
			yy2arr1385 := z.EncBasicHandle().StructToArray
			var yyq1385 [8]bool
			_, _, _ = yysep1385, yyq1385, yy2arr1385
			const yyr1385 bool = false
			yyq1385[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1385[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1385[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1385[3] = x.InitialDelaySeconds != 0
			yyq1385[4] = x.TimeoutSeconds != 0
			yyq1385[5] = x.PeriodSeconds != 0
			yyq1385[6] = x.SuccessThreshold != 0
			yyq1385[7] = x.FailureThreshold != 0
			var yynn1385 int
			if yyr1385 || yy2arr1385 {
				r.EncodeArrayStart(8)
			} else {
				yynn1385 = 0
				for _, b := range yyq1385 {
					if b {
						yynn1385++
					}
				}
				r.EncodeMapStart(yynn1385)
				yynn1385 = 0
			}
			var yyn1386 bool
			if x.Handler.Exec == nil {
				yyn1386 = true
				goto LABEL1386
			}
		LABEL1386:
			if yyr1385 || yy2arr1385 {
				if yyn1386 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1385[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1385[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1386 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1387 bool
			if x.Handler.HTTPGet == nil {
				yyn1387 = true
				goto LABEL1387
			}
		LABEL1387:
			if yyr1385 || yy2arr1385 {
				if yyn1387 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1385[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1385[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1387 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1388 bool
			if x.Handler.TCPSocket == nil {
				yyn1388 = true
				goto LABEL1388
			}
		LABEL1388:
			if yyr1385 || yy2arr1385 {
				if yyn1388 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1385[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1385[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1388 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[3] {
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1385[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[4] {
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1385[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[5] {
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1385[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[6] {
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1385[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[7] {
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1385[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1403 := z.EncBinary()
					_ = yym1403
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1404 := z.DecBinary()
	_ = yym1404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1405 := r.ContainerType()
		if yyct1405 == codecSelferValueTypeMap1234 {
			yyl1405 := r.ReadMapStart()
			if yyl1405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1405, d)
			}
		} else if yyct1405 == codecSelferValueTypeArray1234 {
			yyl1405 := r.ReadArrayStart()
			if yyl1405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1406Slc
	var yyhl1406 bool = l >= 0
	for yyj1406 := 0; ; yyj1406++ {
		if yyhl1406 {
			if yyj1406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1406Slc = r.DecodeBytes(yys1406Slc, true, true)
		yys1406 := string(yys1406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1406 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1406)
		} // end switch yys1406
	} // end for yyj1406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1415 int
	var yyb1415 bool
	var yyhl1415 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1415++
		if yyhl1415 {
			yyb1415 = yyj1415 > l
		} else {
			yyb1415 = r.CheckBreak()
		}
		if yyb1415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1424 := z.EncBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1425 := z.DecBinary()
	_ = yym1425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1426 := z.EncBinary()
	_ = yym1426
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1427 := z.DecBinary()
	_ = yym1427
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1428 := z.EncBinary()
		_ = yym1428
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1429 := !z.EncBinary()
			yy2arr1429 := z.EncBasicHandle().StructToArray
			var yyq1429 [2]bool
			_, _, _ = yysep1429, yyq1429, yy2arr1429
			const yyr1429 bool = false
			yyq1429[0] = len(x.Add) != 0
			yyq1429[1] = len(x.Drop) != 0
			var yynn1429 int
			if yyr1429 || yy2arr1429 {
				r.EncodeArrayStart(2)
			} else {
				yynn1429 = 0
				for _, b := range yyq1429 {
					if b {
						yynn1429++
					}
				}
				r.EncodeMapStart(yynn1429)
				yynn1429 = 0
			}
			if yyr1429 || yy2arr1429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1429[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1431 := z.EncBinary()
						_ = yym1431
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1429[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1432 := z.EncBinary()
						_ = yym1432
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1429 || yy2arr1429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1429[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1434 := z.EncBinary()
						_ = yym1434
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1429[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1435 := z.EncBinary()
						_ = yym1435
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1429 || yy2arr1429 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1436 := z.DecBinary()
	_ = yym1436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1437 := r.ContainerType()
		if yyct1437 == codecSelferValueTypeMap1234 {
			yyl1437 := r.ReadMapStart()
			if yyl1437 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1437, d)
			}
		} else if yyct1437 == codecSelferValueTypeArray1234 {
			yyl1437 := r.ReadArrayStart()
			if yyl1437 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1438Slc
	var yyhl1438 bool = l >= 0
	for yyj1438 := 0; ; yyj1438++ {
		if yyhl1438 {
			if yyj1438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1438Slc = r.DecodeBytes(yys1438Slc, true, true)
		yys1438 := string(yys1438Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1438 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1439 := &x.Add
				yym1440 := z.DecBinary()
				_ = yym1440
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1439), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1441 := &x.Drop
				yym1442 := z.DecBinary()
				_ = yym1442
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1441), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1438)
		} // end switch yys1438
	} // end for yyj1438
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1443 int
	var yyb1443 bool
	var yyhl1443 bool = l >= 0
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1444 := &x.Add
		yym1445 := z.DecBinary()
		_ = yym1445
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1444), d)
		}
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1446 := &x.Drop
		yym1447 := z.DecBinary()
		_ = yym1447
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1446), d)
		}
	}
	for {
		yyj1443++
		if yyhl1443 {
			yyb1443 = yyj1443 > l
		} else {
			yyb1443 = r.CheckBreak()
		}
		if yyb1443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1448 := z.EncBinary()
		_ = yym1448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1449 := !z.EncBinary()
			yy2arr1449 := z.EncBasicHandle().StructToArray
			var yyq1449 [2]bool
			_, _, _ = yysep1449, yyq1449, yy2arr1449
			const yyr1449 bool = false
			yyq1449[0] = len(x.Limits) != 0
			yyq1449[1] = len(x.Requests) != 0
			var yynn1449 int
			if yyr1449 || yy2arr1449 {
				r.EncodeArrayStart(2)
			} else {
				yynn1449 = 0
				for _, b := range yyq1449 {
					if b {
						yynn1449++
					}
				}
				r.EncodeMapStart(yynn1449)
				yynn1449 = 0
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1452 := z.DecBinary()
	_ = yym1452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1453 := r.ContainerType()
		if yyct1453 == codecSelferValueTypeMap1234 {
			yyl1453 := r.ReadMapStart()
			if yyl1453 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1453, d)
			}
		} else if yyct1453 == codecSelferValueTypeArray1234 {
			yyl1453 := r.ReadArrayStart()
			if yyl1453 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1453, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1454Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1454Slc
	var yyhl1454 bool = l >= 0
	for yyj1454 := 0; ; yyj1454++ {
		if yyhl1454 {
			if yyj1454 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1454Slc = r.DecodeBytes(yys1454Slc, true, true)
		yys1454 := string(yys1454Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1454 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1455 := &x.Limits
				yyv1455.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1456 := &x.Requests
				yyv1456.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1454)
		} // end switch yys1454
	} // end for yyj1454
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1457 int
	var yyb1457 bool
	var yyhl1457 bool = l >= 0
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1458 := &x.Limits
		yyv1458.CodecDecodeSelf(d)
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1459 := &x.Requests
		yyv1459.CodecDecodeSelf(d)
	}
	for {
		yyj1457++
		if yyhl1457 {
			yyb1457 = yyj1457 > l
		} else {
			yyb1457 = r.CheckBreak()
		}
		if yyb1457 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1457-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1460 := z.EncBinary()
		_ = yym1460
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1461 := !z.EncBinary()
			yy2arr1461 := z.EncBasicHandle().StructToArray
			var yyq1461 [18]bool
			_, _, _ = yysep1461, yyq1461, yy2arr1461
			const yyr1461 bool = false
			yyq1461[1] = x.Image != ""
			yyq1461[2] = len(x.Command) != 0
			yyq1461[3] = len(x.Args) != 0
			yyq1461[4] = x.WorkingDir != ""
			yyq1461[5] = len(x.Ports) != 0
			yyq1461[6] = len(x.Env) != 0
			yyq1461[7] = true
			yyq1461[8] = len(x.VolumeMounts) != 0
			yyq1461[9] = x.LivenessProbe != nil
			yyq1461[10] = x.ReadinessProbe != nil
			yyq1461[11] = x.Lifecycle != nil
			yyq1461[12] = x.TerminationMessagePath != ""
			yyq1461[13] = x.ImagePullPolicy != ""
			yyq1461[14] = x.SecurityContext != nil
			yyq1461[15] = x.Stdin != false
			yyq1461[16] = x.StdinOnce != false
			yyq1461[17] = x.TTY != false
			var yynn1461 int
			if yyr1461 || yy2arr1461 {
				r.EncodeArrayStart(18)
			} else {
				yynn1461 = 1
				for _, b := range yyq1461 {
					if b {
						yynn1461++
					}
				}
				r.EncodeMapStart(yynn1461)
				yynn1461 = 0
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1463 := z.EncBinary()
				_ = yym1463
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1464 := z.EncBinary()
				_ = yym1464
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[1] {
					yym1466 := z.EncBinary()
					_ = yym1466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1461[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1467 := z.EncBinary()
					_ = yym1467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1469 := z.EncBinary()
						_ = yym1469
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1472 := z.EncBinary()
						_ = yym1472
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1473 := z.EncBinary()
						_ = yym1473
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[4] {
					yym1475 := z.EncBinary()
					_ = yym1475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1461[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1476 := z.EncBinary()
					_ = yym1476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1478 := z.EncBinary()
						_ = yym1478
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1479 := z.EncBinary()
						_ = yym1479
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1481 := z.EncBinary()
						_ = yym1481
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1482 := z.EncBinary()
						_ = yym1482
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[7] {
					yy1484 := &x.Resources
					yy1484.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1485 := &x.Resources
					yy1485.CodecEncodeSelf(e)
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1487 := z.EncBinary()
						_ = yym1487
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1488 := z.EncBinary()
						_ = yym1488
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[12] {
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1461[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1461[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[15] {
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1461[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[16] {
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1461[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[17] {
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1461[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1506 := z.DecBinary()
	_ = yym1506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1507 := r.ContainerType()
		if yyct1507 == codecSelferValueTypeMap1234 {
			yyl1507 := r.ReadMapStart()
			if yyl1507 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1507, d)
			}
		} else if yyct1507 == codecSelferValueTypeArray1234 {
			yyl1507 := r.ReadArrayStart()
			if yyl1507 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1507, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1508Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1508Slc
	var yyhl1508 bool = l >= 0
	for yyj1508 := 0; ; yyj1508++ {
		if yyhl1508 {
			if yyj1508 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1508Slc = r.DecodeBytes(yys1508Slc, true, true)
		yys1508 := string(yys1508Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1508 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1511 := &x.Command
				yym1512 := z.DecBinary()
				_ = yym1512
				if false {
				} else {
					z.F.DecSliceStringX(yyv1511, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1513 := &x.Args
				yym1514 := z.DecBinary()
				_ = yym1514
				if false {
				} else {
					z.F.DecSliceStringX(yyv1513, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1516 := &x.Ports
				yym1517 := z.DecBinary()
				_ = yym1517
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1516), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1518 := &x.Env
				yym1519 := z.DecBinary()
				_ = yym1519
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1518), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1520 := &x.Resources
				yyv1520.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1521 := &x.VolumeMounts
				yym1522 := z.DecBinary()
				_ = yym1522
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1521), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1508)
		} // end switch yys1508
	} // end for yyj1508
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1532 int
	var yyb1532 bool
	var yyhl1532 bool = l >= 0
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1535 := &x.Command
		yym1536 := z.DecBinary()
		_ = yym1536
		if false {
		} else {
			z.F.DecSliceStringX(yyv1535, false, d)
		}
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1537 := &x.Args
		yym1538 := z.DecBinary()
		_ = yym1538
		if false {
		} else {
			z.F.DecSliceStringX(yyv1537, false, d)
		}
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1540 := &x.Ports
		yym1541 := z.DecBinary()
		_ = yym1541
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1540), d)
		}
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1542 := &x.Env
		yym1543 := z.DecBinary()
		_ = yym1543
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1542), d)
		}
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1544 := &x.Resources
		yyv1544.CodecDecodeSelf(d)
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1545 := &x.VolumeMounts
		yym1546 := z.DecBinary()
		_ = yym1546
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1545), d)
		}
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1532++
		if yyhl1532 {
			yyb1532 = yyj1532 > l
		} else {
			yyb1532 = r.CheckBreak()
		}
		if yyb1532 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1532-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1556 := z.EncBinary()
		_ = yym1556
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1557 := !z.EncBinary()
			yy2arr1557 := z.EncBasicHandle().StructToArray
			var yyq1557 [3]bool
			_, _, _ = yysep1557, yyq1557, yy2arr1557
			const yyr1557 bool = false
			yyq1557[0] = x.Exec != nil
			yyq1557[1] = x.HTTPGet != nil
			yyq1557[2] = x.TCPSocket != nil
			var yynn1557 int
			if yyr1557 || yy2arr1557 {
				r.EncodeArrayStart(3)
			} else {
				yynn1557 = 0
				for _, b := range yyq1557 {
					if b {
						yynn1557++
					}
				}
				r.EncodeMapStart(yynn1557)
				yynn1557 = 0
			}
			if yyr1557 || yy2arr1557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1557[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1557[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1557 || yy2arr1557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1557[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1557[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1557 || yy2arr1557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1557[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1557[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1557 || yy2arr1557 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1561 := z.DecBinary()
	_ = yym1561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1562 := r.ContainerType()
		if yyct1562 == codecSelferValueTypeMap1234 {
			yyl1562 := r.ReadMapStart()
			if yyl1562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1562, d)
			}
		} else if yyct1562 == codecSelferValueTypeArray1234 {
			yyl1562 := r.ReadArrayStart()
			if yyl1562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1563Slc
	var yyhl1563 bool = l >= 0
	for yyj1563 := 0; ; yyj1563++ {
		if yyhl1563 {
			if yyj1563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1563Slc = r.DecodeBytes(yys1563Slc, true, true)
		yys1563 := string(yys1563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1563 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1563)
		} // end switch yys1563
	} // end for yyj1563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1567 int
	var yyb1567 bool
	var yyhl1567 bool = l >= 0
	yyj1567++
	if yyhl1567 {
		yyb1567 = yyj1567 > l
	} else {
		yyb1567 = r.CheckBreak()
	}
	if yyb1567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1567++
	if yyhl1567 {
		yyb1567 = yyj1567 > l
	} else {
		yyb1567 = r.CheckBreak()
	}
	if yyb1567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1567++
	if yyhl1567 {
		yyb1567 = yyj1567 > l
	} else {
		yyb1567 = r.CheckBreak()
	}
	if yyb1567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1567++
		if yyhl1567 {
			yyb1567 = yyj1567 > l
		} else {
			yyb1567 = r.CheckBreak()
		}
		if yyb1567 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1567-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1571 := z.EncBinary()
		_ = yym1571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1572 := !z.EncBinary()
			yy2arr1572 := z.EncBasicHandle().StructToArray
			var yyq1572 [2]bool
			_, _, _ = yysep1572, yyq1572, yy2arr1572
			const yyr1572 bool = false
			yyq1572[0] = x.PostStart != nil
			yyq1572[1] = x.PreStop != nil
			var yynn1572 int
			if yyr1572 || yy2arr1572 {
				r.EncodeArrayStart(2)
			} else {
				yynn1572 = 0
				for _, b := range yyq1572 {
					if b {
						yynn1572++
					}
				}
				r.EncodeMapStart(yynn1572)
				yynn1572 = 0
			}
			if yyr1572 || yy2arr1572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1572[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1572[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1572 || yy2arr1572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1572[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1572[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1572 || yy2arr1572 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1575 := z.DecBinary()
	_ = yym1575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1576 := r.ContainerType()
		if yyct1576 == codecSelferValueTypeMap1234 {
			yyl1576 := r.ReadMapStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1576, d)
			}
		} else if yyct1576 == codecSelferValueTypeArray1234 {
			yyl1576 := r.ReadArrayStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1577Slc
	var yyhl1577 bool = l >= 0
	for yyj1577 := 0; ; yyj1577++ {
		if yyhl1577 {
			if yyj1577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1577Slc = r.DecodeBytes(yys1577Slc, true, true)
		yys1577 := string(yys1577Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1577 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1577)
		} // end switch yys1577
	} // end for yyj1577
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1580 int
	var yyb1580 bool
	var yyhl1580 bool = l >= 0
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1580++
	if yyhl1580 {
		yyb1580 = yyj1580 > l
	} else {
		yyb1580 = r.CheckBreak()
	}
	if yyb1580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1580++
		if yyhl1580 {
			yyb1580 = yyj1580 > l
		} else {
			yyb1580 = r.CheckBreak()
		}
		if yyb1580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1583 := z.EncBinary()
	_ = yym1583
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1584 := z.DecBinary()
	_ = yym1584
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1585 := z.EncBinary()
		_ = yym1585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1586 := !z.EncBinary()
			yy2arr1586 := z.EncBasicHandle().StructToArray
			var yyq1586 [2]bool
			_, _, _ = yysep1586, yyq1586, yy2arr1586
			const yyr1586 bool = false
			yyq1586[0] = x.Reason != ""
			yyq1586[1] = x.Message != ""
			var yynn1586 int
			if yyr1586 || yy2arr1586 {
				r.EncodeArrayStart(2)
			} else {
				yynn1586 = 0
				for _, b := range yyq1586 {
					if b {
						yynn1586++
					}
				}
				r.EncodeMapStart(yynn1586)
				yynn1586 = 0
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1586[0] {
					yym1588 := z.EncBinary()
					_ = yym1588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1589 := z.EncBinary()
					_ = yym1589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1586[1] {
					yym1591 := z.EncBinary()
					_ = yym1591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1586[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1592 := z.EncBinary()
					_ = yym1592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1593 := z.DecBinary()
	_ = yym1593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1594 := r.ContainerType()
		if yyct1594 == codecSelferValueTypeMap1234 {
			yyl1594 := r.ReadMapStart()
			if yyl1594 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1594, d)
			}
		} else if yyct1594 == codecSelferValueTypeArray1234 {
			yyl1594 := r.ReadArrayStart()
			if yyl1594 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1595Slc
	var yyhl1595 bool = l >= 0
	for yyj1595 := 0; ; yyj1595++ {
		if yyhl1595 {
			if yyj1595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1595Slc = r.DecodeBytes(yys1595Slc, true, true)
		yys1595 := string(yys1595Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1595 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1595)
		} // end switch yys1595
	} // end for yyj1595
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1598 int
	var yyb1598 bool
	var yyhl1598 bool = l >= 0
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1598++
		if yyhl1598 {
			yyb1598 = yyj1598 > l
		} else {
			yyb1598 = r.CheckBreak()
		}
		if yyb1598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1601 := z.EncBinary()
		_ = yym1601
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1602 := !z.EncBinary()
			yy2arr1602 := z.EncBasicHandle().StructToArray
			var yyq1602 [1]bool
			_, _, _ = yysep1602, yyq1602, yy2arr1602
			const yyr1602 bool = false
			yyq1602[0] = true
			var yynn1602 int
			if yyr1602 || yy2arr1602 {
				r.EncodeArrayStart(1)
			} else {
				yynn1602 = 0
				for _, b := range yyq1602 {
					if b {
						yynn1602++
					}
				}
				r.EncodeMapStart(yynn1602)
				yynn1602 = 0
			}
			if yyr1602 || yy2arr1602 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1602[0] {
					yy1604 := &x.StartedAt
					yym1605 := z.EncBinary()
					_ = yym1605
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1604) {
					} else if yym1605 {
						z.EncBinaryMarshal(yy1604)
					} else if !yym1605 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1604)
					} else {
						z.EncFallback(yy1604)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1602[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1606 := &x.StartedAt
					yym1607 := z.EncBinary()
					_ = yym1607
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1606) {
					} else if yym1607 {
						z.EncBinaryMarshal(yy1606)
					} else if !yym1607 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1606)
					} else {
						z.EncFallback(yy1606)
					}
				}
			}
			if yyr1602 || yy2arr1602 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1608 := z.DecBinary()
	_ = yym1608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1609 := r.ContainerType()
		if yyct1609 == codecSelferValueTypeMap1234 {
			yyl1609 := r.ReadMapStart()
			if yyl1609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1609, d)
			}
		} else if yyct1609 == codecSelferValueTypeArray1234 {
			yyl1609 := r.ReadArrayStart()
			if yyl1609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1610Slc
	var yyhl1610 bool = l >= 0
	for yyj1610 := 0; ; yyj1610++ {
		if yyhl1610 {
			if yyj1610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1610Slc = r.DecodeBytes(yys1610Slc, true, true)
		yys1610 := string(yys1610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1610 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1611 := &x.StartedAt
				yym1612 := z.DecBinary()
				_ = yym1612
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1611) {
				} else if yym1612 {
					z.DecBinaryUnmarshal(yyv1611)
				} else if !yym1612 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1611)
				} else {
					z.DecFallback(yyv1611, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1610)
		} // end switch yys1610
	} // end for yyj1610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1613 int
	var yyb1613 bool
	var yyhl1613 bool = l >= 0
	yyj1613++
	if yyhl1613 {
		yyb1613 = yyj1613 > l
	} else {
		yyb1613 = r.CheckBreak()
	}
	if yyb1613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1614 := &x.StartedAt
		yym1615 := z.DecBinary()
		_ = yym1615
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1614) {
		} else if yym1615 {
			z.DecBinaryUnmarshal(yyv1614)
		} else if !yym1615 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1614)
		} else {
			z.DecFallback(yyv1614, false)
		}
	}
	for {
		yyj1613++
		if yyhl1613 {
			yyb1613 = yyj1613 > l
		} else {
			yyb1613 = r.CheckBreak()
		}
		if yyb1613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1616 := z.EncBinary()
		_ = yym1616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1617 := !z.EncBinary()
			yy2arr1617 := z.EncBasicHandle().StructToArray
			var yyq1617 [7]bool
			_, _, _ = yysep1617, yyq1617, yy2arr1617
			const yyr1617 bool = false
			yyq1617[1] = x.Signal != 0
			yyq1617[2] = x.Reason != ""
			yyq1617[3] = x.Message != ""
			yyq1617[4] = true
			yyq1617[5] = true
			yyq1617[6] = x.ContainerID != ""
			var yynn1617 int
			if yyr1617 || yy2arr1617 {
				r.EncodeArrayStart(7)
			} else {
				yynn1617 = 1
				for _, b := range yyq1617 {
					if b {
						yynn1617++
					}
				}
				r.EncodeMapStart(yynn1617)
				yynn1617 = 0
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1619 := z.EncBinary()
				_ = yym1619
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1620 := z.EncBinary()
				_ = yym1620
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[1] {
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1617[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[2] {
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1617[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[3] {
					yym1628 := z.EncBinary()
					_ = yym1628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1617[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1629 := z.EncBinary()
					_ = yym1629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[4] {
					yy1631 := &x.StartedAt
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1631) {
					} else if yym1632 {
						z.EncBinaryMarshal(yy1631)
					} else if !yym1632 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1631)
					} else {
						z.EncFallback(yy1631)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1617[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1633 := &x.StartedAt
					yym1634 := z.EncBinary()
					_ = yym1634
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1633) {
					} else if yym1634 {
						z.EncBinaryMarshal(yy1633)
					} else if !yym1634 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1633)
					} else {
						z.EncFallback(yy1633)
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[5] {
					yy1636 := &x.FinishedAt
					yym1637 := z.EncBinary()
					_ = yym1637
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1636) {
					} else if yym1637 {
						z.EncBinaryMarshal(yy1636)
					} else if !yym1637 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1636)
					} else {
						z.EncFallback(yy1636)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1617[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1638 := &x.FinishedAt
					yym1639 := z.EncBinary()
					_ = yym1639
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1638) {
					} else if yym1639 {
						z.EncBinaryMarshal(yy1638)
					} else if !yym1639 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1638)
					} else {
						z.EncFallback(yy1638)
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[6] {
					yym1641 := z.EncBinary()
					_ = yym1641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1617[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1642 := z.EncBinary()
					_ = yym1642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1643 := z.DecBinary()
	_ = yym1643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1644 := r.ContainerType()
		if yyct1644 == codecSelferValueTypeMap1234 {
			yyl1644 := r.ReadMapStart()
			if yyl1644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1644, d)
			}
		} else if yyct1644 == codecSelferValueTypeArray1234 {
			yyl1644 := r.ReadArrayStart()
			if yyl1644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1645Slc
	var yyhl1645 bool = l >= 0
	for yyj1645 := 0; ; yyj1645++ {
		if yyhl1645 {
			if yyj1645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1645Slc = r.DecodeBytes(yys1645Slc, true, true)
		yys1645 := string(yys1645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1645 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1650 := &x.StartedAt
				yym1651 := z.DecBinary()
				_ = yym1651
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1650) {
				} else if yym1651 {
					z.DecBinaryUnmarshal(yyv1650)
				} else if !yym1651 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1650)
				} else {
					z.DecFallback(yyv1650, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1652 := &x.FinishedAt
				yym1653 := z.DecBinary()
				_ = yym1653
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1652) {
				} else if yym1653 {
					z.DecBinaryUnmarshal(yyv1652)
				} else if !yym1653 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1652)
				} else {
					z.DecFallback(yyv1652, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1645)
		} // end switch yys1645
	} // end for yyj1645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1655 int
	var yyb1655 bool
	var yyhl1655 bool = l >= 0
	yyj1655++
	if yyhl1655 {
		yyb1655 = yyj1655 > l
	} else {
		yyb1655 = r.CheckBreak()
	}
	if yyb1655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1655++
	if yyhl1655 {
		yyb1655 = yyj1655 > l
	} else {
		yyb1655 = r.CheckBreak()
	}
	if yyb1655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1655++
	if yyhl1655 {
		yyb1655 = yyj1655 > l
	} else {
		yyb1655 = r.CheckBreak()
	}
	if yyb1655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1655++
	if yyhl1655 {
		yyb1655 = yyj1655 > l
	} else {
		yyb1655 = r.CheckBreak()
	}
	if yyb1655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1655++
	if yyhl1655 {
		yyb1655 = yyj1655 > l
	} else {
		yyb1655 = r.CheckBreak()
	}
	if yyb1655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1660 := &x.StartedAt
		yym1661 := z.DecBinary()
		_ = yym1661
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1660) {
		} else if yym1661 {
			z.DecBinaryUnmarshal(yyv1660)
		} else if !yym1661 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1660)
		} else {
			z.DecFallback(yyv1660, false)
		}
	}
	yyj1655++
	if yyhl1655 {
		yyb1655 = yyj1655 > l
	} else {
		yyb1655 = r.CheckBreak()
	}
	if yyb1655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1662 := &x.FinishedAt
		yym1663 := z.DecBinary()
		_ = yym1663
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1662) {
		} else if yym1663 {
			z.DecBinaryUnmarshal(yyv1662)
		} else if !yym1663 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1662)
		} else {
			z.DecFallback(yyv1662, false)
		}
	}
	yyj1655++
	if yyhl1655 {
		yyb1655 = yyj1655 > l
	} else {
		yyb1655 = r.CheckBreak()
	}
	if yyb1655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1655++
		if yyhl1655 {
			yyb1655 = yyj1655 > l
		} else {
			yyb1655 = r.CheckBreak()
		}
		if yyb1655 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1655-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1665 := z.EncBinary()
		_ = yym1665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1666 := !z.EncBinary()
			yy2arr1666 := z.EncBasicHandle().StructToArray
			var yyq1666 [3]bool
			_, _, _ = yysep1666, yyq1666, yy2arr1666
			const yyr1666 bool = false
			yyq1666[0] = x.Waiting != nil
			yyq1666[1] = x.Running != nil
			yyq1666[2] = x.Terminated != nil
			var yynn1666 int
			if yyr1666 || yy2arr1666 {
				r.EncodeArrayStart(3)
			} else {
				yynn1666 = 0
				for _, b := range yyq1666 {
					if b {
						yynn1666++
					}
				}
				r.EncodeMapStart(yynn1666)
				yynn1666 = 0
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1666[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1666[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1666[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1670 := z.DecBinary()
	_ = yym1670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1671 := r.ContainerType()
		if yyct1671 == codecSelferValueTypeMap1234 {
			yyl1671 := r.ReadMapStart()
			if yyl1671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1671, d)
			}
		} else if yyct1671 == codecSelferValueTypeArray1234 {
			yyl1671 := r.ReadArrayStart()
			if yyl1671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1672Slc
	var yyhl1672 bool = l >= 0
	for yyj1672 := 0; ; yyj1672++ {
		if yyhl1672 {
			if yyj1672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1672Slc = r.DecodeBytes(yys1672Slc, true, true)
		yys1672 := string(yys1672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1672 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1672)
		} // end switch yys1672
	} // end for yyj1672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1676 int
	var yyb1676 bool
	var yyhl1676 bool = l >= 0
	yyj1676++
	if yyhl1676 {
		yyb1676 = yyj1676 > l
	} else {
		yyb1676 = r.CheckBreak()
	}
	if yyb1676 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1676++
	if yyhl1676 {
		yyb1676 = yyj1676 > l
	} else {
		yyb1676 = r.CheckBreak()
	}
	if yyb1676 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1676++
	if yyhl1676 {
		yyb1676 = yyj1676 > l
	} else {
		yyb1676 = r.CheckBreak()
	}
	if yyb1676 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1676++
		if yyhl1676 {
			yyb1676 = yyj1676 > l
		} else {
			yyb1676 = r.CheckBreak()
		}
		if yyb1676 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1676-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1680 := z.EncBinary()
		_ = yym1680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1681 := !z.EncBinary()
			yy2arr1681 := z.EncBasicHandle().StructToArray
			var yyq1681 [8]bool
			_, _, _ = yysep1681, yyq1681, yy2arr1681
			const yyr1681 bool = false
			yyq1681[1] = true
			yyq1681[2] = true
			yyq1681[7] = x.ContainerID != ""
			var yynn1681 int
			if yyr1681 || yy2arr1681 {
				r.EncodeArrayStart(8)
			} else {
				yynn1681 = 5
				for _, b := range yyq1681 {
					if b {
						yynn1681++
					}
				}
				r.EncodeMapStart(yynn1681)
				yynn1681 = 0
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1683 := z.EncBinary()
				_ = yym1683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1684 := z.EncBinary()
				_ = yym1684
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[1] {
					yy1686 := &x.State
					yy1686.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1681[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1687 := &x.State
					yy1687.CodecEncodeSelf(e)
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[2] {
					yy1689 := &x.LastTerminationState
					yy1689.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1681[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1690 := &x.LastTerminationState
					yy1690.CodecEncodeSelf(e)
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1692 := z.EncBinary()
				_ = yym1692
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1693 := z.EncBinary()
				_ = yym1693
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1695 := z.EncBinary()
				_ = yym1695
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1696 := z.EncBinary()
				_ = yym1696
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1698 := z.EncBinary()
				_ = yym1698
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1699 := z.EncBinary()
				_ = yym1699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1701 := z.EncBinary()
				_ = yym1701
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1702 := z.EncBinary()
				_ = yym1702
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[7] {
					yym1704 := z.EncBinary()
					_ = yym1704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1681[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1705 := z.EncBinary()
					_ = yym1705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1706 := z.DecBinary()
	_ = yym1706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1707 := r.ContainerType()
		if yyct1707 == codecSelferValueTypeMap1234 {
			yyl1707 := r.ReadMapStart()
			if yyl1707 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1707, d)
			}
		} else if yyct1707 == codecSelferValueTypeArray1234 {
			yyl1707 := r.ReadArrayStart()
			if yyl1707 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1708Slc
	var yyhl1708 bool = l >= 0
	for yyj1708 := 0; ; yyj1708++ {
		if yyhl1708 {
			if yyj1708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1708Slc = r.DecodeBytes(yys1708Slc, true, true)
		yys1708 := string(yys1708Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1708 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1710 := &x.State
				yyv1710.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1711 := &x.LastTerminationState
				yyv1711.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1708)
		} // end switch yys1708
	} // end for yyj1708
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1717 int
	var yyb1717 bool
	var yyhl1717 bool = l >= 0
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1719 := &x.State
		yyv1719.CodecDecodeSelf(d)
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1720 := &x.LastTerminationState
		yyv1720.CodecDecodeSelf(d)
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1717++
		if yyhl1717 {
			yyb1717 = yyj1717 > l
		} else {
			yyb1717 = r.CheckBreak()
		}
		if yyb1717 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1717-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1726 := z.EncBinary()
	_ = yym1726
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1727 := z.DecBinary()
	_ = yym1727
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1728 := z.EncBinary()
	_ = yym1728
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1729 := z.DecBinary()
	_ = yym1729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1730 := z.EncBinary()
		_ = yym1730
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1731 := !z.EncBinary()
			yy2arr1731 := z.EncBasicHandle().StructToArray
			var yyq1731 [6]bool
			_, _, _ = yysep1731, yyq1731, yy2arr1731
			const yyr1731 bool = false
			yyq1731[2] = true
			yyq1731[3] = true
			yyq1731[4] = x.Reason != ""
			yyq1731[5] = x.Message != ""
			var yynn1731 int
			if yyr1731 || yy2arr1731 {
				r.EncodeArrayStart(6)
			} else {
				yynn1731 = 2
				for _, b := range yyq1731 {
					if b {
						yynn1731++
					}
				}
				r.EncodeMapStart(yynn1731)
				yynn1731 = 0
			}
			if yyr1731 || yy2arr1731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1731 || yy2arr1731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1731 || yy2arr1731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1731[2] {
					yy1735 := &x.LastProbeTime
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1735) {
					} else if yym1736 {
						z.EncBinaryMarshal(yy1735)
					} else if !yym1736 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1735)
					} else {
						z.EncFallback(yy1735)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1731[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1737 := &x.LastProbeTime
					yym1738 := z.EncBinary()
					_ = yym1738
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1737) {
					} else if yym1738 {
						z.EncBinaryMarshal(yy1737)
					} else if !yym1738 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1737)
					} else {
						z.EncFallback(yy1737)
					}
				}
			}
			if yyr1731 || yy2arr1731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1731[3] {
					yy1740 := &x.LastTransitionTime
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1740) {
					} else if yym1741 {
						z.EncBinaryMarshal(yy1740)
					} else if !yym1741 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1740)
					} else {
						z.EncFallback(yy1740)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1731[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1742 := &x.LastTransitionTime
					yym1743 := z.EncBinary()
					_ = yym1743
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1742) {
					} else if yym1743 {
						z.EncBinaryMarshal(yy1742)
					} else if !yym1743 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1742)
					} else {
						z.EncFallback(yy1742)
					}
				}
			}
			if yyr1731 || yy2arr1731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1731[4] {
					yym1745 := z.EncBinary()
					_ = yym1745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1731[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1731 || yy2arr1731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1731[5] {
					yym1748 := z.EncBinary()
					_ = yym1748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1731[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1749 := z.EncBinary()
					_ = yym1749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1731 || yy2arr1731 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1750 := z.DecBinary()
	_ = yym1750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1751 := r.ContainerType()
		if yyct1751 == codecSelferValueTypeMap1234 {
			yyl1751 := r.ReadMapStart()
			if yyl1751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1751, d)
			}
		} else if yyct1751 == codecSelferValueTypeArray1234 {
			yyl1751 := r.ReadArrayStart()
			if yyl1751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1752Slc
	var yyhl1752 bool = l >= 0
	for yyj1752 := 0; ; yyj1752++ {
		if yyhl1752 {
			if yyj1752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1752Slc = r.DecodeBytes(yys1752Slc, true, true)
		yys1752 := string(yys1752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1752 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1755 := &x.LastProbeTime
				yym1756 := z.DecBinary()
				_ = yym1756
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1755) {
				} else if yym1756 {
					z.DecBinaryUnmarshal(yyv1755)
				} else if !yym1756 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1755)
				} else {
					z.DecFallback(yyv1755, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1757 := &x.LastTransitionTime
				yym1758 := z.DecBinary()
				_ = yym1758
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1757) {
				} else if yym1758 {
					z.DecBinaryUnmarshal(yyv1757)
				} else if !yym1758 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1757)
				} else {
					z.DecFallback(yyv1757, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1752)
		} // end switch yys1752
	} // end for yyj1752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1761 int
	var yyb1761 bool
	var yyhl1761 bool = l >= 0
	yyj1761++
	if yyhl1761 {
		yyb1761 = yyj1761 > l
	} else {
		yyb1761 = r.CheckBreak()
	}
	if yyb1761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1761++
	if yyhl1761 {
		yyb1761 = yyj1761 > l
	} else {
		yyb1761 = r.CheckBreak()
	}
	if yyb1761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1761++
	if yyhl1761 {
		yyb1761 = yyj1761 > l
	} else {
		yyb1761 = r.CheckBreak()
	}
	if yyb1761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1764 := &x.LastProbeTime
		yym1765 := z.DecBinary()
		_ = yym1765
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1764) {
		} else if yym1765 {
			z.DecBinaryUnmarshal(yyv1764)
		} else if !yym1765 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1764)
		} else {
			z.DecFallback(yyv1764, false)
		}
	}
	yyj1761++
	if yyhl1761 {
		yyb1761 = yyj1761 > l
	} else {
		yyb1761 = r.CheckBreak()
	}
	if yyb1761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1766 := &x.LastTransitionTime
		yym1767 := z.DecBinary()
		_ = yym1767
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1766) {
		} else if yym1767 {
			z.DecBinaryUnmarshal(yyv1766)
		} else if !yym1767 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1766)
		} else {
			z.DecFallback(yyv1766, false)
		}
	}
	yyj1761++
	if yyhl1761 {
		yyb1761 = yyj1761 > l
	} else {
		yyb1761 = r.CheckBreak()
	}
	if yyb1761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1761++
	if yyhl1761 {
		yyb1761 = yyj1761 > l
	} else {
		yyb1761 = r.CheckBreak()
	}
	if yyb1761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1761++
		if yyhl1761 {
			yyb1761 = yyj1761 > l
		} else {
			yyb1761 = r.CheckBreak()
		}
		if yyb1761 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1761-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1770 := z.EncBinary()
	_ = yym1770
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1771 := z.DecBinary()
	_ = yym1771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1772 := z.EncBinary()
	_ = yym1772
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1773 := z.DecBinary()
	_ = yym1773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1774 := z.EncBinary()
		_ = yym1774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1775 := !z.EncBinary()
			yy2arr1775 := z.EncBasicHandle().StructToArray
			var yyq1775 [1]bool
			_, _, _ = yysep1775, yyq1775, yy2arr1775
			const yyr1775 bool = false
			var yynn1775 int
			if yyr1775 || yy2arr1775 {
				r.EncodeArrayStart(1)
			} else {
				yynn1775 = 1
				for _, b := range yyq1775 {
					if b {
						yynn1775++
					}
				}
				r.EncodeMapStart(yynn1775)
				yynn1775 = 0
			}
			if yyr1775 || yy2arr1775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1777 := z.EncBinary()
					_ = yym1777
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1778 := z.EncBinary()
					_ = yym1778
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1775 || yy2arr1775 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1779 := z.DecBinary()
	_ = yym1779
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1780 := r.ContainerType()
		if yyct1780 == codecSelferValueTypeMap1234 {
			yyl1780 := r.ReadMapStart()
			if yyl1780 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1780, d)
			}
		} else if yyct1780 == codecSelferValueTypeArray1234 {
			yyl1780 := r.ReadArrayStart()
			if yyl1780 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1780, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1781Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1781Slc
	var yyhl1781 bool = l >= 0
	for yyj1781 := 0; ; yyj1781++ {
		if yyhl1781 {
			if yyj1781 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1781Slc = r.DecodeBytes(yys1781Slc, true, true)
		yys1781 := string(yys1781Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1781 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1782 := &x.NodeSelectorTerms
				yym1783 := z.DecBinary()
				_ = yym1783
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1782), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1781)
		} // end switch yys1781
	} // end for yyj1781
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1784 int
	var yyb1784 bool
	var yyhl1784 bool = l >= 0
	yyj1784++
	if yyhl1784 {
		yyb1784 = yyj1784 > l
	} else {
		yyb1784 = r.CheckBreak()
	}
	if yyb1784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1785 := &x.NodeSelectorTerms
		yym1786 := z.DecBinary()
		_ = yym1786
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1785), d)
		}
	}
	for {
		yyj1784++
		if yyhl1784 {
			yyb1784 = yyj1784 > l
		} else {
			yyb1784 = r.CheckBreak()
		}
		if yyb1784 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1784-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1787 := z.EncBinary()
		_ = yym1787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1788 := !z.EncBinary()
			yy2arr1788 := z.EncBasicHandle().StructToArray
			var yyq1788 [1]bool
			_, _, _ = yysep1788, yyq1788, yy2arr1788
			const yyr1788 bool = false
			var yynn1788 int
			if yyr1788 || yy2arr1788 {
				r.EncodeArrayStart(1)
			} else {
				yynn1788 = 1
				for _, b := range yyq1788 {
					if b {
						yynn1788++
					}
				}
				r.EncodeMapStart(yynn1788)
				yynn1788 = 0
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1790 := z.EncBinary()
					_ = yym1790
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1791 := z.EncBinary()
					_ = yym1791
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1792 := z.DecBinary()
	_ = yym1792
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1793 := r.ContainerType()
		if yyct1793 == codecSelferValueTypeMap1234 {
			yyl1793 := r.ReadMapStart()
			if yyl1793 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1793, d)
			}
		} else if yyct1793 == codecSelferValueTypeArray1234 {
			yyl1793 := r.ReadArrayStart()
			if yyl1793 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1793, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1794Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1794Slc
	var yyhl1794 bool = l >= 0
	for yyj1794 := 0; ; yyj1794++ {
		if yyhl1794 {
			if yyj1794 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1794Slc = r.DecodeBytes(yys1794Slc, true, true)
		yys1794 := string(yys1794Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1794 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1795 := &x.MatchExpressions
				yym1796 := z.DecBinary()
				_ = yym1796
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1795), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1794)
		} // end switch yys1794
	} // end for yyj1794
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1797 int
	var yyb1797 bool
	var yyhl1797 bool = l >= 0
	yyj1797++
	if yyhl1797 {
		yyb1797 = yyj1797 > l
	} else {
		yyb1797 = r.CheckBreak()
	}
	if yyb1797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1798 := &x.MatchExpressions
		yym1799 := z.DecBinary()
		_ = yym1799
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1798), d)
		}
	}
	for {
		yyj1797++
		if yyhl1797 {
			yyb1797 = yyj1797 > l
		} else {
			yyb1797 = r.CheckBreak()
		}
		if yyb1797 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1797-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1800 := z.EncBinary()
		_ = yym1800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1801 := !z.EncBinary()
			yy2arr1801 := z.EncBasicHandle().StructToArray
			var yyq1801 [3]bool
			_, _, _ = yysep1801, yyq1801, yy2arr1801
			const yyr1801 bool = false
			yyq1801[2] = len(x.Values) != 0
			var yynn1801 int
			if yyr1801 || yy2arr1801 {
				r.EncodeArrayStart(3)
			} else {
				yynn1801 = 2
				for _, b := range yyq1801 {
					if b {
						yynn1801++
					}
				}
				r.EncodeMapStart(yynn1801)
				yynn1801 = 0
			}
			if yyr1801 || yy2arr1801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1803 := z.EncBinary()
				_ = yym1803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1804 := z.EncBinary()
				_ = yym1804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1801 || yy2arr1801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1801 || yy2arr1801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1801[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1807 := z.EncBinary()
						_ = yym1807
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1801[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1808 := z.EncBinary()
						_ = yym1808
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1801 || yy2arr1801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1809 := z.DecBinary()
	_ = yym1809
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1810 := r.ContainerType()
		if yyct1810 == codecSelferValueTypeMap1234 {
			yyl1810 := r.ReadMapStart()
			if yyl1810 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1810, d)
			}
		} else if yyct1810 == codecSelferValueTypeArray1234 {
			yyl1810 := r.ReadArrayStart()
			if yyl1810 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1810, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1811Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1811Slc
	var yyhl1811 bool = l >= 0
	for yyj1811 := 0; ; yyj1811++ {
		if yyhl1811 {
			if yyj1811 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1811Slc = r.DecodeBytes(yys1811Slc, true, true)
		yys1811 := string(yys1811Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1811 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1814 := &x.Values
				yym1815 := z.DecBinary()
				_ = yym1815
				if false {
				} else {
					z.F.DecSliceStringX(yyv1814, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1811)
		} // end switch yys1811
	} // end for yyj1811
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1816 int
	var yyb1816 bool
	var yyhl1816 bool = l >= 0
	yyj1816++
	if yyhl1816 {
		yyb1816 = yyj1816 > l
	} else {
		yyb1816 = r.CheckBreak()
	}
	if yyb1816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1816++
	if yyhl1816 {
		yyb1816 = yyj1816 > l
	} else {
		yyb1816 = r.CheckBreak()
	}
	if yyb1816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1816++
	if yyhl1816 {
		yyb1816 = yyj1816 > l
	} else {
		yyb1816 = r.CheckBreak()
	}
	if yyb1816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1819 := &x.Values
		yym1820 := z.DecBinary()
		_ = yym1820
		if false {
		} else {
			z.F.DecSliceStringX(yyv1819, false, d)
		}
	}
	for {
		yyj1816++
		if yyhl1816 {
			yyb1816 = yyj1816 > l
		} else {
			yyb1816 = r.CheckBreak()
		}
		if yyb1816 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1816-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1821 := z.EncBinary()
	_ = yym1821
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1822 := z.DecBinary()
	_ = yym1822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1823 := z.EncBinary()
		_ = yym1823
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1824 := !z.EncBinary()
			yy2arr1824 := z.EncBasicHandle().StructToArray
			var yyq1824 [3]bool
			_, _, _ = yysep1824, yyq1824, yy2arr1824
			const yyr1824 bool = false
			yyq1824[0] = x.NodeAffinity != nil
			yyq1824[1] = x.PodAffinity != nil
			yyq1824[2] = x.PodAntiAffinity != nil
			var yynn1824 int
			if yyr1824 || yy2arr1824 {
				r.EncodeArrayStart(3)
			} else {
				yynn1824 = 0
				for _, b := range yyq1824 {
					if b {
						yynn1824++
					}
				}
				r.EncodeMapStart(yynn1824)
				yynn1824 = 0
			}
			if yyr1824 || yy2arr1824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1824[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1824[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1824 || yy2arr1824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1824[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1824[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1824 || yy2arr1824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1824[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1824[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1824 || yy2arr1824 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1828 := z.DecBinary()
	_ = yym1828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1829 := r.ContainerType()
		if yyct1829 == codecSelferValueTypeMap1234 {
			yyl1829 := r.ReadMapStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1829, d)
			}
		} else if yyct1829 == codecSelferValueTypeArray1234 {
			yyl1829 := r.ReadArrayStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1830Slc
	var yyhl1830 bool = l >= 0
	for yyj1830 := 0; ; yyj1830++ {
		if yyhl1830 {
			if yyj1830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1830Slc = r.DecodeBytes(yys1830Slc, true, true)
		yys1830 := string(yys1830Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1830 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1830)
		} // end switch yys1830
	} // end for yyj1830
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1834 int
	var yyb1834 bool
	var yyhl1834 bool = l >= 0
	yyj1834++
	if yyhl1834 {
		yyb1834 = yyj1834 > l
	} else {
		yyb1834 = r.CheckBreak()
	}
	if yyb1834 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1834++
	if yyhl1834 {
		yyb1834 = yyj1834 > l
	} else {
		yyb1834 = r.CheckBreak()
	}
	if yyb1834 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1834++
	if yyhl1834 {
		yyb1834 = yyj1834 > l
	} else {
		yyb1834 = r.CheckBreak()
	}
	if yyb1834 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1834++
		if yyhl1834 {
			yyb1834 = yyj1834 > l
		} else {
			yyb1834 = r.CheckBreak()
		}
		if yyb1834 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1834-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1838 := z.EncBinary()
		_ = yym1838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1839 := !z.EncBinary()
			yy2arr1839 := z.EncBasicHandle().StructToArray
			var yyq1839 [2]bool
			_, _, _ = yysep1839, yyq1839, yy2arr1839
			const yyr1839 bool = false
			yyq1839[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1839[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1839 int
			if yyr1839 || yy2arr1839 {
				r.EncodeArrayStart(2)
			} else {
				yynn1839 = 0
				for _, b := range yyq1839 {
					if b {
						yynn1839++
					}
				}
				r.EncodeMapStart(yynn1839)
				yynn1839 = 0
			}
			if yyr1839 || yy2arr1839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1839[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1841 := z.EncBinary()
						_ = yym1841
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1839[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1842 := z.EncBinary()
						_ = yym1842
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1839[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1844 := z.EncBinary()
						_ = yym1844
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1839[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1845 := z.EncBinary()
						_ = yym1845
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1846 := z.DecBinary()
	_ = yym1846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1847 := r.ContainerType()
		if yyct1847 == codecSelferValueTypeMap1234 {
			yyl1847 := r.ReadMapStart()
			if yyl1847 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1847, d)
			}
		} else if yyct1847 == codecSelferValueTypeArray1234 {
			yyl1847 := r.ReadArrayStart()
			if yyl1847 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1848Slc
	var yyhl1848 bool = l >= 0
	for yyj1848 := 0; ; yyj1848++ {
		if yyhl1848 {
			if yyj1848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1848Slc = r.DecodeBytes(yys1848Slc, true, true)
		yys1848 := string(yys1848Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1848 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1849 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1850 := z.DecBinary()
				_ = yym1850
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1849), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1851 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1852 := z.DecBinary()
				_ = yym1852
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1851), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1848)
		} // end switch yys1848
	} // end for yyj1848
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1853 int
	var yyb1853 bool
	var yyhl1853 bool = l >= 0
	yyj1853++
	if yyhl1853 {
		yyb1853 = yyj1853 > l
	} else {
		yyb1853 = r.CheckBreak()
	}
	if yyb1853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1854 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1855 := z.DecBinary()
		_ = yym1855
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1854), d)
		}
	}
	yyj1853++
	if yyhl1853 {
		yyb1853 = yyj1853 > l
	} else {
		yyb1853 = r.CheckBreak()
	}
	if yyb1853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1856 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1857 := z.DecBinary()
		_ = yym1857
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1856), d)
		}
	}
	for {
		yyj1853++
		if yyhl1853 {
			yyb1853 = yyj1853 > l
		} else {
			yyb1853 = r.CheckBreak()
		}
		if yyb1853 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1853-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1858 := z.EncBinary()
		_ = yym1858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1859 := !z.EncBinary()
			yy2arr1859 := z.EncBasicHandle().StructToArray
			var yyq1859 [2]bool
			_, _, _ = yysep1859, yyq1859, yy2arr1859
			const yyr1859 bool = false
			yyq1859[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1859[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1859 int
			if yyr1859 || yy2arr1859 {
				r.EncodeArrayStart(2)
			} else {
				yynn1859 = 0
				for _, b := range yyq1859 {
					if b {
						yynn1859++
					}
				}
				r.EncodeMapStart(yynn1859)
				yynn1859 = 0
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1859[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1861 := z.EncBinary()
						_ = yym1861
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1862 := z.EncBinary()
						_ = yym1862
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1859[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1864 := z.EncBinary()
						_ = yym1864
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1865 := z.EncBinary()
						_ = yym1865
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1866 := z.DecBinary()
	_ = yym1866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1867 := r.ContainerType()
		if yyct1867 == codecSelferValueTypeMap1234 {
			yyl1867 := r.ReadMapStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1867, d)
			}
		} else if yyct1867 == codecSelferValueTypeArray1234 {
			yyl1867 := r.ReadArrayStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1868Slc
	var yyhl1868 bool = l >= 0
	for yyj1868 := 0; ; yyj1868++ {
		if yyhl1868 {
			if yyj1868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1868Slc = r.DecodeBytes(yys1868Slc, true, true)
		yys1868 := string(yys1868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1868 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1869 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1870 := z.DecBinary()
				_ = yym1870
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1869), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1871 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1872 := z.DecBinary()
				_ = yym1872
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1871), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1868)
		} // end switch yys1868
	} // end for yyj1868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1873 int
	var yyb1873 bool
	var yyhl1873 bool = l >= 0
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1874 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1875 := z.DecBinary()
		_ = yym1875
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1874), d)
		}
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1876 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1877 := z.DecBinary()
		_ = yym1877
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1876), d)
		}
	}
	for {
		yyj1873++
		if yyhl1873 {
			yyb1873 = yyj1873 > l
		} else {
			yyb1873 = r.CheckBreak()
		}
		if yyb1873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1878 := z.EncBinary()
		_ = yym1878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1879 := !z.EncBinary()
			yy2arr1879 := z.EncBasicHandle().StructToArray
			var yyq1879 [2]bool
			_, _, _ = yysep1879, yyq1879, yy2arr1879
			const yyr1879 bool = false
			var yynn1879 int
			if yyr1879 || yy2arr1879 {
				r.EncodeArrayStart(2)
			} else {
				yynn1879 = 2
				for _, b := range yyq1879 {
					if b {
						yynn1879++
					}
				}
				r.EncodeMapStart(yynn1879)
				yynn1879 = 0
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1881 := z.EncBinary()
				_ = yym1881
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1882 := z.EncBinary()
				_ = yym1882
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1884 := &x.PodAffinityTerm
				yy1884.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1885 := &x.PodAffinityTerm
				yy1885.CodecEncodeSelf(e)
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1886 := z.DecBinary()
	_ = yym1886
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1887 := r.ContainerType()
		if yyct1887 == codecSelferValueTypeMap1234 {
			yyl1887 := r.ReadMapStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1887, d)
			}
		} else if yyct1887 == codecSelferValueTypeArray1234 {
			yyl1887 := r.ReadArrayStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1887, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1888Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1888Slc
	var yyhl1888 bool = l >= 0
	for yyj1888 := 0; ; yyj1888++ {
		if yyhl1888 {
			if yyj1888 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1888Slc = r.DecodeBytes(yys1888Slc, true, true)
		yys1888 := string(yys1888Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1888 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1890 := &x.PodAffinityTerm
				yyv1890.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1888)
		} // end switch yys1888
	} // end for yyj1888
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1891 int
	var yyb1891 bool
	var yyhl1891 bool = l >= 0
	yyj1891++
	if yyhl1891 {
		yyb1891 = yyj1891 > l
	} else {
		yyb1891 = r.CheckBreak()
	}
	if yyb1891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1891++
	if yyhl1891 {
		yyb1891 = yyj1891 > l
	} else {
		yyb1891 = r.CheckBreak()
	}
	if yyb1891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1893 := &x.PodAffinityTerm
		yyv1893.CodecDecodeSelf(d)
	}
	for {
		yyj1891++
		if yyhl1891 {
			yyb1891 = yyj1891 > l
		} else {
			yyb1891 = r.CheckBreak()
		}
		if yyb1891 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1891-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1894 := z.EncBinary()
		_ = yym1894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1895 := !z.EncBinary()
			yy2arr1895 := z.EncBasicHandle().StructToArray
			var yyq1895 [3]bool
			_, _, _ = yysep1895, yyq1895, yy2arr1895
			const yyr1895 bool = false
			yyq1895[0] = x.LabelSelector != nil
			yyq1895[2] = x.TopologyKey != ""
			var yynn1895 int
			if yyr1895 || yy2arr1895 {
				r.EncodeArrayStart(3)
			} else {
				yynn1895 = 1
				for _, b := range yyq1895 {
					if b {
						yynn1895++
					}
				}
				r.EncodeMapStart(yynn1895)
				yynn1895 = 0
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1895[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1897 := z.EncBinary()
						_ = yym1897
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1895[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1898 := z.EncBinary()
						_ = yym1898
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1895[2] {
					yym1903 := z.EncBinary()
					_ = yym1903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1895[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1904 := z.EncBinary()
					_ = yym1904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1905 := z.DecBinary()
	_ = yym1905
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1906 := r.ContainerType()
		if yyct1906 == codecSelferValueTypeMap1234 {
			yyl1906 := r.ReadMapStart()
			if yyl1906 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1906, d)
			}
		} else if yyct1906 == codecSelferValueTypeArray1234 {
			yyl1906 := r.ReadArrayStart()
			if yyl1906 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1906, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1907Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1907Slc
	var yyhl1907 bool = l >= 0
	for yyj1907 := 0; ; yyj1907++ {
		if yyhl1907 {
			if yyj1907 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1907Slc = r.DecodeBytes(yys1907Slc, true, true)
		yys1907 := string(yys1907Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1907 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1909 := z.DecBinary()
				_ = yym1909
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1910 := &x.Namespaces
				yym1911 := z.DecBinary()
				_ = yym1911
				if false {
				} else {
					z.F.DecSliceStringX(yyv1910, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1907)
		} // end switch yys1907
	} // end for yyj1907
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1913 int
	var yyb1913 bool
	var yyhl1913 bool = l >= 0
	yyj1913++
	if yyhl1913 {
		yyb1913 = yyj1913 > l
	} else {
		yyb1913 = r.CheckBreak()
	}
	if yyb1913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1915 := z.DecBinary()
		_ = yym1915
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1913++
	if yyhl1913 {
		yyb1913 = yyj1913 > l
	} else {
		yyb1913 = r.CheckBreak()
	}
	if yyb1913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1916 := &x.Namespaces
		yym1917 := z.DecBinary()
		_ = yym1917
		if false {
		} else {
			z.F.DecSliceStringX(yyv1916, false, d)
		}
	}
	yyj1913++
	if yyhl1913 {
		yyb1913 = yyj1913 > l
	} else {
		yyb1913 = r.CheckBreak()
	}
	if yyb1913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1913++
		if yyhl1913 {
			yyb1913 = yyj1913 > l
		} else {
			yyb1913 = r.CheckBreak()
		}
		if yyb1913 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1913-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1919 := z.EncBinary()
		_ = yym1919
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1920 := !z.EncBinary()
			yy2arr1920 := z.EncBasicHandle().StructToArray
			var yyq1920 [2]bool
			_, _, _ = yysep1920, yyq1920, yy2arr1920
			const yyr1920 bool = false
			yyq1920[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1920[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1920 int
			if yyr1920 || yy2arr1920 {
				r.EncodeArrayStart(2)
			} else {
				yynn1920 = 0
				for _, b := range yyq1920 {
					if b {
						yynn1920++
					}
				}
				r.EncodeMapStart(yynn1920)
				yynn1920 = 0
			}
			if yyr1920 || yy2arr1920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1920[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1920[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1920 || yy2arr1920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1920[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1923 := z.EncBinary()
						_ = yym1923
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1920[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1924 := z.EncBinary()
						_ = yym1924
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1920 || yy2arr1920 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1925 := z.DecBinary()
	_ = yym1925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1926 := r.ContainerType()
		if yyct1926 == codecSelferValueTypeMap1234 {
			yyl1926 := r.ReadMapStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1926, d)
			}
		} else if yyct1926 == codecSelferValueTypeArray1234 {
			yyl1926 := r.ReadArrayStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1926, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1927Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1927Slc
	var yyhl1927 bool = l >= 0
	for yyj1927 := 0; ; yyj1927++ {
		if yyhl1927 {
			if yyj1927 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1927Slc = r.DecodeBytes(yys1927Slc, true, true)
		yys1927 := string(yys1927Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1927 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1929 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1930 := z.DecBinary()
				_ = yym1930
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1929), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1927)
		} // end switch yys1927
	} // end for yyj1927
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1931 int
	var yyb1931 bool
	var yyhl1931 bool = l >= 0
	yyj1931++
	if yyhl1931 {
		yyb1931 = yyj1931 > l
	} else {
		yyb1931 = r.CheckBreak()
	}
	if yyb1931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1931++
	if yyhl1931 {
		yyb1931 = yyj1931 > l
	} else {
		yyb1931 = r.CheckBreak()
	}
	if yyb1931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1933 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1934 := z.DecBinary()
		_ = yym1934
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1933), d)
		}
	}
	for {
		yyj1931++
		if yyhl1931 {
			yyb1931 = yyj1931 > l
		} else {
			yyb1931 = r.CheckBreak()
		}
		if yyb1931 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1931-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1935 := z.EncBinary()
		_ = yym1935
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1936 := !z.EncBinary()
			yy2arr1936 := z.EncBasicHandle().StructToArray
			var yyq1936 [2]bool
			_, _, _ = yysep1936, yyq1936, yy2arr1936
			const yyr1936 bool = false
			var yynn1936 int
			if yyr1936 || yy2arr1936 {
				r.EncodeArrayStart(2)
			} else {
				yynn1936 = 2
				for _, b := range yyq1936 {
					if b {
						yynn1936++
					}
				}
				r.EncodeMapStart(yynn1936)
				yynn1936 = 0
			}
			if yyr1936 || yy2arr1936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1938 := z.EncBinary()
				_ = yym1938
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1939 := z.EncBinary()
				_ = yym1939
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1936 || yy2arr1936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1941 := &x.Preference
				yy1941.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1942 := &x.Preference
				yy1942.CodecEncodeSelf(e)
			}
			if yyr1936 || yy2arr1936 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1943 := z.DecBinary()
	_ = yym1943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1944 := r.ContainerType()
		if yyct1944 == codecSelferValueTypeMap1234 {
			yyl1944 := r.ReadMapStart()
			if yyl1944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1944, d)
			}
		} else if yyct1944 == codecSelferValueTypeArray1234 {
			yyl1944 := r.ReadArrayStart()
			if yyl1944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1945Slc
	var yyhl1945 bool = l >= 0
	for yyj1945 := 0; ; yyj1945++ {
		if yyhl1945 {
			if yyj1945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1945Slc = r.DecodeBytes(yys1945Slc, true, true)
		yys1945 := string(yys1945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1945 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1947 := &x.Preference
				yyv1947.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1945)
		} // end switch yys1945
	} // end for yyj1945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1948 int
	var yyb1948 bool
	var yyhl1948 bool = l >= 0
	yyj1948++
	if yyhl1948 {
		yyb1948 = yyj1948 > l
	} else {
		yyb1948 = r.CheckBreak()
	}
	if yyb1948 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1948++
	if yyhl1948 {
		yyb1948 = yyj1948 > l
	} else {
		yyb1948 = r.CheckBreak()
	}
	if yyb1948 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1950 := &x.Preference
		yyv1950.CodecDecodeSelf(d)
	}
	for {
		yyj1948++
		if yyhl1948 {
			yyb1948 = yyj1948 > l
		} else {
			yyb1948 = r.CheckBreak()
		}
		if yyb1948 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1948-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1951 := z.EncBinary()
		_ = yym1951
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1952 := !z.EncBinary()
			yy2arr1952 := z.EncBasicHandle().StructToArray
			var yyq1952 [3]bool
			_, _, _ = yysep1952, yyq1952, yy2arr1952
			const yyr1952 bool = false
			yyq1952[1] = x.Value != ""
			var yynn1952 int
			if yyr1952 || yy2arr1952 {
				r.EncodeArrayStart(3)
			} else {
				yynn1952 = 2
				for _, b := range yyq1952 {
					if b {
						yynn1952++
					}
				}
				r.EncodeMapStart(yynn1952)
				yynn1952 = 0
			}
			if yyr1952 || yy2arr1952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1954 := z.EncBinary()
				_ = yym1954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1955 := z.EncBinary()
				_ = yym1955
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1952 || yy2arr1952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1952[1] {
					yym1957 := z.EncBinary()
					_ = yym1957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1952[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1958 := z.EncBinary()
					_ = yym1958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1952 || yy2arr1952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1952 || yy2arr1952 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1960 := z.DecBinary()
	_ = yym1960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1961 := r.ContainerType()
		if yyct1961 == codecSelferValueTypeMap1234 {
			yyl1961 := r.ReadMapStart()
			if yyl1961 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1961, d)
			}
		} else if yyct1961 == codecSelferValueTypeArray1234 {
			yyl1961 := r.ReadArrayStart()
			if yyl1961 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1962Slc
	var yyhl1962 bool = l >= 0
	for yyj1962 := 0; ; yyj1962++ {
		if yyhl1962 {
			if yyj1962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1962Slc = r.DecodeBytes(yys1962Slc, true, true)
		yys1962 := string(yys1962Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1962 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1962)
		} // end switch yys1962
	} // end for yyj1962
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1966 int
	var yyb1966 bool
	var yyhl1966 bool = l >= 0
	yyj1966++
	if yyhl1966 {
		yyb1966 = yyj1966 > l
	} else {
		yyb1966 = r.CheckBreak()
	}
	if yyb1966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1966++
	if yyhl1966 {
		yyb1966 = yyj1966 > l
	} else {
		yyb1966 = r.CheckBreak()
	}
	if yyb1966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1966++
	if yyhl1966 {
		yyb1966 = yyj1966 > l
	} else {
		yyb1966 = r.CheckBreak()
	}
	if yyb1966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1966++
		if yyhl1966 {
			yyb1966 = yyj1966 > l
		} else {
			yyb1966 = r.CheckBreak()
		}
		if yyb1966 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1966-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1970 := z.EncBinary()
	_ = yym1970
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1971 := z.DecBinary()
	_ = yym1971
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1972 := z.EncBinary()
		_ = yym1972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1973 := !z.EncBinary()
			yy2arr1973 := z.EncBasicHandle().StructToArray
			var yyq1973 [4]bool
			_, _, _ = yysep1973, yyq1973, yy2arr1973
			const yyr1973 bool = false
			yyq1973[0] = x.Key != ""
			yyq1973[1] = x.Operator != ""
			yyq1973[2] = x.Value != ""
			yyq1973[3] = x.Effect != ""
			var yynn1973 int
			if yyr1973 || yy2arr1973 {
				r.EncodeArrayStart(4)
			} else {
				yynn1973 = 0
				for _, b := range yyq1973 {
					if b {
						yynn1973++
					}
				}
				r.EncodeMapStart(yynn1973)
				yynn1973 = 0
			}
			if yyr1973 || yy2arr1973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1973[0] {
					yym1975 := z.EncBinary()
					_ = yym1975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1973[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1976 := z.EncBinary()
					_ = yym1976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1973 || yy2arr1973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1973[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1973[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1973 || yy2arr1973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1973[2] {
					yym1979 := z.EncBinary()
					_ = yym1979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1973[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1973 || yy2arr1973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1973[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1973[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1973 || yy2arr1973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1982 := z.DecBinary()
	_ = yym1982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1983 := r.ContainerType()
		if yyct1983 == codecSelferValueTypeMap1234 {
			yyl1983 := r.ReadMapStart()
			if yyl1983 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1983, d)
			}
		} else if yyct1983 == codecSelferValueTypeArray1234 {
			yyl1983 := r.ReadArrayStart()
			if yyl1983 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1983, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1984Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1984Slc
	var yyhl1984 bool = l >= 0
	for yyj1984 := 0; ; yyj1984++ {
		if yyhl1984 {
			if yyj1984 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1984Slc = r.DecodeBytes(yys1984Slc, true, true)
		yys1984 := string(yys1984Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1984 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1984)
		} // end switch yys1984
	} // end for yyj1984
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1989 int
	var yyb1989 bool
	var yyhl1989 bool = l >= 0
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1989++
		if yyhl1989 {
			yyb1989 = yyj1989 > l
		} else {
			yyb1989 = r.CheckBreak()
		}
		if yyb1989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1994 := z.EncBinary()
	_ = yym1994
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1995 := z.DecBinary()
	_ = yym1995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1996 := z.EncBinary()
		_ = yym1996
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1997 := !z.EncBinary()
			yy2arr1997 := z.EncBasicHandle().StructToArray
			var yyq1997 [17]bool
			_, _, _ = yysep1997, yyq1997, yy2arr1997
			const yyr1997 bool = false
			yyq1997[0] = len(x.Volumes) != 0
			yyq1997[2] = x.RestartPolicy != ""
			yyq1997[3] = x.TerminationGracePeriodSeconds != nil
			yyq1997[4] = x.ActiveDeadlineSeconds != nil
			yyq1997[5] = x.DNSPolicy != ""
			yyq1997[6] = len(x.NodeSelector) != 0
			yyq1997[7] = x.ServiceAccountName != ""
			yyq1997[8] = x.DeprecatedServiceAccount != ""
			yyq1997[9] = x.NodeName != ""
			yyq1997[10] = x.HostNetwork != false
			yyq1997[11] = x.HostPID != false
			yyq1997[12] = x.HostIPC != false
			yyq1997[13] = x.SecurityContext != nil
			yyq1997[14] = len(x.ImagePullSecrets) != 0
			yyq1997[15] = x.Hostname != ""
			yyq1997[16] = x.Subdomain != ""
			var yynn1997 int
			if yyr1997 || yy2arr1997 {
				r.EncodeArrayStart(17)
			} else {
				yynn1997 = 1
				for _, b := range yyq1997 {
					if b {
						yynn1997++
					}
				}
				r.EncodeMapStart(yynn1997)
				yynn1997 = 0
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1999 := z.EncBinary()
						_ = yym1999
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2000 := z.EncBinary()
						_ = yym2000
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2002 := z.EncBinary()
					_ = yym2002
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2003 := z.EncBinary()
					_ = yym2003
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2006 := *x.TerminationGracePeriodSeconds
						yym2007 := z.EncBinary()
						_ = yym2007
						if false {
						} else {
							r.EncodeInt(int64(yy2006))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2008 := *x.TerminationGracePeriodSeconds
						yym2009 := z.EncBinary()
						_ = yym2009
						if false {
						} else {
							r.EncodeInt(int64(yy2008))
						}
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2011 := *x.ActiveDeadlineSeconds
						yym2012 := z.EncBinary()
						_ = yym2012
						if false {
						} else {
							r.EncodeInt(int64(yy2011))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2013 := *x.ActiveDeadlineSeconds
						yym2014 := z.EncBinary()
						_ = yym2014
						if false {
						} else {
							r.EncodeInt(int64(yy2013))
						}
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2017 := z.EncBinary()
						_ = yym2017
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2018 := z.EncBinary()
						_ = yym2018
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[7] {
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2021 := z.EncBinary()
					_ = yym2021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[8] {
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[9] {
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[10] {
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1997[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[11] {
					yym2032 := z.EncBinary()
					_ = yym2032
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1997[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[12] {
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1997[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2036 := z.EncBinary()
					_ = yym2036
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2039 := z.EncBinary()
						_ = yym2039
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2040 := z.EncBinary()
						_ = yym2040
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[15] {
					yym2042 := z.EncBinary()
					_ = yym2042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[16] {
					yym2045 := z.EncBinary()
					_ = yym2045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2047 := z.DecBinary()
	_ = yym2047
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2048 := r.ContainerType()
		if yyct2048 == codecSelferValueTypeMap1234 {
			yyl2048 := r.ReadMapStart()
			if yyl2048 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2048, d)
			}
		} else if yyct2048 == codecSelferValueTypeArray1234 {
			yyl2048 := r.ReadArrayStart()
			if yyl2048 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2048, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2049Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2049Slc
	var yyhl2049 bool = l >= 0
	for yyj2049 := 0; ; yyj2049++ {
		if yyhl2049 {
			if yyj2049 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2049Slc = r.DecodeBytes(yys2049Slc, true, true)
		yys2049 := string(yys2049Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2049 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2050 := &x.Volumes
				yym2051 := z.DecBinary()
				_ = yym2051
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2050), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2052 := &x.Containers
				yym2053 := z.DecBinary()
				_ = yym2053
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2052), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2056 := z.DecBinary()
				_ = yym2056
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2058 := z.DecBinary()
				_ = yym2058
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2060 := &x.NodeSelector
				yym2061 := z.DecBinary()
				_ = yym2061
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2060, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2069 := &x.ImagePullSecrets
				yym2070 := z.DecBinary()
				_ = yym2070
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2069), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2049)
		} // end switch yys2049
	} // end for yyj2049
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2073 int
	var yyb2073 bool
	var yyhl2073 bool = l >= 0
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2074 := &x.Volumes
		yym2075 := z.DecBinary()
		_ = yym2075
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2074), d)
		}
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2076 := &x.Containers
		yym2077 := z.DecBinary()
		_ = yym2077
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2076), d)
		}
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2080 := z.DecBinary()
		_ = yym2080
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2082 := z.DecBinary()
		_ = yym2082
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2084 := &x.NodeSelector
		yym2085 := z.DecBinary()
		_ = yym2085
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2084, false, d)
		}
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2093 := &x.ImagePullSecrets
		yym2094 := z.DecBinary()
		_ = yym2094
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2093), d)
		}
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2073++
		if yyhl2073 {
			yyb2073 = yyj2073 > l
		} else {
			yyb2073 = r.CheckBreak()
		}
		if yyb2073 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2073-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2097 := z.EncBinary()
		_ = yym2097
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2098 := !z.EncBinary()
			yy2arr2098 := z.EncBasicHandle().StructToArray
			var yyq2098 [5]bool
			_, _, _ = yysep2098, yyq2098, yy2arr2098
			const yyr2098 bool = false
			yyq2098[0] = x.SELinuxOptions != nil
			yyq2098[1] = x.RunAsUser != nil
			yyq2098[2] = x.RunAsNonRoot != nil
			yyq2098[3] = len(x.SupplementalGroups) != 0
			yyq2098[4] = x.FSGroup != nil
			var yynn2098 int
			if yyr2098 || yy2arr2098 {
				r.EncodeArrayStart(5)
			} else {
				yynn2098 = 0
				for _, b := range yyq2098 {
					if b {
						yynn2098++
					}
				}
				r.EncodeMapStart(yynn2098)
				yynn2098 = 0
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2101 := *x.RunAsUser
						yym2102 := z.EncBinary()
						_ = yym2102
						if false {
						} else {
							r.EncodeInt(int64(yy2101))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2103 := *x.RunAsUser
						yym2104 := z.EncBinary()
						_ = yym2104
						if false {
						} else {
							r.EncodeInt(int64(yy2103))
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2106 := *x.RunAsNonRoot
						yym2107 := z.EncBinary()
						_ = yym2107
						if false {
						} else {
							r.EncodeBool(bool(yy2106))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2108 := *x.RunAsNonRoot
						yym2109 := z.EncBinary()
						_ = yym2109
						if false {
						} else {
							r.EncodeBool(bool(yy2108))
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2111 := z.EncBinary()
						_ = yym2111
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2112 := z.EncBinary()
						_ = yym2112
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2098[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2114 := *x.FSGroup
						yym2115 := z.EncBinary()
						_ = yym2115
						if false {
						} else {
							r.EncodeInt(int64(yy2114))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2116 := *x.FSGroup
						yym2117 := z.EncBinary()
						_ = yym2117
						if false {
						} else {
							r.EncodeInt(int64(yy2116))
						}
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2118 := z.DecBinary()
	_ = yym2118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2119 := r.ContainerType()
		if yyct2119 == codecSelferValueTypeMap1234 {
			yyl2119 := r.ReadMapStart()
			if yyl2119 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2119, d)
			}
		} else if yyct2119 == codecSelferValueTypeArray1234 {
			yyl2119 := r.ReadArrayStart()
			if yyl2119 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2119, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2120Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2120Slc
	var yyhl2120 bool = l >= 0
	for yyj2120 := 0; ; yyj2120++ {
		if yyhl2120 {
			if yyj2120 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2120Slc = r.DecodeBytes(yys2120Slc, true, true)
		yys2120 := string(yys2120Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2120 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2123 := z.DecBinary()
				_ = yym2123
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2125 := z.DecBinary()
				_ = yym2125
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2126 := &x.SupplementalGroups
				yym2127 := z.DecBinary()
				_ = yym2127
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2126, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2129 := z.DecBinary()
				_ = yym2129
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2120)
		} // end switch yys2120
	} // end for yyj2120
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2130 int
	var yyb2130 bool
	var yyhl2130 bool = l >= 0
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2133 := z.DecBinary()
		_ = yym2133
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2135 := z.DecBinary()
		_ = yym2135
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2136 := &x.SupplementalGroups
		yym2137 := z.DecBinary()
		_ = yym2137
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2136, false, d)
		}
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2139 := z.DecBinary()
		_ = yym2139
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2130++
		if yyhl2130 {
			yyb2130 = yyj2130 > l
		} else {
			yyb2130 = r.CheckBreak()
		}
		if yyb2130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2140 := z.EncBinary()
		_ = yym2140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2141 := !z.EncBinary()
			yy2arr2141 := z.EncBasicHandle().StructToArray
			var yyq2141 [8]bool
			_, _, _ = yysep2141, yyq2141, yy2arr2141
			const yyr2141 bool = false
			yyq2141[0] = x.Phase != ""
			yyq2141[1] = len(x.Conditions) != 0
			yyq2141[2] = x.Message != ""
			yyq2141[3] = x.Reason != ""
			yyq2141[4] = x.HostIP != ""
			yyq2141[5] = x.PodIP != ""
			yyq2141[6] = x.StartTime != nil
			yyq2141[7] = len(x.ContainerStatuses) != 0
			var yynn2141 int
			if yyr2141 || yy2arr2141 {
				r.EncodeArrayStart(8)
			} else {
				yynn2141 = 0
				for _, b := range yyq2141 {
					if b {
						yynn2141++
					}
				}
				r.EncodeMapStart(yynn2141)
				yynn2141 = 0
			}
			if yyr2141 || yy2arr2141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2141[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2141 || yy2arr2141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2141[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2144 := z.EncBinary()
						_ = yym2144
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2145 := z.EncBinary()
						_ = yym2145
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2141 || yy2arr2141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2141[2] {
					yym2147 := z.EncBinary()
					_ = yym2147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2141[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2141 || yy2arr2141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2141[3] {
					yym2150 := z.EncBinary()
					_ = yym2150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2141[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2151 := z.EncBinary()
					_ = yym2151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2141 || yy2arr2141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2141[4] {
					yym2153 := z.EncBinary()
					_ = yym2153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2141[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2141 || yy2arr2141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2141[5] {
					yym2156 := z.EncBinary()
					_ = yym2156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2141[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2141 || yy2arr2141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2141[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2159 := z.EncBinary()
						_ = yym2159
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2159 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2159 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2141[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2160 := z.EncBinary()
						_ = yym2160
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2160 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2160 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2141 || yy2arr2141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2141[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2162 := z.EncBinary()
						_ = yym2162
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2141[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2163 := z.EncBinary()
						_ = yym2163
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2141 || yy2arr2141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2164 := z.DecBinary()
	_ = yym2164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2165 := r.ContainerType()
		if yyct2165 == codecSelferValueTypeMap1234 {
			yyl2165 := r.ReadMapStart()
			if yyl2165 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2165, d)
			}
		} else if yyct2165 == codecSelferValueTypeArray1234 {
			yyl2165 := r.ReadArrayStart()
			if yyl2165 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2165, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2166Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2166Slc
	var yyhl2166 bool = l >= 0
	for yyj2166 := 0; ; yyj2166++ {
		if yyhl2166 {
			if yyj2166 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2166Slc = r.DecodeBytes(yys2166Slc, true, true)
		yys2166 := string(yys2166Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2166 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2168 := &x.Conditions
				yym2169 := z.DecBinary()
				_ = yym2169
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2168), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2175 := z.DecBinary()
				_ = yym2175
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2175 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2175 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2176 := &x.ContainerStatuses
				yym2177 := z.DecBinary()
				_ = yym2177
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2176), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2166)
		} // end switch yys2166
	} // end for yyj2166
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2178 int
	var yyb2178 bool
	var yyhl2178 bool = l >= 0
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2180 := &x.Conditions
		yym2181 := z.DecBinary()
		_ = yym2181
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2180), d)
		}
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2187 := z.DecBinary()
		_ = yym2187
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2187 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2187 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2188 := &x.ContainerStatuses
		yym2189 := z.DecBinary()
		_ = yym2189
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2188), d)
		}
	}
	for {
		yyj2178++
		if yyhl2178 {
			yyb2178 = yyj2178 > l
		} else {
			yyb2178 = r.CheckBreak()
		}
		if yyb2178 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2178-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2190 := z.EncBinary()
		_ = yym2190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2191 := !z.EncBinary()
			yy2arr2191 := z.EncBasicHandle().StructToArray
			var yyq2191 [4]bool
			_, _, _ = yysep2191, yyq2191, yy2arr2191
			const yyr2191 bool = false
			yyq2191[0] = x.Kind != ""
			yyq2191[1] = x.APIVersion != ""
			yyq2191[2] = true
			yyq2191[3] = true
			var yynn2191 int
			if yyr2191 || yy2arr2191 {
				r.EncodeArrayStart(4)
			} else {
				yynn2191 = 0
				for _, b := range yyq2191 {
					if b {
						yynn2191++
					}
				}
				r.EncodeMapStart(yynn2191)
				yynn2191 = 0
			}
			if yyr2191 || yy2arr2191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2191[0] {
					yym2193 := z.EncBinary()
					_ = yym2193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2191[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2194 := z.EncBinary()
					_ = yym2194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2191 || yy2arr2191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2191[1] {
					yym2196 := z.EncBinary()
					_ = yym2196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2191[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2197 := z.EncBinary()
					_ = yym2197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2191 || yy2arr2191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2191[2] {
					yy2199 := &x.ObjectMeta
					yy2199.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2191[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2200 := &x.ObjectMeta
					yy2200.CodecEncodeSelf(e)
				}
			}
			if yyr2191 || yy2arr2191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2191[3] {
					yy2202 := &x.Status
					yy2202.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2191[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2203 := &x.Status
					yy2203.CodecEncodeSelf(e)
				}
			}
			if yyr2191 || yy2arr2191 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2204 := z.DecBinary()
	_ = yym2204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2205 := r.ContainerType()
		if yyct2205 == codecSelferValueTypeMap1234 {
			yyl2205 := r.ReadMapStart()
			if yyl2205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2205, d)
			}
		} else if yyct2205 == codecSelferValueTypeArray1234 {
			yyl2205 := r.ReadArrayStart()
			if yyl2205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2206Slc
	var yyhl2206 bool = l >= 0
	for yyj2206 := 0; ; yyj2206++ {
		if yyhl2206 {
			if yyj2206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2206Slc = r.DecodeBytes(yys2206Slc, true, true)
		yys2206 := string(yys2206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2206 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2209 := &x.ObjectMeta
				yyv2209.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2210 := &x.Status
				yyv2210.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2206)
		} // end switch yys2206
	} // end for yyj2206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2211 int
	var yyb2211 bool
	var yyhl2211 bool = l >= 0
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2214 := &x.ObjectMeta
		yyv2214.CodecDecodeSelf(d)
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2215 := &x.Status
		yyv2215.CodecDecodeSelf(d)
	}
	for {
		yyj2211++
		if yyhl2211 {
			yyb2211 = yyj2211 > l
		} else {
			yyb2211 = r.CheckBreak()
		}
		if yyb2211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2216 := z.EncBinary()
		_ = yym2216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2217 := !z.EncBinary()
			yy2arr2217 := z.EncBasicHandle().StructToArray
			var yyq2217 [5]bool
			_, _, _ = yysep2217, yyq2217, yy2arr2217
			const yyr2217 bool = false
			yyq2217[0] = x.Kind != ""
			yyq2217[1] = x.APIVersion != ""
			yyq2217[2] = true
			yyq2217[3] = true
			yyq2217[4] = true
			var yynn2217 int
			if yyr2217 || yy2arr2217 {
				r.EncodeArrayStart(5)
			} else {
				yynn2217 = 0
				for _, b := range yyq2217 {
					if b {
						yynn2217++
					}
				}
				r.EncodeMapStart(yynn2217)
				yynn2217 = 0
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[0] {
					yym2219 := z.EncBinary()
					_ = yym2219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2217[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2220 := z.EncBinary()
					_ = yym2220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[1] {
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2217[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2223 := z.EncBinary()
					_ = yym2223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[2] {
					yy2225 := &x.ObjectMeta
					yy2225.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2217[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2226 := &x.ObjectMeta
					yy2226.CodecEncodeSelf(e)
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[3] {
					yy2228 := &x.Spec
					yy2228.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2217[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2229 := &x.Spec
					yy2229.CodecEncodeSelf(e)
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[4] {
					yy2231 := &x.Status
					yy2231.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2217[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2232 := &x.Status
					yy2232.CodecEncodeSelf(e)
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2233 := z.DecBinary()
	_ = yym2233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2234 := r.ContainerType()
		if yyct2234 == codecSelferValueTypeMap1234 {
			yyl2234 := r.ReadMapStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2234, d)
			}
		} else if yyct2234 == codecSelferValueTypeArray1234 {
			yyl2234 := r.ReadArrayStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2235Slc
	var yyhl2235 bool = l >= 0
	for yyj2235 := 0; ; yyj2235++ {
		if yyhl2235 {
			if yyj2235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2235Slc = r.DecodeBytes(yys2235Slc, true, true)
		yys2235 := string(yys2235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2235 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2238 := &x.ObjectMeta
				yyv2238.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2239 := &x.Spec
				yyv2239.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2240 := &x.Status
				yyv2240.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2235)
		} // end switch yys2235
	} // end for yyj2235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2241 int
	var yyb2241 bool
	var yyhl2241 bool = l >= 0
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2244 := &x.ObjectMeta
		yyv2244.CodecDecodeSelf(d)
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2245 := &x.Spec
		yyv2245.CodecDecodeSelf(d)
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2246 := &x.Status
		yyv2246.CodecDecodeSelf(d)
	}
	for {
		yyj2241++
		if yyhl2241 {
			yyb2241 = yyj2241 > l
		} else {
			yyb2241 = r.CheckBreak()
		}
		if yyb2241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2247 := z.EncBinary()
		_ = yym2247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2248 := !z.EncBinary()
			yy2arr2248 := z.EncBasicHandle().StructToArray
			var yyq2248 [4]bool
			_, _, _ = yysep2248, yyq2248, yy2arr2248
			const yyr2248 bool = false
			yyq2248[0] = x.Kind != ""
			yyq2248[1] = x.APIVersion != ""
			yyq2248[2] = true
			var yynn2248 int
			if yyr2248 || yy2arr2248 {
				r.EncodeArrayStart(4)
			} else {
				yynn2248 = 1
				for _, b := range yyq2248 {
					if b {
						yynn2248++
					}
				}
				r.EncodeMapStart(yynn2248)
				yynn2248 = 0
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[0] {
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2248[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2251 := z.EncBinary()
					_ = yym2251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[1] {
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2248[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2254 := z.EncBinary()
					_ = yym2254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[2] {
					yy2256 := &x.ListMeta
					yym2257 := z.EncBinary()
					_ = yym2257
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2256) {
					} else {
						z.EncFallback(yy2256)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2258 := &x.ListMeta
					yym2259 := z.EncBinary()
					_ = yym2259
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2258) {
					} else {
						z.EncFallback(yy2258)
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2261 := z.EncBinary()
					_ = yym2261
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2262 := z.EncBinary()
					_ = yym2262
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2263 := z.DecBinary()
	_ = yym2263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2264 := r.ContainerType()
		if yyct2264 == codecSelferValueTypeMap1234 {
			yyl2264 := r.ReadMapStart()
			if yyl2264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2264, d)
			}
		} else if yyct2264 == codecSelferValueTypeArray1234 {
			yyl2264 := r.ReadArrayStart()
			if yyl2264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2265Slc
	var yyhl2265 bool = l >= 0
	for yyj2265 := 0; ; yyj2265++ {
		if yyhl2265 {
			if yyj2265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2265Slc = r.DecodeBytes(yys2265Slc, true, true)
		yys2265 := string(yys2265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2265 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2268 := &x.ListMeta
				yym2269 := z.DecBinary()
				_ = yym2269
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2268) {
				} else {
					z.DecFallback(yyv2268, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2270 := &x.Items
				yym2271 := z.DecBinary()
				_ = yym2271
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2270), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2265)
		} // end switch yys2265
	} // end for yyj2265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2272 int
	var yyb2272 bool
	var yyhl2272 bool = l >= 0
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2275 := &x.ListMeta
		yym2276 := z.DecBinary()
		_ = yym2276
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2275) {
		} else {
			z.DecFallback(yyv2275, false)
		}
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2277 := &x.Items
		yym2278 := z.DecBinary()
		_ = yym2278
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2277), d)
		}
	}
	for {
		yyj2272++
		if yyhl2272 {
			yyb2272 = yyj2272 > l
		} else {
			yyb2272 = r.CheckBreak()
		}
		if yyb2272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2279 := z.EncBinary()
		_ = yym2279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2280 := !z.EncBinary()
			yy2arr2280 := z.EncBasicHandle().StructToArray
			var yyq2280 [2]bool
			_, _, _ = yysep2280, yyq2280, yy2arr2280
			const yyr2280 bool = false
			yyq2280[0] = true
			yyq2280[1] = true
			var yynn2280 int
			if yyr2280 || yy2arr2280 {
				r.EncodeArrayStart(2)
			} else {
				yynn2280 = 0
				for _, b := range yyq2280 {
					if b {
						yynn2280++
					}
				}
				r.EncodeMapStart(yynn2280)
				yynn2280 = 0
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[0] {
					yy2282 := &x.ObjectMeta
					yy2282.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2280[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2283 := &x.ObjectMeta
					yy2283.CodecEncodeSelf(e)
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[1] {
					yy2285 := &x.Spec
					yy2285.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2280[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2286 := &x.Spec
					yy2286.CodecEncodeSelf(e)
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2287 := z.DecBinary()
	_ = yym2287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2288 := r.ContainerType()
		if yyct2288 == codecSelferValueTypeMap1234 {
			yyl2288 := r.ReadMapStart()
			if yyl2288 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2288, d)
			}
		} else if yyct2288 == codecSelferValueTypeArray1234 {
			yyl2288 := r.ReadArrayStart()
			if yyl2288 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2288, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2289Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2289Slc
	var yyhl2289 bool = l >= 0
	for yyj2289 := 0; ; yyj2289++ {
		if yyhl2289 {
			if yyj2289 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2289Slc = r.DecodeBytes(yys2289Slc, true, true)
		yys2289 := string(yys2289Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2289 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2290 := &x.ObjectMeta
				yyv2290.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2291 := &x.Spec
				yyv2291.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2289)
		} // end switch yys2289
	} // end for yyj2289
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2292 int
	var yyb2292 bool
	var yyhl2292 bool = l >= 0
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2293 := &x.ObjectMeta
		yyv2293.CodecDecodeSelf(d)
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2294 := &x.Spec
		yyv2294.CodecDecodeSelf(d)
	}
	for {
		yyj2292++
		if yyhl2292 {
			yyb2292 = yyj2292 > l
		} else {
			yyb2292 = r.CheckBreak()
		}
		if yyb2292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2295 := z.EncBinary()
		_ = yym2295
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2296 := !z.EncBinary()
			yy2arr2296 := z.EncBasicHandle().StructToArray
			var yyq2296 [4]bool
			_, _, _ = yysep2296, yyq2296, yy2arr2296
			const yyr2296 bool = false
			yyq2296[0] = x.Kind != ""
			yyq2296[1] = x.APIVersion != ""
			yyq2296[2] = true
			yyq2296[3] = true
			var yynn2296 int
			if yyr2296 || yy2arr2296 {
				r.EncodeArrayStart(4)
			} else {
				yynn2296 = 0
				for _, b := range yyq2296 {
					if b {
						yynn2296++
					}
				}
				r.EncodeMapStart(yynn2296)
				yynn2296 = 0
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[0] {
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2296[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2299 := z.EncBinary()
					_ = yym2299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[1] {
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2296[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2302 := z.EncBinary()
					_ = yym2302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[2] {
					yy2304 := &x.ObjectMeta
					yy2304.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2296[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2305 := &x.ObjectMeta
					yy2305.CodecEncodeSelf(e)
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[3] {
					yy2307 := &x.Template
					yy2307.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2296[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2308 := &x.Template
					yy2308.CodecEncodeSelf(e)
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2309 := z.DecBinary()
	_ = yym2309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2310 := r.ContainerType()
		if yyct2310 == codecSelferValueTypeMap1234 {
			yyl2310 := r.ReadMapStart()
			if yyl2310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2310, d)
			}
		} else if yyct2310 == codecSelferValueTypeArray1234 {
			yyl2310 := r.ReadArrayStart()
			if yyl2310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2311Slc
	var yyhl2311 bool = l >= 0
	for yyj2311 := 0; ; yyj2311++ {
		if yyhl2311 {
			if yyj2311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2311Slc = r.DecodeBytes(yys2311Slc, true, true)
		yys2311 := string(yys2311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2311 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2314 := &x.ObjectMeta
				yyv2314.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2315 := &x.Template
				yyv2315.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2311)
		} // end switch yys2311
	} // end for yyj2311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2316 int
	var yyb2316 bool
	var yyhl2316 bool = l >= 0
	yyj2316++
	if yyhl2316 {
		yyb2316 = yyj2316 > l
	} else {
		yyb2316 = r.CheckBreak()
	}
	if yyb2316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2316++
	if yyhl2316 {
		yyb2316 = yyj2316 > l
	} else {
		yyb2316 = r.CheckBreak()
	}
	if yyb2316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2316++
	if yyhl2316 {
		yyb2316 = yyj2316 > l
	} else {
		yyb2316 = r.CheckBreak()
	}
	if yyb2316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2319 := &x.ObjectMeta
		yyv2319.CodecDecodeSelf(d)
	}
	yyj2316++
	if yyhl2316 {
		yyb2316 = yyj2316 > l
	} else {
		yyb2316 = r.CheckBreak()
	}
	if yyb2316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2320 := &x.Template
		yyv2320.CodecDecodeSelf(d)
	}
	for {
		yyj2316++
		if yyhl2316 {
			yyb2316 = yyj2316 > l
		} else {
			yyb2316 = r.CheckBreak()
		}
		if yyb2316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2321 := z.EncBinary()
		_ = yym2321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2322 := !z.EncBinary()
			yy2arr2322 := z.EncBasicHandle().StructToArray
			var yyq2322 [4]bool
			_, _, _ = yysep2322, yyq2322, yy2arr2322
			const yyr2322 bool = false
			yyq2322[0] = x.Kind != ""
			yyq2322[1] = x.APIVersion != ""
			yyq2322[2] = true
			var yynn2322 int
			if yyr2322 || yy2arr2322 {
				r.EncodeArrayStart(4)
			} else {
				yynn2322 = 1
				for _, b := range yyq2322 {
					if b {
						yynn2322++
					}
				}
				r.EncodeMapStart(yynn2322)
				yynn2322 = 0
			}
			if yyr2322 || yy2arr2322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2322[0] {
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2322[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2325 := z.EncBinary()
					_ = yym2325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2322 || yy2arr2322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2322[1] {
					yym2327 := z.EncBinary()
					_ = yym2327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2322[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2328 := z.EncBinary()
					_ = yym2328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2322 || yy2arr2322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2322[2] {
					yy2330 := &x.ListMeta
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2330) {
					} else {
						z.EncFallback(yy2330)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2322[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2332 := &x.ListMeta
					yym2333 := z.EncBinary()
					_ = yym2333
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2332) {
					} else {
						z.EncFallback(yy2332)
					}
				}
			}
			if yyr2322 || yy2arr2322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2335 := z.EncBinary()
					_ = yym2335
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2336 := z.EncBinary()
					_ = yym2336
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2322 || yy2arr2322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2337 := z.DecBinary()
	_ = yym2337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2338 := r.ContainerType()
		if yyct2338 == codecSelferValueTypeMap1234 {
			yyl2338 := r.ReadMapStart()
			if yyl2338 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2338, d)
			}
		} else if yyct2338 == codecSelferValueTypeArray1234 {
			yyl2338 := r.ReadArrayStart()
			if yyl2338 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2338, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2339Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2339Slc
	var yyhl2339 bool = l >= 0
	for yyj2339 := 0; ; yyj2339++ {
		if yyhl2339 {
			if yyj2339 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2339Slc = r.DecodeBytes(yys2339Slc, true, true)
		yys2339 := string(yys2339Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2339 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2342 := &x.ListMeta
				yym2343 := z.DecBinary()
				_ = yym2343
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2342) {
				} else {
					z.DecFallback(yyv2342, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2344 := &x.Items
				yym2345 := z.DecBinary()
				_ = yym2345
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2344), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2339)
		} // end switch yys2339
	} // end for yyj2339
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2346 int
	var yyb2346 bool
	var yyhl2346 bool = l >= 0
	yyj2346++
	if yyhl2346 {
		yyb2346 = yyj2346 > l
	} else {
		yyb2346 = r.CheckBreak()
	}
	if yyb2346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2346++
	if yyhl2346 {
		yyb2346 = yyj2346 > l
	} else {
		yyb2346 = r.CheckBreak()
	}
	if yyb2346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2346++
	if yyhl2346 {
		yyb2346 = yyj2346 > l
	} else {
		yyb2346 = r.CheckBreak()
	}
	if yyb2346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2349 := &x.ListMeta
		yym2350 := z.DecBinary()
		_ = yym2350
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2349) {
		} else {
			z.DecFallback(yyv2349, false)
		}
	}
	yyj2346++
	if yyhl2346 {
		yyb2346 = yyj2346 > l
	} else {
		yyb2346 = r.CheckBreak()
	}
	if yyb2346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2351 := &x.Items
		yym2352 := z.DecBinary()
		_ = yym2352
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2351), d)
		}
	}
	for {
		yyj2346++
		if yyhl2346 {
			yyb2346 = yyj2346 > l
		} else {
			yyb2346 = r.CheckBreak()
		}
		if yyb2346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2353 := z.EncBinary()
		_ = yym2353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2354 := !z.EncBinary()
			yy2arr2354 := z.EncBasicHandle().StructToArray
			var yyq2354 [3]bool
			_, _, _ = yysep2354, yyq2354, yy2arr2354
			const yyr2354 bool = false
			yyq2354[0] = x.Replicas != nil
			yyq2354[1] = len(x.Selector) != 0
			yyq2354[2] = x.Template != nil
			var yynn2354 int
			if yyr2354 || yy2arr2354 {
				r.EncodeArrayStart(3)
			} else {
				yynn2354 = 0
				for _, b := range yyq2354 {
					if b {
						yynn2354++
					}
				}
				r.EncodeMapStart(yynn2354)
				yynn2354 = 0
			}
			if yyr2354 || yy2arr2354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2354[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2356 := *x.Replicas
						yym2357 := z.EncBinary()
						_ = yym2357
						if false {
						} else {
							r.EncodeInt(int64(yy2356))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2354[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2358 := *x.Replicas
						yym2359 := z.EncBinary()
						_ = yym2359
						if false {
						} else {
							r.EncodeInt(int64(yy2358))
						}
					}
				}
			}
			if yyr2354 || yy2arr2354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2354[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2361 := z.EncBinary()
						_ = yym2361
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2354[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2362 := z.EncBinary()
						_ = yym2362
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2354 || yy2arr2354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2354[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2354[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2354 || yy2arr2354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2364 := z.DecBinary()
	_ = yym2364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2365 := r.ContainerType()
		if yyct2365 == codecSelferValueTypeMap1234 {
			yyl2365 := r.ReadMapStart()
			if yyl2365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2365, d)
			}
		} else if yyct2365 == codecSelferValueTypeArray1234 {
			yyl2365 := r.ReadArrayStart()
			if yyl2365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2366Slc
	var yyhl2366 bool = l >= 0
	for yyj2366 := 0; ; yyj2366++ {
		if yyhl2366 {
			if yyj2366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2366Slc = r.DecodeBytes(yys2366Slc, true, true)
		yys2366 := string(yys2366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2366 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2368 := z.DecBinary()
				_ = yym2368
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2369 := &x.Selector
				yym2370 := z.DecBinary()
				_ = yym2370
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2369, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2366)
		} // end switch yys2366
	} // end for yyj2366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2372 int
	var yyb2372 bool
	var yyhl2372 bool = l >= 0
	yyj2372++
	if yyhl2372 {
		yyb2372 = yyj2372 > l
	} else {
		yyb2372 = r.CheckBreak()
	}
	if yyb2372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2374 := z.DecBinary()
		_ = yym2374
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2372++
	if yyhl2372 {
		yyb2372 = yyj2372 > l
	} else {
		yyb2372 = r.CheckBreak()
	}
	if yyb2372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2375 := &x.Selector
		yym2376 := z.DecBinary()
		_ = yym2376
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2375, false, d)
		}
	}
	yyj2372++
	if yyhl2372 {
		yyb2372 = yyj2372 > l
	} else {
		yyb2372 = r.CheckBreak()
	}
	if yyb2372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2372++
		if yyhl2372 {
			yyb2372 = yyj2372 > l
		} else {
			yyb2372 = r.CheckBreak()
		}
		if yyb2372 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2372-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2378 := z.EncBinary()
		_ = yym2378
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2379 := !z.EncBinary()
			yy2arr2379 := z.EncBasicHandle().StructToArray
			var yyq2379 [4]bool
			_, _, _ = yysep2379, yyq2379, yy2arr2379
			const yyr2379 bool = false
			yyq2379[1] = x.FullyLabeledReplicas != 0
			yyq2379[2] = x.ReadyReplicas != 0
			yyq2379[3] = x.ObservedGeneration != 0
			var yynn2379 int
			if yyr2379 || yy2arr2379 {
				r.EncodeArrayStart(4)
			} else {
				yynn2379 = 1
				for _, b := range yyq2379 {
					if b {
						yynn2379++
					}
				}
				r.EncodeMapStart(yynn2379)
				yynn2379 = 0
			}
			if yyr2379 || yy2arr2379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2381 := z.EncBinary()
				_ = yym2381
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2382 := z.EncBinary()
				_ = yym2382
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2379 || yy2arr2379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2379[1] {
					yym2384 := z.EncBinary()
					_ = yym2384
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2379[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2385 := z.EncBinary()
					_ = yym2385
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2379 || yy2arr2379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2379[2] {
					yym2387 := z.EncBinary()
					_ = yym2387
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2379[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2388 := z.EncBinary()
					_ = yym2388
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2379 || yy2arr2379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2379[3] {
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2379[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2379 || yy2arr2379 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2392 := z.DecBinary()
	_ = yym2392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2393 := r.ContainerType()
		if yyct2393 == codecSelferValueTypeMap1234 {
			yyl2393 := r.ReadMapStart()
			if yyl2393 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2393, d)
			}
		} else if yyct2393 == codecSelferValueTypeArray1234 {
			yyl2393 := r.ReadArrayStart()
			if yyl2393 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2394Slc
	var yyhl2394 bool = l >= 0
	for yyj2394 := 0; ; yyj2394++ {
		if yyhl2394 {
			if yyj2394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2394Slc = r.DecodeBytes(yys2394Slc, true, true)
		yys2394 := string(yys2394Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2394 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2394)
		} // end switch yys2394
	} // end for yyj2394
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2399 int
	var yyb2399 bool
	var yyhl2399 bool = l >= 0
	yyj2399++
	if yyhl2399 {
		yyb2399 = yyj2399 > l
	} else {
		yyb2399 = r.CheckBreak()
	}
	if yyb2399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2399++
	if yyhl2399 {
		yyb2399 = yyj2399 > l
	} else {
		yyb2399 = r.CheckBreak()
	}
	if yyb2399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2399++
	if yyhl2399 {
		yyb2399 = yyj2399 > l
	} else {
		yyb2399 = r.CheckBreak()
	}
	if yyb2399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2399++
	if yyhl2399 {
		yyb2399 = yyj2399 > l
	} else {
		yyb2399 = r.CheckBreak()
	}
	if yyb2399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2399++
		if yyhl2399 {
			yyb2399 = yyj2399 > l
		} else {
			yyb2399 = r.CheckBreak()
		}
		if yyb2399 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2399-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2404 := z.EncBinary()
		_ = yym2404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2405 := !z.EncBinary()
			yy2arr2405 := z.EncBasicHandle().StructToArray
			var yyq2405 [5]bool
			_, _, _ = yysep2405, yyq2405, yy2arr2405
			const yyr2405 bool = false
			yyq2405[0] = x.Kind != ""
			yyq2405[1] = x.APIVersion != ""
			yyq2405[2] = true
			yyq2405[3] = true
			yyq2405[4] = true
			var yynn2405 int
			if yyr2405 || yy2arr2405 {
				r.EncodeArrayStart(5)
			} else {
				yynn2405 = 0
				for _, b := range yyq2405 {
					if b {
						yynn2405++
					}
				}
				r.EncodeMapStart(yynn2405)
				yynn2405 = 0
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[0] {
					yym2407 := z.EncBinary()
					_ = yym2407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2405[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2408 := z.EncBinary()
					_ = yym2408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[1] {
					yym2410 := z.EncBinary()
					_ = yym2410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2405[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[2] {
					yy2413 := &x.ObjectMeta
					yy2413.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2405[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2414 := &x.ObjectMeta
					yy2414.CodecEncodeSelf(e)
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[3] {
					yy2416 := &x.Spec
					yy2416.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2405[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2417 := &x.Spec
					yy2417.CodecEncodeSelf(e)
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[4] {
					yy2419 := &x.Status
					yy2419.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2405[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2420 := &x.Status
					yy2420.CodecEncodeSelf(e)
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2421 := z.DecBinary()
	_ = yym2421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2422 := r.ContainerType()
		if yyct2422 == codecSelferValueTypeMap1234 {
			yyl2422 := r.ReadMapStart()
			if yyl2422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2422, d)
			}
		} else if yyct2422 == codecSelferValueTypeArray1234 {
			yyl2422 := r.ReadArrayStart()
			if yyl2422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2423Slc
	var yyhl2423 bool = l >= 0
	for yyj2423 := 0; ; yyj2423++ {
		if yyhl2423 {
			if yyj2423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2423Slc = r.DecodeBytes(yys2423Slc, true, true)
		yys2423 := string(yys2423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2423 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2426 := &x.ObjectMeta
				yyv2426.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2427 := &x.Spec
				yyv2427.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2428 := &x.Status
				yyv2428.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2423)
		} // end switch yys2423
	} // end for yyj2423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2429 int
	var yyb2429 bool
	var yyhl2429 bool = l >= 0
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2432 := &x.ObjectMeta
		yyv2432.CodecDecodeSelf(d)
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2433 := &x.Spec
		yyv2433.CodecDecodeSelf(d)
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2434 := &x.Status
		yyv2434.CodecDecodeSelf(d)
	}
	for {
		yyj2429++
		if yyhl2429 {
			yyb2429 = yyj2429 > l
		} else {
			yyb2429 = r.CheckBreak()
		}
		if yyb2429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2435 := z.EncBinary()
		_ = yym2435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2436 := !z.EncBinary()
			yy2arr2436 := z.EncBasicHandle().StructToArray
			var yyq2436 [4]bool
			_, _, _ = yysep2436, yyq2436, yy2arr2436
			const yyr2436 bool = false
			yyq2436[0] = x.Kind != ""
			yyq2436[1] = x.APIVersion != ""
			yyq2436[2] = true
			var yynn2436 int
			if yyr2436 || yy2arr2436 {
				r.EncodeArrayStart(4)
			} else {
				yynn2436 = 1
				for _, b := range yyq2436 {
					if b {
						yynn2436++
					}
				}
				r.EncodeMapStart(yynn2436)
				yynn2436 = 0
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[0] {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2436[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[1] {
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2436[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[2] {
					yy2444 := &x.ListMeta
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2444) {
					} else {
						z.EncFallback(yy2444)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2436[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2446 := &x.ListMeta
					yym2447 := z.EncBinary()
					_ = yym2447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2446) {
					} else {
						z.EncFallback(yy2446)
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2451 := z.DecBinary()
	_ = yym2451
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2452 := r.ContainerType()
		if yyct2452 == codecSelferValueTypeMap1234 {
			yyl2452 := r.ReadMapStart()
			if yyl2452 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2452, d)
			}
		} else if yyct2452 == codecSelferValueTypeArray1234 {
			yyl2452 := r.ReadArrayStart()
			if yyl2452 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2452, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2453Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2453Slc
	var yyhl2453 bool = l >= 0
	for yyj2453 := 0; ; yyj2453++ {
		if yyhl2453 {
			if yyj2453 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2453Slc = r.DecodeBytes(yys2453Slc, true, true)
		yys2453 := string(yys2453Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2453 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2456 := &x.ListMeta
				yym2457 := z.DecBinary()
				_ = yym2457
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2456) {
				} else {
					z.DecFallback(yyv2456, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2458 := &x.Items
				yym2459 := z.DecBinary()
				_ = yym2459
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2458), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2453)
		} // end switch yys2453
	} // end for yyj2453
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2460 int
	var yyb2460 bool
	var yyhl2460 bool = l >= 0
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2463 := &x.ListMeta
		yym2464 := z.DecBinary()
		_ = yym2464
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2463) {
		} else {
			z.DecFallback(yyv2463, false)
		}
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2465 := &x.Items
		yym2466 := z.DecBinary()
		_ = yym2466
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2465), d)
		}
	}
	for {
		yyj2460++
		if yyhl2460 {
			yyb2460 = yyj2460 > l
		} else {
			yyb2460 = r.CheckBreak()
		}
		if yyb2460 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2460-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2467 := z.EncBinary()
	_ = yym2467
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2468 := z.DecBinary()
	_ = yym2468
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2469 := z.EncBinary()
	_ = yym2469
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2470 := z.DecBinary()
	_ = yym2470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2471 := z.EncBinary()
		_ = yym2471
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2472 := !z.EncBinary()
			yy2arr2472 := z.EncBasicHandle().StructToArray
			var yyq2472 [1]bool
			_, _, _ = yysep2472, yyq2472, yy2arr2472
			const yyr2472 bool = false
			yyq2472[0] = true
			var yynn2472 int
			if yyr2472 || yy2arr2472 {
				r.EncodeArrayStart(1)
			} else {
				yynn2472 = 0
				for _, b := range yyq2472 {
					if b {
						yynn2472++
					}
				}
				r.EncodeMapStart(yynn2472)
				yynn2472 = 0
			}
			if yyr2472 || yy2arr2472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2472[0] {
					yy2474 := &x.LoadBalancer
					yy2474.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2472[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2475 := &x.LoadBalancer
					yy2475.CodecEncodeSelf(e)
				}
			}
			if yyr2472 || yy2arr2472 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2476 := z.DecBinary()
	_ = yym2476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2477 := r.ContainerType()
		if yyct2477 == codecSelferValueTypeMap1234 {
			yyl2477 := r.ReadMapStart()
			if yyl2477 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2477, d)
			}
		} else if yyct2477 == codecSelferValueTypeArray1234 {
			yyl2477 := r.ReadArrayStart()
			if yyl2477 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2477, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2478Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2478Slc
	var yyhl2478 bool = l >= 0
	for yyj2478 := 0; ; yyj2478++ {
		if yyhl2478 {
			if yyj2478 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2478Slc = r.DecodeBytes(yys2478Slc, true, true)
		yys2478 := string(yys2478Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2478 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2479 := &x.LoadBalancer
				yyv2479.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2478)
		} // end switch yys2478
	} // end for yyj2478
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2480 int
	var yyb2480 bool
	var yyhl2480 bool = l >= 0
	yyj2480++
	if yyhl2480 {
		yyb2480 = yyj2480 > l
	} else {
		yyb2480 = r.CheckBreak()
	}
	if yyb2480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2481 := &x.LoadBalancer
		yyv2481.CodecDecodeSelf(d)
	}
	for {
		yyj2480++
		if yyhl2480 {
			yyb2480 = yyj2480 > l
		} else {
			yyb2480 = r.CheckBreak()
		}
		if yyb2480 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2480-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2482 := z.EncBinary()
		_ = yym2482
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2483 := !z.EncBinary()
			yy2arr2483 := z.EncBasicHandle().StructToArray
			var yyq2483 [1]bool
			_, _, _ = yysep2483, yyq2483, yy2arr2483
			const yyr2483 bool = false
			yyq2483[0] = len(x.Ingress) != 0
			var yynn2483 int
			if yyr2483 || yy2arr2483 {
				r.EncodeArrayStart(1)
			} else {
				yynn2483 = 0
				for _, b := range yyq2483 {
					if b {
						yynn2483++
					}
				}
				r.EncodeMapStart(yynn2483)
				yynn2483 = 0
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2483[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2485 := z.EncBinary()
						_ = yym2485
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2483[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2486 := z.EncBinary()
						_ = yym2486
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2483 || yy2arr2483 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2487 := z.DecBinary()
	_ = yym2487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2488 := r.ContainerType()
		if yyct2488 == codecSelferValueTypeMap1234 {
			yyl2488 := r.ReadMapStart()
			if yyl2488 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2488, d)
			}
		} else if yyct2488 == codecSelferValueTypeArray1234 {
			yyl2488 := r.ReadArrayStart()
			if yyl2488 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2489Slc
	var yyhl2489 bool = l >= 0
	for yyj2489 := 0; ; yyj2489++ {
		if yyhl2489 {
			if yyj2489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2489Slc = r.DecodeBytes(yys2489Slc, true, true)
		yys2489 := string(yys2489Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2489 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2490 := &x.Ingress
				yym2491 := z.DecBinary()
				_ = yym2491
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2490), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2489)
		} // end switch yys2489
	} // end for yyj2489
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2492 int
	var yyb2492 bool
	var yyhl2492 bool = l >= 0
	yyj2492++
	if yyhl2492 {
		yyb2492 = yyj2492 > l
	} else {
		yyb2492 = r.CheckBreak()
	}
	if yyb2492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2493 := &x.Ingress
		yym2494 := z.DecBinary()
		_ = yym2494
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2493), d)
		}
	}
	for {
		yyj2492++
		if yyhl2492 {
			yyb2492 = yyj2492 > l
		} else {
			yyb2492 = r.CheckBreak()
		}
		if yyb2492 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2492-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2495 := z.EncBinary()
		_ = yym2495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2496 := !z.EncBinary()
			yy2arr2496 := z.EncBasicHandle().StructToArray
			var yyq2496 [2]bool
			_, _, _ = yysep2496, yyq2496, yy2arr2496
			const yyr2496 bool = false
			yyq2496[0] = x.IP != ""
			yyq2496[1] = x.Hostname != ""
			var yynn2496 int
			if yyr2496 || yy2arr2496 {
				r.EncodeArrayStart(2)
			} else {
				yynn2496 = 0
				for _, b := range yyq2496 {
					if b {
						yynn2496++
					}
				}
				r.EncodeMapStart(yynn2496)
				yynn2496 = 0
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2496[0] {
					yym2498 := z.EncBinary()
					_ = yym2498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2496[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2496[1] {
					yym2501 := z.EncBinary()
					_ = yym2501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2496[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2503 := z.DecBinary()
	_ = yym2503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2504 := r.ContainerType()
		if yyct2504 == codecSelferValueTypeMap1234 {
			yyl2504 := r.ReadMapStart()
			if yyl2504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2504, d)
			}
		} else if yyct2504 == codecSelferValueTypeArray1234 {
			yyl2504 := r.ReadArrayStart()
			if yyl2504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2505Slc
	var yyhl2505 bool = l >= 0
	for yyj2505 := 0; ; yyj2505++ {
		if yyhl2505 {
			if yyj2505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2505Slc = r.DecodeBytes(yys2505Slc, true, true)
		yys2505 := string(yys2505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2505 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2505)
		} // end switch yys2505
	} // end for yyj2505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2508 int
	var yyb2508 bool
	var yyhl2508 bool = l >= 0
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2508++
		if yyhl2508 {
			yyb2508 = yyj2508 > l
		} else {
			yyb2508 = r.CheckBreak()
		}
		if yyb2508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2511 := z.EncBinary()
		_ = yym2511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2512 := !z.EncBinary()
			yy2arr2512 := z.EncBasicHandle().StructToArray
			var yyq2512 [10]bool
			_, _, _ = yysep2512, yyq2512, yy2arr2512
			const yyr2512 bool = false
			yyq2512[1] = len(x.Selector) != 0
			yyq2512[2] = x.ClusterIP != ""
			yyq2512[3] = x.Type != ""
			yyq2512[4] = len(x.ExternalIPs) != 0
			yyq2512[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2512[6] = x.SessionAffinity != ""
			yyq2512[7] = x.LoadBalancerIP != ""
			yyq2512[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2512[9] = x.ExternalName != ""
			var yynn2512 int
			if yyr2512 || yy2arr2512 {
				r.EncodeArrayStart(10)
			} else {
				yynn2512 = 1
				for _, b := range yyq2512 {
					if b {
						yynn2512++
					}
				}
				r.EncodeMapStart(yynn2512)
				yynn2512 = 0
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2514 := z.EncBinary()
					_ = yym2514
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2515 := z.EncBinary()
					_ = yym2515
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2512[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2517 := z.EncBinary()
						_ = yym2517
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2512[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2518 := z.EncBinary()
						_ = yym2518
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2512[2] {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2512[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2512[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2512[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2512[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2524 := z.EncBinary()
						_ = yym2524
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2512[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2525 := z.EncBinary()
						_ = yym2525
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2512[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2527 := z.EncBinary()
						_ = yym2527
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2512[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2528 := z.EncBinary()
						_ = yym2528
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2512[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2512[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2512[7] {
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2512[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2512[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2534 := z.EncBinary()
						_ = yym2534
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2512[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2535 := z.EncBinary()
						_ = yym2535
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2512[9] {
					yym2537 := z.EncBinary()
					_ = yym2537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2512[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2512 || yy2arr2512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2539 := z.DecBinary()
	_ = yym2539
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2540 := r.ContainerType()
		if yyct2540 == codecSelferValueTypeMap1234 {
			yyl2540 := r.ReadMapStart()
			if yyl2540 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2540, d)
			}
		} else if yyct2540 == codecSelferValueTypeArray1234 {
			yyl2540 := r.ReadArrayStart()
			if yyl2540 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2540, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2541Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2541Slc
	var yyhl2541 bool = l >= 0
	for yyj2541 := 0; ; yyj2541++ {
		if yyhl2541 {
			if yyj2541 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2541Slc = r.DecodeBytes(yys2541Slc, true, true)
		yys2541 := string(yys2541Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2541 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2542 := &x.Ports
				yym2543 := z.DecBinary()
				_ = yym2543
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2542), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2544 := &x.Selector
				yym2545 := z.DecBinary()
				_ = yym2545
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2544, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2548 := &x.ExternalIPs
				yym2549 := z.DecBinary()
				_ = yym2549
				if false {
				} else {
					z.F.DecSliceStringX(yyv2548, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2550 := &x.DeprecatedPublicIPs
				yym2551 := z.DecBinary()
				_ = yym2551
				if false {
				} else {
					z.F.DecSliceStringX(yyv2550, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2554 := &x.LoadBalancerSourceRanges
				yym2555 := z.DecBinary()
				_ = yym2555
				if false {
				} else {
					z.F.DecSliceStringX(yyv2554, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2541)
		} // end switch yys2541
	} // end for yyj2541
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2557 int
	var yyb2557 bool
	var yyhl2557 bool = l >= 0
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2558 := &x.Ports
		yym2559 := z.DecBinary()
		_ = yym2559
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2558), d)
		}
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2560 := &x.Selector
		yym2561 := z.DecBinary()
		_ = yym2561
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2560, false, d)
		}
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2564 := &x.ExternalIPs
		yym2565 := z.DecBinary()
		_ = yym2565
		if false {
		} else {
			z.F.DecSliceStringX(yyv2564, false, d)
		}
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2566 := &x.DeprecatedPublicIPs
		yym2567 := z.DecBinary()
		_ = yym2567
		if false {
		} else {
			z.F.DecSliceStringX(yyv2566, false, d)
		}
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2570 := &x.LoadBalancerSourceRanges
		yym2571 := z.DecBinary()
		_ = yym2571
		if false {
		} else {
			z.F.DecSliceStringX(yyv2570, false, d)
		}
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2557++
		if yyhl2557 {
			yyb2557 = yyj2557 > l
		} else {
			yyb2557 = r.CheckBreak()
		}
		if yyb2557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2573 := z.EncBinary()
		_ = yym2573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2574 := !z.EncBinary()
			yy2arr2574 := z.EncBasicHandle().StructToArray
			var yyq2574 [5]bool
			_, _, _ = yysep2574, yyq2574, yy2arr2574
			const yyr2574 bool = false
			yyq2574[0] = x.Name != ""
			yyq2574[1] = x.Protocol != ""
			yyq2574[3] = true
			yyq2574[4] = x.NodePort != 0
			var yynn2574 int
			if yyr2574 || yy2arr2574 {
				r.EncodeArrayStart(5)
			} else {
				yynn2574 = 1
				for _, b := range yyq2574 {
					if b {
						yynn2574++
					}
				}
				r.EncodeMapStart(yynn2574)
				yynn2574 = 0
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[0] {
					yym2576 := z.EncBinary()
					_ = yym2576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2574[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2580 := z.EncBinary()
				_ = yym2580
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2581 := z.EncBinary()
				_ = yym2581
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[3] {
					yy2583 := &x.TargetPort
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2583) {
					} else if !yym2584 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2583)
					} else {
						z.EncFallback(yy2583)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2574[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2585 := &x.TargetPort
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2585) {
					} else if !yym2586 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2585)
					} else {
						z.EncFallback(yy2585)
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[4] {
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2574[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2590 := z.DecBinary()
	_ = yym2590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2591 := r.ContainerType()
		if yyct2591 == codecSelferValueTypeMap1234 {
			yyl2591 := r.ReadMapStart()
			if yyl2591 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2591, d)
			}
		} else if yyct2591 == codecSelferValueTypeArray1234 {
			yyl2591 := r.ReadArrayStart()
			if yyl2591 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2592Slc
	var yyhl2592 bool = l >= 0
	for yyj2592 := 0; ; yyj2592++ {
		if yyhl2592 {
			if yyj2592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2592Slc = r.DecodeBytes(yys2592Slc, true, true)
		yys2592 := string(yys2592Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2592 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2596 := &x.TargetPort
				yym2597 := z.DecBinary()
				_ = yym2597
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2596) {
				} else if !yym2597 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2596)
				} else {
					z.DecFallback(yyv2596, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2592)
		} // end switch yys2592
	} // end for yyj2592
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2599 int
	var yyb2599 bool
	var yyhl2599 bool = l >= 0
	yyj2599++
	if yyhl2599 {
		yyb2599 = yyj2599 > l
	} else {
		yyb2599 = r.CheckBreak()
	}
	if yyb2599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2599++
	if yyhl2599 {
		yyb2599 = yyj2599 > l
	} else {
		yyb2599 = r.CheckBreak()
	}
	if yyb2599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2599++
	if yyhl2599 {
		yyb2599 = yyj2599 > l
	} else {
		yyb2599 = r.CheckBreak()
	}
	if yyb2599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2599++
	if yyhl2599 {
		yyb2599 = yyj2599 > l
	} else {
		yyb2599 = r.CheckBreak()
	}
	if yyb2599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2603 := &x.TargetPort
		yym2604 := z.DecBinary()
		_ = yym2604
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2603) {
		} else if !yym2604 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2603)
		} else {
			z.DecFallback(yyv2603, false)
		}
	}
	yyj2599++
	if yyhl2599 {
		yyb2599 = yyj2599 > l
	} else {
		yyb2599 = r.CheckBreak()
	}
	if yyb2599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2599++
		if yyhl2599 {
			yyb2599 = yyj2599 > l
		} else {
			yyb2599 = r.CheckBreak()
		}
		if yyb2599 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2599-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2606 := z.EncBinary()
		_ = yym2606
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2607 := !z.EncBinary()
			yy2arr2607 := z.EncBasicHandle().StructToArray
			var yyq2607 [5]bool
			_, _, _ = yysep2607, yyq2607, yy2arr2607
			const yyr2607 bool = false
			yyq2607[0] = x.Kind != ""
			yyq2607[1] = x.APIVersion != ""
			yyq2607[2] = true
			yyq2607[3] = true
			yyq2607[4] = true
			var yynn2607 int
			if yyr2607 || yy2arr2607 {
				r.EncodeArrayStart(5)
			} else {
				yynn2607 = 0
				for _, b := range yyq2607 {
					if b {
						yynn2607++
					}
				}
				r.EncodeMapStart(yynn2607)
				yynn2607 = 0
			}
			if yyr2607 || yy2arr2607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2607[0] {
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2607[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2610 := z.EncBinary()
					_ = yym2610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2607 || yy2arr2607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2607[1] {
					yym2612 := z.EncBinary()
					_ = yym2612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2607[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2613 := z.EncBinary()
					_ = yym2613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2607 || yy2arr2607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2607[2] {
					yy2615 := &x.ObjectMeta
					yy2615.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2607[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2616 := &x.ObjectMeta
					yy2616.CodecEncodeSelf(e)
				}
			}
			if yyr2607 || yy2arr2607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2607[3] {
					yy2618 := &x.Spec
					yy2618.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2607[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2619 := &x.Spec
					yy2619.CodecEncodeSelf(e)
				}
			}
			if yyr2607 || yy2arr2607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2607[4] {
					yy2621 := &x.Status
					yy2621.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2607[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2622 := &x.Status
					yy2622.CodecEncodeSelf(e)
				}
			}
			if yyr2607 || yy2arr2607 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2623 := z.DecBinary()
	_ = yym2623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2624 := r.ContainerType()
		if yyct2624 == codecSelferValueTypeMap1234 {
			yyl2624 := r.ReadMapStart()
			if yyl2624 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2624, d)
			}
		} else if yyct2624 == codecSelferValueTypeArray1234 {
			yyl2624 := r.ReadArrayStart()
			if yyl2624 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2624, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2625Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2625Slc
	var yyhl2625 bool = l >= 0
	for yyj2625 := 0; ; yyj2625++ {
		if yyhl2625 {
			if yyj2625 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2625Slc = r.DecodeBytes(yys2625Slc, true, true)
		yys2625 := string(yys2625Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2625 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2628 := &x.ObjectMeta
				yyv2628.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2629 := &x.Spec
				yyv2629.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2630 := &x.Status
				yyv2630.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2625)
		} // end switch yys2625
	} // end for yyj2625
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2631 int
	var yyb2631 bool
	var yyhl2631 bool = l >= 0
	yyj2631++
	if yyhl2631 {
		yyb2631 = yyj2631 > l
	} else {
		yyb2631 = r.CheckBreak()
	}
	if yyb2631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2631++
	if yyhl2631 {
		yyb2631 = yyj2631 > l
	} else {
		yyb2631 = r.CheckBreak()
	}
	if yyb2631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2631++
	if yyhl2631 {
		yyb2631 = yyj2631 > l
	} else {
		yyb2631 = r.CheckBreak()
	}
	if yyb2631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2634 := &x.ObjectMeta
		yyv2634.CodecDecodeSelf(d)
	}
	yyj2631++
	if yyhl2631 {
		yyb2631 = yyj2631 > l
	} else {
		yyb2631 = r.CheckBreak()
	}
	if yyb2631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2635 := &x.Spec
		yyv2635.CodecDecodeSelf(d)
	}
	yyj2631++
	if yyhl2631 {
		yyb2631 = yyj2631 > l
	} else {
		yyb2631 = r.CheckBreak()
	}
	if yyb2631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2636 := &x.Status
		yyv2636.CodecDecodeSelf(d)
	}
	for {
		yyj2631++
		if yyhl2631 {
			yyb2631 = yyj2631 > l
		} else {
			yyb2631 = r.CheckBreak()
		}
		if yyb2631 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2631-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2637 := z.EncBinary()
		_ = yym2637
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2638 := !z.EncBinary()
			yy2arr2638 := z.EncBasicHandle().StructToArray
			var yyq2638 [4]bool
			_, _, _ = yysep2638, yyq2638, yy2arr2638
			const yyr2638 bool = false
			yyq2638[0] = x.Kind != ""
			yyq2638[1] = x.APIVersion != ""
			yyq2638[2] = true
			var yynn2638 int
			if yyr2638 || yy2arr2638 {
				r.EncodeArrayStart(4)
			} else {
				yynn2638 = 1
				for _, b := range yyq2638 {
					if b {
						yynn2638++
					}
				}
				r.EncodeMapStart(yynn2638)
				yynn2638 = 0
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2638[0] {
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2638[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2638[1] {
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2638[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2644 := z.EncBinary()
					_ = yym2644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2638[2] {
					yy2646 := &x.ListMeta
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2646) {
					} else {
						z.EncFallback(yy2646)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2638[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2648 := &x.ListMeta
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2648) {
					} else {
						z.EncFallback(yy2648)
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2653 := z.DecBinary()
	_ = yym2653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2654 := r.ContainerType()
		if yyct2654 == codecSelferValueTypeMap1234 {
			yyl2654 := r.ReadMapStart()
			if yyl2654 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2654, d)
			}
		} else if yyct2654 == codecSelferValueTypeArray1234 {
			yyl2654 := r.ReadArrayStart()
			if yyl2654 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2654, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2655Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2655Slc
	var yyhl2655 bool = l >= 0
	for yyj2655 := 0; ; yyj2655++ {
		if yyhl2655 {
			if yyj2655 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2655Slc = r.DecodeBytes(yys2655Slc, true, true)
		yys2655 := string(yys2655Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2655 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2658 := &x.ListMeta
				yym2659 := z.DecBinary()
				_ = yym2659
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2658) {
				} else {
					z.DecFallback(yyv2658, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2660 := &x.Items
				yym2661 := z.DecBinary()
				_ = yym2661
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2660), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2655)
		} // end switch yys2655
	} // end for yyj2655
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2662 int
	var yyb2662 bool
	var yyhl2662 bool = l >= 0
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2665 := &x.ListMeta
		yym2666 := z.DecBinary()
		_ = yym2666
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2665) {
		} else {
			z.DecFallback(yyv2665, false)
		}
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2667 := &x.Items
		yym2668 := z.DecBinary()
		_ = yym2668
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2667), d)
		}
	}
	for {
		yyj2662++
		if yyhl2662 {
			yyb2662 = yyj2662 > l
		} else {
			yyb2662 = r.CheckBreak()
		}
		if yyb2662 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2662-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2669 := z.EncBinary()
		_ = yym2669
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2670 := !z.EncBinary()
			yy2arr2670 := z.EncBasicHandle().StructToArray
			var yyq2670 [5]bool
			_, _, _ = yysep2670, yyq2670, yy2arr2670
			const yyr2670 bool = false
			yyq2670[0] = x.Kind != ""
			yyq2670[1] = x.APIVersion != ""
			yyq2670[2] = true
			yyq2670[3] = len(x.Secrets) != 0
			yyq2670[4] = len(x.ImagePullSecrets) != 0
			var yynn2670 int
			if yyr2670 || yy2arr2670 {
				r.EncodeArrayStart(5)
			} else {
				yynn2670 = 0
				for _, b := range yyq2670 {
					if b {
						yynn2670++
					}
				}
				r.EncodeMapStart(yynn2670)
				yynn2670 = 0
			}
			if yyr2670 || yy2arr2670 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2670[0] {
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2670[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2673 := z.EncBinary()
					_ = yym2673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2670 || yy2arr2670 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2670[1] {
					yym2675 := z.EncBinary()
					_ = yym2675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2670[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2670 || yy2arr2670 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2670[2] {
					yy2678 := &x.ObjectMeta
					yy2678.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2670[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2679 := &x.ObjectMeta
					yy2679.CodecEncodeSelf(e)
				}
			}
			if yyr2670 || yy2arr2670 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2670[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2681 := z.EncBinary()
						_ = yym2681
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2670[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2682 := z.EncBinary()
						_ = yym2682
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2670 || yy2arr2670 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2670[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2684 := z.EncBinary()
						_ = yym2684
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2670[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2685 := z.EncBinary()
						_ = yym2685
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2670 || yy2arr2670 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2686 := z.DecBinary()
	_ = yym2686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2687 := r.ContainerType()
		if yyct2687 == codecSelferValueTypeMap1234 {
			yyl2687 := r.ReadMapStart()
			if yyl2687 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2687, d)
			}
		} else if yyct2687 == codecSelferValueTypeArray1234 {
			yyl2687 := r.ReadArrayStart()
			if yyl2687 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2687, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2688Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2688Slc
	var yyhl2688 bool = l >= 0
	for yyj2688 := 0; ; yyj2688++ {
		if yyhl2688 {
			if yyj2688 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2688Slc = r.DecodeBytes(yys2688Slc, true, true)
		yys2688 := string(yys2688Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2688 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2691 := &x.ObjectMeta
				yyv2691.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2692 := &x.Secrets
				yym2693 := z.DecBinary()
				_ = yym2693
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2692), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2694 := &x.ImagePullSecrets
				yym2695 := z.DecBinary()
				_ = yym2695
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2694), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2688)
		} // end switch yys2688
	} // end for yyj2688
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2696 int
	var yyb2696 bool
	var yyhl2696 bool = l >= 0
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2699 := &x.ObjectMeta
		yyv2699.CodecDecodeSelf(d)
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2700 := &x.Secrets
		yym2701 := z.DecBinary()
		_ = yym2701
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2700), d)
		}
	}
	yyj2696++
	if yyhl2696 {
		yyb2696 = yyj2696 > l
	} else {
		yyb2696 = r.CheckBreak()
	}
	if yyb2696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2702 := &x.ImagePullSecrets
		yym2703 := z.DecBinary()
		_ = yym2703
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2702), d)
		}
	}
	for {
		yyj2696++
		if yyhl2696 {
			yyb2696 = yyj2696 > l
		} else {
			yyb2696 = r.CheckBreak()
		}
		if yyb2696 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2696-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2704 := z.EncBinary()
		_ = yym2704
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2705 := !z.EncBinary()
			yy2arr2705 := z.EncBasicHandle().StructToArray
			var yyq2705 [4]bool
			_, _, _ = yysep2705, yyq2705, yy2arr2705
			const yyr2705 bool = false
			yyq2705[0] = x.Kind != ""
			yyq2705[1] = x.APIVersion != ""
			yyq2705[2] = true
			var yynn2705 int
			if yyr2705 || yy2arr2705 {
				r.EncodeArrayStart(4)
			} else {
				yynn2705 = 1
				for _, b := range yyq2705 {
					if b {
						yynn2705++
					}
				}
				r.EncodeMapStart(yynn2705)
				yynn2705 = 0
			}
			if yyr2705 || yy2arr2705 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2705[0] {
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2705[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2708 := z.EncBinary()
					_ = yym2708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2705 || yy2arr2705 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2705[1] {
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2705[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2705 || yy2arr2705 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2705[2] {
					yy2713 := &x.ListMeta
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2713) {
					} else {
						z.EncFallback(yy2713)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2705[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2715 := &x.ListMeta
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2715) {
					} else {
						z.EncFallback(yy2715)
					}
				}
			}
			if yyr2705 || yy2arr2705 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2705 || yy2arr2705 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2720 := z.DecBinary()
	_ = yym2720
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2721 := r.ContainerType()
		if yyct2721 == codecSelferValueTypeMap1234 {
			yyl2721 := r.ReadMapStart()
			if yyl2721 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2721, d)
			}
		} else if yyct2721 == codecSelferValueTypeArray1234 {
			yyl2721 := r.ReadArrayStart()
			if yyl2721 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2721, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2722Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2722Slc
	var yyhl2722 bool = l >= 0
	for yyj2722 := 0; ; yyj2722++ {
		if yyhl2722 {
			if yyj2722 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2722Slc = r.DecodeBytes(yys2722Slc, true, true)
		yys2722 := string(yys2722Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2722 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2725 := &x.ListMeta
				yym2726 := z.DecBinary()
				_ = yym2726
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2725) {
				} else {
					z.DecFallback(yyv2725, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2727 := &x.Items
				yym2728 := z.DecBinary()
				_ = yym2728
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2727), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2722)
		} // end switch yys2722
	} // end for yyj2722
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2729 int
	var yyb2729 bool
	var yyhl2729 bool = l >= 0
	yyj2729++
	if yyhl2729 {
		yyb2729 = yyj2729 > l
	} else {
		yyb2729 = r.CheckBreak()
	}
	if yyb2729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2729++
	if yyhl2729 {
		yyb2729 = yyj2729 > l
	} else {
		yyb2729 = r.CheckBreak()
	}
	if yyb2729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2729++
	if yyhl2729 {
		yyb2729 = yyj2729 > l
	} else {
		yyb2729 = r.CheckBreak()
	}
	if yyb2729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2732 := &x.ListMeta
		yym2733 := z.DecBinary()
		_ = yym2733
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2732) {
		} else {
			z.DecFallback(yyv2732, false)
		}
	}
	yyj2729++
	if yyhl2729 {
		yyb2729 = yyj2729 > l
	} else {
		yyb2729 = r.CheckBreak()
	}
	if yyb2729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2734 := &x.Items
		yym2735 := z.DecBinary()
		_ = yym2735
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2734), d)
		}
	}
	for {
		yyj2729++
		if yyhl2729 {
			yyb2729 = yyj2729 > l
		} else {
			yyb2729 = r.CheckBreak()
		}
		if yyb2729 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2729-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2736 := z.EncBinary()
		_ = yym2736
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2737 := !z.EncBinary()
			yy2arr2737 := z.EncBasicHandle().StructToArray
			var yyq2737 [4]bool
			_, _, _ = yysep2737, yyq2737, yy2arr2737
			const yyr2737 bool = false
			yyq2737[0] = x.Kind != ""
			yyq2737[1] = x.APIVersion != ""
			yyq2737[2] = true
			var yynn2737 int
			if yyr2737 || yy2arr2737 {
				r.EncodeArrayStart(4)
			} else {
				yynn2737 = 1
				for _, b := range yyq2737 {
					if b {
						yynn2737++
					}
				}
				r.EncodeMapStart(yynn2737)
				yynn2737 = 0
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2737[0] {
					yym2739 := z.EncBinary()
					_ = yym2739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2737[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2737[1] {
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2737[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2737[2] {
					yy2745 := &x.ObjectMeta
					yy2745.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2737[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2746 := &x.ObjectMeta
					yy2746.CodecEncodeSelf(e)
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2737 || yy2arr2737 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2750 := z.DecBinary()
	_ = yym2750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2751 := r.ContainerType()
		if yyct2751 == codecSelferValueTypeMap1234 {
			yyl2751 := r.ReadMapStart()
			if yyl2751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2751, d)
			}
		} else if yyct2751 == codecSelferValueTypeArray1234 {
			yyl2751 := r.ReadArrayStart()
			if yyl2751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2752Slc
	var yyhl2752 bool = l >= 0
	for yyj2752 := 0; ; yyj2752++ {
		if yyhl2752 {
			if yyj2752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2752Slc = r.DecodeBytes(yys2752Slc, true, true)
		yys2752 := string(yys2752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2752 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2755 := &x.ObjectMeta
				yyv2755.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2756 := &x.Subsets
				yym2757 := z.DecBinary()
				_ = yym2757
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2756), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2752)
		} // end switch yys2752
	} // end for yyj2752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2758 int
	var yyb2758 bool
	var yyhl2758 bool = l >= 0
	yyj2758++
	if yyhl2758 {
		yyb2758 = yyj2758 > l
	} else {
		yyb2758 = r.CheckBreak()
	}
	if yyb2758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2758++
	if yyhl2758 {
		yyb2758 = yyj2758 > l
	} else {
		yyb2758 = r.CheckBreak()
	}
	if yyb2758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2758++
	if yyhl2758 {
		yyb2758 = yyj2758 > l
	} else {
		yyb2758 = r.CheckBreak()
	}
	if yyb2758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2761 := &x.ObjectMeta
		yyv2761.CodecDecodeSelf(d)
	}
	yyj2758++
	if yyhl2758 {
		yyb2758 = yyj2758 > l
	} else {
		yyb2758 = r.CheckBreak()
	}
	if yyb2758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2762 := &x.Subsets
		yym2763 := z.DecBinary()
		_ = yym2763
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2762), d)
		}
	}
	for {
		yyj2758++
		if yyhl2758 {
			yyb2758 = yyj2758 > l
		} else {
			yyb2758 = r.CheckBreak()
		}
		if yyb2758 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2758-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2764 := z.EncBinary()
		_ = yym2764
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2765 := !z.EncBinary()
			yy2arr2765 := z.EncBasicHandle().StructToArray
			var yyq2765 [3]bool
			_, _, _ = yysep2765, yyq2765, yy2arr2765
			const yyr2765 bool = false
			yyq2765[0] = len(x.Addresses) != 0
			yyq2765[1] = len(x.NotReadyAddresses) != 0
			yyq2765[2] = len(x.Ports) != 0
			var yynn2765 int
			if yyr2765 || yy2arr2765 {
				r.EncodeArrayStart(3)
			} else {
				yynn2765 = 0
				for _, b := range yyq2765 {
					if b {
						yynn2765++
					}
				}
				r.EncodeMapStart(yynn2765)
				yynn2765 = 0
			}
			if yyr2765 || yy2arr2765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2765[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2767 := z.EncBinary()
						_ = yym2767
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2765[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2768 := z.EncBinary()
						_ = yym2768
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2765 || yy2arr2765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2765[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2770 := z.EncBinary()
						_ = yym2770
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2765[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2771 := z.EncBinary()
						_ = yym2771
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2765 || yy2arr2765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2765[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2773 := z.EncBinary()
						_ = yym2773
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2765[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2774 := z.EncBinary()
						_ = yym2774
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2765 || yy2arr2765 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2775 := z.DecBinary()
	_ = yym2775
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2776 := r.ContainerType()
		if yyct2776 == codecSelferValueTypeMap1234 {
			yyl2776 := r.ReadMapStart()
			if yyl2776 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2776, d)
			}
		} else if yyct2776 == codecSelferValueTypeArray1234 {
			yyl2776 := r.ReadArrayStart()
			if yyl2776 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2776, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2777Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2777Slc
	var yyhl2777 bool = l >= 0
	for yyj2777 := 0; ; yyj2777++ {
		if yyhl2777 {
			if yyj2777 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2777Slc = r.DecodeBytes(yys2777Slc, true, true)
		yys2777 := string(yys2777Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2777 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2778 := &x.Addresses
				yym2779 := z.DecBinary()
				_ = yym2779
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2778), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2780 := &x.NotReadyAddresses
				yym2781 := z.DecBinary()
				_ = yym2781
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2780), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2782 := &x.Ports
				yym2783 := z.DecBinary()
				_ = yym2783
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2782), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2777)
		} // end switch yys2777
	} // end for yyj2777
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2784 int
	var yyb2784 bool
	var yyhl2784 bool = l >= 0
	yyj2784++
	if yyhl2784 {
		yyb2784 = yyj2784 > l
	} else {
		yyb2784 = r.CheckBreak()
	}
	if yyb2784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2785 := &x.Addresses
		yym2786 := z.DecBinary()
		_ = yym2786
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2785), d)
		}
	}
	yyj2784++
	if yyhl2784 {
		yyb2784 = yyj2784 > l
	} else {
		yyb2784 = r.CheckBreak()
	}
	if yyb2784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2787 := &x.NotReadyAddresses
		yym2788 := z.DecBinary()
		_ = yym2788
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2787), d)
		}
	}
	yyj2784++
	if yyhl2784 {
		yyb2784 = yyj2784 > l
	} else {
		yyb2784 = r.CheckBreak()
	}
	if yyb2784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2789 := &x.Ports
		yym2790 := z.DecBinary()
		_ = yym2790
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2789), d)
		}
	}
	for {
		yyj2784++
		if yyhl2784 {
			yyb2784 = yyj2784 > l
		} else {
			yyb2784 = r.CheckBreak()
		}
		if yyb2784 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2784-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2791 := z.EncBinary()
		_ = yym2791
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2792 := !z.EncBinary()
			yy2arr2792 := z.EncBasicHandle().StructToArray
			var yyq2792 [4]bool
			_, _, _ = yysep2792, yyq2792, yy2arr2792
			const yyr2792 bool = false
			yyq2792[1] = x.Hostname != ""
			yyq2792[2] = x.NodeName != nil
			yyq2792[3] = x.TargetRef != nil
			var yynn2792 int
			if yyr2792 || yy2arr2792 {
				r.EncodeArrayStart(4)
			} else {
				yynn2792 = 1
				for _, b := range yyq2792 {
					if b {
						yynn2792++
					}
				}
				r.EncodeMapStart(yynn2792)
				yynn2792 = 0
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2794 := z.EncBinary()
				_ = yym2794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2795 := z.EncBinary()
				_ = yym2795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2792[1] {
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2792[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2792[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2800 := *x.NodeName
						yym2801 := z.EncBinary()
						_ = yym2801
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2800))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2792[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2802 := *x.NodeName
						yym2803 := z.EncBinary()
						_ = yym2803
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2802))
						}
					}
				}
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2792[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2792[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2792 || yy2arr2792 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2805 := z.DecBinary()
	_ = yym2805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2806 := r.ContainerType()
		if yyct2806 == codecSelferValueTypeMap1234 {
			yyl2806 := r.ReadMapStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2806, d)
			}
		} else if yyct2806 == codecSelferValueTypeArray1234 {
			yyl2806 := r.ReadArrayStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2807Slc
	var yyhl2807 bool = l >= 0
	for yyj2807 := 0; ; yyj2807++ {
		if yyhl2807 {
			if yyj2807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2807Slc = r.DecodeBytes(yys2807Slc, true, true)
		yys2807 := string(yys2807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2807 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2811 := z.DecBinary()
				_ = yym2811
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2807)
		} // end switch yys2807
	} // end for yyj2807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2813 int
	var yyb2813 bool
	var yyhl2813 bool = l >= 0
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2817 := z.DecBinary()
		_ = yym2817
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2813++
		if yyhl2813 {
			yyb2813 = yyj2813 > l
		} else {
			yyb2813 = r.CheckBreak()
		}
		if yyb2813 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2813-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2819 := z.EncBinary()
		_ = yym2819
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2820 := !z.EncBinary()
			yy2arr2820 := z.EncBasicHandle().StructToArray
			var yyq2820 [3]bool
			_, _, _ = yysep2820, yyq2820, yy2arr2820
			const yyr2820 bool = false
			yyq2820[0] = x.Name != ""
			yyq2820[2] = x.Protocol != ""
			var yynn2820 int
			if yyr2820 || yy2arr2820 {
				r.EncodeArrayStart(3)
			} else {
				yynn2820 = 1
				for _, b := range yyq2820 {
					if b {
						yynn2820++
					}
				}
				r.EncodeMapStart(yynn2820)
				yynn2820 = 0
			}
			if yyr2820 || yy2arr2820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2820[0] {
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2820[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2823 := z.EncBinary()
					_ = yym2823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2820 || yy2arr2820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2825 := z.EncBinary()
				_ = yym2825
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2826 := z.EncBinary()
				_ = yym2826
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2820 || yy2arr2820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2820[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2820[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2820 || yy2arr2820 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2828 := z.DecBinary()
	_ = yym2828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2829 := r.ContainerType()
		if yyct2829 == codecSelferValueTypeMap1234 {
			yyl2829 := r.ReadMapStart()
			if yyl2829 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2829, d)
			}
		} else if yyct2829 == codecSelferValueTypeArray1234 {
			yyl2829 := r.ReadArrayStart()
			if yyl2829 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2830Slc
	var yyhl2830 bool = l >= 0
	for yyj2830 := 0; ; yyj2830++ {
		if yyhl2830 {
			if yyj2830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2830Slc = r.DecodeBytes(yys2830Slc, true, true)
		yys2830 := string(yys2830Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2830 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2830)
		} // end switch yys2830
	} // end for yyj2830
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2834 int
	var yyb2834 bool
	var yyhl2834 bool = l >= 0
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2834++
		if yyhl2834 {
			yyb2834 = yyj2834 > l
		} else {
			yyb2834 = r.CheckBreak()
		}
		if yyb2834 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2834-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2838 := z.EncBinary()
		_ = yym2838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2839 := !z.EncBinary()
			yy2arr2839 := z.EncBasicHandle().StructToArray
			var yyq2839 [4]bool
			_, _, _ = yysep2839, yyq2839, yy2arr2839
			const yyr2839 bool = false
			yyq2839[0] = x.Kind != ""
			yyq2839[1] = x.APIVersion != ""
			yyq2839[2] = true
			var yynn2839 int
			if yyr2839 || yy2arr2839 {
				r.EncodeArrayStart(4)
			} else {
				yynn2839 = 1
				for _, b := range yyq2839 {
					if b {
						yynn2839++
					}
				}
				r.EncodeMapStart(yynn2839)
				yynn2839 = 0
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[0] {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[1] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[2] {
					yy2847 := &x.ListMeta
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2847) {
					} else {
						z.EncFallback(yy2847)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2839[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2849 := &x.ListMeta
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2849) {
					} else {
						z.EncFallback(yy2849)
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2854 := z.DecBinary()
	_ = yym2854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2855 := r.ContainerType()
		if yyct2855 == codecSelferValueTypeMap1234 {
			yyl2855 := r.ReadMapStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2855, d)
			}
		} else if yyct2855 == codecSelferValueTypeArray1234 {
			yyl2855 := r.ReadArrayStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2856Slc
	var yyhl2856 bool = l >= 0
	for yyj2856 := 0; ; yyj2856++ {
		if yyhl2856 {
			if yyj2856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2856Slc = r.DecodeBytes(yys2856Slc, true, true)
		yys2856 := string(yys2856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2856 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2859 := &x.ListMeta
				yym2860 := z.DecBinary()
				_ = yym2860
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2859) {
				} else {
					z.DecFallback(yyv2859, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2861 := &x.Items
				yym2862 := z.DecBinary()
				_ = yym2862
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2861), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2856)
		} // end switch yys2856
	} // end for yyj2856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2863 int
	var yyb2863 bool
	var yyhl2863 bool = l >= 0
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2866 := &x.ListMeta
		yym2867 := z.DecBinary()
		_ = yym2867
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2866) {
		} else {
			z.DecFallback(yyv2866, false)
		}
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2868 := &x.Items
		yym2869 := z.DecBinary()
		_ = yym2869
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2868), d)
		}
	}
	for {
		yyj2863++
		if yyhl2863 {
			yyb2863 = yyj2863 > l
		} else {
			yyb2863 = r.CheckBreak()
		}
		if yyb2863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2870 := z.EncBinary()
		_ = yym2870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2871 := !z.EncBinary()
			yy2arr2871 := z.EncBasicHandle().StructToArray
			var yyq2871 [4]bool
			_, _, _ = yysep2871, yyq2871, yy2arr2871
			const yyr2871 bool = false
			yyq2871[0] = x.PodCIDR != ""
			yyq2871[1] = x.ExternalID != ""
			yyq2871[2] = x.ProviderID != ""
			yyq2871[3] = x.Unschedulable != false
			var yynn2871 int
			if yyr2871 || yy2arr2871 {
				r.EncodeArrayStart(4)
			} else {
				yynn2871 = 0
				for _, b := range yyq2871 {
					if b {
						yynn2871++
					}
				}
				r.EncodeMapStart(yynn2871)
				yynn2871 = 0
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[0] {
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2871[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2874 := z.EncBinary()
					_ = yym2874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[1] {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2871[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[2] {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2871[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[3] {
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2871[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2884 := z.DecBinary()
	_ = yym2884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2885 := r.ContainerType()
		if yyct2885 == codecSelferValueTypeMap1234 {
			yyl2885 := r.ReadMapStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2885, d)
			}
		} else if yyct2885 == codecSelferValueTypeArray1234 {
			yyl2885 := r.ReadArrayStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2886Slc
	var yyhl2886 bool = l >= 0
	for yyj2886 := 0; ; yyj2886++ {
		if yyhl2886 {
			if yyj2886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2886Slc = r.DecodeBytes(yys2886Slc, true, true)
		yys2886 := string(yys2886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2886 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2886)
		} // end switch yys2886
	} // end for yyj2886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2891 int
	var yyb2891 bool
	var yyhl2891 bool = l >= 0
	yyj2891++
	if yyhl2891 {
		yyb2891 = yyj2891 > l
	} else {
		yyb2891 = r.CheckBreak()
	}
	if yyb2891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2891++
	if yyhl2891 {
		yyb2891 = yyj2891 > l
	} else {
		yyb2891 = r.CheckBreak()
	}
	if yyb2891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2891++
	if yyhl2891 {
		yyb2891 = yyj2891 > l
	} else {
		yyb2891 = r.CheckBreak()
	}
	if yyb2891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2891++
	if yyhl2891 {
		yyb2891 = yyj2891 > l
	} else {
		yyb2891 = r.CheckBreak()
	}
	if yyb2891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2891++
		if yyhl2891 {
			yyb2891 = yyj2891 > l
		} else {
			yyb2891 = r.CheckBreak()
		}
		if yyb2891 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2891-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2896 := z.EncBinary()
		_ = yym2896
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2897 := !z.EncBinary()
			yy2arr2897 := z.EncBasicHandle().StructToArray
			var yyq2897 [1]bool
			_, _, _ = yysep2897, yyq2897, yy2arr2897
			const yyr2897 bool = false
			var yynn2897 int
			if yyr2897 || yy2arr2897 {
				r.EncodeArrayStart(1)
			} else {
				yynn2897 = 1
				for _, b := range yyq2897 {
					if b {
						yynn2897++
					}
				}
				r.EncodeMapStart(yynn2897)
				yynn2897 = 0
			}
			if yyr2897 || yy2arr2897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2899 := z.EncBinary()
				_ = yym2899
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2900 := z.EncBinary()
				_ = yym2900
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2897 || yy2arr2897 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2901 := z.DecBinary()
	_ = yym2901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2902 := r.ContainerType()
		if yyct2902 == codecSelferValueTypeMap1234 {
			yyl2902 := r.ReadMapStart()
			if yyl2902 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2902, d)
			}
		} else if yyct2902 == codecSelferValueTypeArray1234 {
			yyl2902 := r.ReadArrayStart()
			if yyl2902 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2903Slc
	var yyhl2903 bool = l >= 0
	for yyj2903 := 0; ; yyj2903++ {
		if yyhl2903 {
			if yyj2903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2903Slc = r.DecodeBytes(yys2903Slc, true, true)
		yys2903 := string(yys2903Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2903 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2903)
		} // end switch yys2903
	} // end for yyj2903
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2905 int
	var yyb2905 bool
	var yyhl2905 bool = l >= 0
	yyj2905++
	if yyhl2905 {
		yyb2905 = yyj2905 > l
	} else {
		yyb2905 = r.CheckBreak()
	}
	if yyb2905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2905++
		if yyhl2905 {
			yyb2905 = yyj2905 > l
		} else {
			yyb2905 = r.CheckBreak()
		}
		if yyb2905 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2905-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2907 := z.EncBinary()
		_ = yym2907
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2908 := !z.EncBinary()
			yy2arr2908 := z.EncBasicHandle().StructToArray
			var yyq2908 [1]bool
			_, _, _ = yysep2908, yyq2908, yy2arr2908
			const yyr2908 bool = false
			yyq2908[0] = true
			var yynn2908 int
			if yyr2908 || yy2arr2908 {
				r.EncodeArrayStart(1)
			} else {
				yynn2908 = 0
				for _, b := range yyq2908 {
					if b {
						yynn2908++
					}
				}
				r.EncodeMapStart(yynn2908)
				yynn2908 = 0
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[0] {
					yy2910 := &x.KubeletEndpoint
					yy2910.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2908[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2911 := &x.KubeletEndpoint
					yy2911.CodecEncodeSelf(e)
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2912 := z.DecBinary()
	_ = yym2912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2913 := r.ContainerType()
		if yyct2913 == codecSelferValueTypeMap1234 {
			yyl2913 := r.ReadMapStart()
			if yyl2913 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2913, d)
			}
		} else if yyct2913 == codecSelferValueTypeArray1234 {
			yyl2913 := r.ReadArrayStart()
			if yyl2913 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2914Slc
	var yyhl2914 bool = l >= 0
	for yyj2914 := 0; ; yyj2914++ {
		if yyhl2914 {
			if yyj2914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2914Slc = r.DecodeBytes(yys2914Slc, true, true)
		yys2914 := string(yys2914Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2914 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2915 := &x.KubeletEndpoint
				yyv2915.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2914)
		} // end switch yys2914
	} // end for yyj2914
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2916 int
	var yyb2916 bool
	var yyhl2916 bool = l >= 0
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2917 := &x.KubeletEndpoint
		yyv2917.CodecDecodeSelf(d)
	}
	for {
		yyj2916++
		if yyhl2916 {
			yyb2916 = yyj2916 > l
		} else {
			yyb2916 = r.CheckBreak()
		}
		if yyb2916 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2916-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2918 := z.EncBinary()
		_ = yym2918
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2919 := !z.EncBinary()
			yy2arr2919 := z.EncBasicHandle().StructToArray
			var yyq2919 [10]bool
			_, _, _ = yysep2919, yyq2919, yy2arr2919
			const yyr2919 bool = false
			var yynn2919 int
			if yyr2919 || yy2arr2919 {
				r.EncodeArrayStart(10)
			} else {
				yynn2919 = 10
				for _, b := range yyq2919 {
					if b {
						yynn2919++
					}
				}
				r.EncodeMapStart(yynn2919)
				yynn2919 = 0
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2921 := z.EncBinary()
				_ = yym2921
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2922 := z.EncBinary()
				_ = yym2922
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2924 := z.EncBinary()
				_ = yym2924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2925 := z.EncBinary()
				_ = yym2925
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2927 := z.EncBinary()
				_ = yym2927
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2928 := z.EncBinary()
				_ = yym2928
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2930 := z.EncBinary()
				_ = yym2930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2931 := z.EncBinary()
				_ = yym2931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2933 := z.EncBinary()
				_ = yym2933
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2934 := z.EncBinary()
				_ = yym2934
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2936 := z.EncBinary()
				_ = yym2936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2937 := z.EncBinary()
				_ = yym2937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2939 := z.EncBinary()
				_ = yym2939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2940 := z.EncBinary()
				_ = yym2940
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2942 := z.EncBinary()
				_ = yym2942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2943 := z.EncBinary()
				_ = yym2943
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2945 := z.EncBinary()
				_ = yym2945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2946 := z.EncBinary()
				_ = yym2946
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2948 := z.EncBinary()
				_ = yym2948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2949 := z.EncBinary()
				_ = yym2949
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2950 := z.DecBinary()
	_ = yym2950
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2951 := r.ContainerType()
		if yyct2951 == codecSelferValueTypeMap1234 {
			yyl2951 := r.ReadMapStart()
			if yyl2951 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2951, d)
			}
		} else if yyct2951 == codecSelferValueTypeArray1234 {
			yyl2951 := r.ReadArrayStart()
			if yyl2951 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2951, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2952Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2952Slc
	var yyhl2952 bool = l >= 0
	for yyj2952 := 0; ; yyj2952++ {
		if yyhl2952 {
			if yyj2952 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2952Slc = r.DecodeBytes(yys2952Slc, true, true)
		yys2952 := string(yys2952Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2952 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2952)
		} // end switch yys2952
	} // end for yyj2952
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2963 int
	var yyb2963 bool
	var yyhl2963 bool = l >= 0
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2963++
	if yyhl2963 {
		yyb2963 = yyj2963 > l
	} else {
		yyb2963 = r.CheckBreak()
	}
	if yyb2963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2963++
		if yyhl2963 {
			yyb2963 = yyj2963 > l
		} else {
			yyb2963 = r.CheckBreak()
		}
		if yyb2963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2974 := z.EncBinary()
		_ = yym2974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2975 := !z.EncBinary()
			yy2arr2975 := z.EncBasicHandle().StructToArray
			var yyq2975 [10]bool
			_, _, _ = yysep2975, yyq2975, yy2arr2975
			const yyr2975 bool = false
			yyq2975[0] = len(x.Capacity) != 0
			yyq2975[1] = len(x.Allocatable) != 0
			yyq2975[2] = x.Phase != ""
			yyq2975[3] = len(x.Conditions) != 0
			yyq2975[4] = len(x.Addresses) != 0
			yyq2975[5] = true
			yyq2975[6] = true
			yyq2975[7] = len(x.Images) != 0
			yyq2975[8] = len(x.VolumesInUse) != 0
			yyq2975[9] = len(x.VolumesAttached) != 0
			var yynn2975 int
			if yyr2975 || yy2arr2975 {
				r.EncodeArrayStart(10)
			} else {
				yynn2975 = 0
				for _, b := range yyq2975 {
					if b {
						yynn2975++
					}
				}
				r.EncodeMapStart(yynn2975)
				yynn2975 = 0
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2975[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2975[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2975[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2980 := z.EncBinary()
						_ = yym2980
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2975[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2981 := z.EncBinary()
						_ = yym2981
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2983 := z.EncBinary()
						_ = yym2983
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2975[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2984 := z.EncBinary()
						_ = yym2984
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[5] {
					yy2986 := &x.DaemonEndpoints
					yy2986.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2975[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2987 := &x.DaemonEndpoints
					yy2987.CodecEncodeSelf(e)
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[6] {
					yy2989 := &x.NodeInfo
					yy2989.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2975[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2990 := &x.NodeInfo
					yy2990.CodecEncodeSelf(e)
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2992 := z.EncBinary()
						_ = yym2992
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2975[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2993 := z.EncBinary()
						_ = yym2993
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2995 := z.EncBinary()
						_ = yym2995
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2975[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2996 := z.EncBinary()
						_ = yym2996
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2975[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2998 := z.EncBinary()
						_ = yym2998
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2975[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2999 := z.EncBinary()
						_ = yym2999
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2975 || yy2arr2975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3000 := z.DecBinary()
	_ = yym3000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3001 := r.ContainerType()
		if yyct3001 == codecSelferValueTypeMap1234 {
			yyl3001 := r.ReadMapStart()
			if yyl3001 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3001, d)
			}
		} else if yyct3001 == codecSelferValueTypeArray1234 {
			yyl3001 := r.ReadArrayStart()
			if yyl3001 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3001, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3002Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3002Slc
	var yyhl3002 bool = l >= 0
	for yyj3002 := 0; ; yyj3002++ {
		if yyhl3002 {
			if yyj3002 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3002Slc = r.DecodeBytes(yys3002Slc, true, true)
		yys3002 := string(yys3002Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3002 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3003 := &x.Capacity
				yyv3003.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3004 := &x.Allocatable
				yyv3004.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3006 := &x.Conditions
				yym3007 := z.DecBinary()
				_ = yym3007
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3006), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3008 := &x.Addresses
				yym3009 := z.DecBinary()
				_ = yym3009
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3008), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3010 := &x.DaemonEndpoints
				yyv3010.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3011 := &x.NodeInfo
				yyv3011.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3012 := &x.Images
				yym3013 := z.DecBinary()
				_ = yym3013
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3012), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3014 := &x.VolumesInUse
				yym3015 := z.DecBinary()
				_ = yym3015
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3014), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3016 := &x.VolumesAttached
				yym3017 := z.DecBinary()
				_ = yym3017
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3016), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3002)
		} // end switch yys3002
	} // end for yyj3002
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3018 int
	var yyb3018 bool
	var yyhl3018 bool = l >= 0
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3019 := &x.Capacity
		yyv3019.CodecDecodeSelf(d)
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3020 := &x.Allocatable
		yyv3020.CodecDecodeSelf(d)
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3022 := &x.Conditions
		yym3023 := z.DecBinary()
		_ = yym3023
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3022), d)
		}
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3024 := &x.Addresses
		yym3025 := z.DecBinary()
		_ = yym3025
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3024), d)
		}
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3026 := &x.DaemonEndpoints
		yyv3026.CodecDecodeSelf(d)
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3027 := &x.NodeInfo
		yyv3027.CodecDecodeSelf(d)
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3028 := &x.Images
		yym3029 := z.DecBinary()
		_ = yym3029
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3028), d)
		}
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3030 := &x.VolumesInUse
		yym3031 := z.DecBinary()
		_ = yym3031
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3030), d)
		}
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3032 := &x.VolumesAttached
		yym3033 := z.DecBinary()
		_ = yym3033
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3032), d)
		}
	}
	for {
		yyj3018++
		if yyhl3018 {
			yyb3018 = yyj3018 > l
		} else {
			yyb3018 = r.CheckBreak()
		}
		if yyb3018 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3018-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3034 := z.EncBinary()
	_ = yym3034
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3035 := z.DecBinary()
	_ = yym3035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3036 := z.EncBinary()
		_ = yym3036
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3037 := !z.EncBinary()
			yy2arr3037 := z.EncBasicHandle().StructToArray
			var yyq3037 [2]bool
			_, _, _ = yysep3037, yyq3037, yy2arr3037
			const yyr3037 bool = false
			var yynn3037 int
			if yyr3037 || yy2arr3037 {
				r.EncodeArrayStart(2)
			} else {
				yynn3037 = 2
				for _, b := range yyq3037 {
					if b {
						yynn3037++
					}
				}
				r.EncodeMapStart(yynn3037)
				yynn3037 = 0
			}
			if yyr3037 || yy2arr3037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3037 || yy2arr3037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3040 := z.EncBinary()
				_ = yym3040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3041 := z.EncBinary()
				_ = yym3041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3037 || yy2arr3037 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3042 := z.DecBinary()
	_ = yym3042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3043 := r.ContainerType()
		if yyct3043 == codecSelferValueTypeMap1234 {
			yyl3043 := r.ReadMapStart()
			if yyl3043 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3043, d)
			}
		} else if yyct3043 == codecSelferValueTypeArray1234 {
			yyl3043 := r.ReadArrayStart()
			if yyl3043 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3043, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3044Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3044Slc
	var yyhl3044 bool = l >= 0
	for yyj3044 := 0; ; yyj3044++ {
		if yyhl3044 {
			if yyj3044 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3044Slc = r.DecodeBytes(yys3044Slc, true, true)
		yys3044 := string(yys3044Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3044 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3044)
		} // end switch yys3044
	} // end for yyj3044
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3047 int
	var yyb3047 bool
	var yyhl3047 bool = l >= 0
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3047++
		if yyhl3047 {
			yyb3047 = yyj3047 > l
		} else {
			yyb3047 = r.CheckBreak()
		}
		if yyb3047 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3047-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3050 := z.EncBinary()
		_ = yym3050
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3051 := !z.EncBinary()
			yy2arr3051 := z.EncBasicHandle().StructToArray
			var yyq3051 [1]bool
			_, _, _ = yysep3051, yyq3051, yy2arr3051
			const yyr3051 bool = false
			yyq3051[0] = len(x.PreferAvoidPods) != 0
			var yynn3051 int
			if yyr3051 || yy2arr3051 {
				r.EncodeArrayStart(1)
			} else {
				yynn3051 = 0
				for _, b := range yyq3051 {
					if b {
						yynn3051++
					}
				}
				r.EncodeMapStart(yynn3051)
				yynn3051 = 0
			}
			if yyr3051 || yy2arr3051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3051[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3053 := z.EncBinary()
						_ = yym3053
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3051[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3054 := z.EncBinary()
						_ = yym3054
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3051 || yy2arr3051 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3055 := z.DecBinary()
	_ = yym3055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3056 := r.ContainerType()
		if yyct3056 == codecSelferValueTypeMap1234 {
			yyl3056 := r.ReadMapStart()
			if yyl3056 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3056, d)
			}
		} else if yyct3056 == codecSelferValueTypeArray1234 {
			yyl3056 := r.ReadArrayStart()
			if yyl3056 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3056, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3057Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3057Slc
	var yyhl3057 bool = l >= 0
	for yyj3057 := 0; ; yyj3057++ {
		if yyhl3057 {
			if yyj3057 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3057Slc = r.DecodeBytes(yys3057Slc, true, true)
		yys3057 := string(yys3057Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3057 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3058 := &x.PreferAvoidPods
				yym3059 := z.DecBinary()
				_ = yym3059
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3058), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3057)
		} // end switch yys3057
	} // end for yyj3057
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3060 int
	var yyb3060 bool
	var yyhl3060 bool = l >= 0
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3061 := &x.PreferAvoidPods
		yym3062 := z.DecBinary()
		_ = yym3062
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3061), d)
		}
	}
	for {
		yyj3060++
		if yyhl3060 {
			yyb3060 = yyj3060 > l
		} else {
			yyb3060 = r.CheckBreak()
		}
		if yyb3060 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3060-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3063 := z.EncBinary()
		_ = yym3063
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3064 := !z.EncBinary()
			yy2arr3064 := z.EncBasicHandle().StructToArray
			var yyq3064 [4]bool
			_, _, _ = yysep3064, yyq3064, yy2arr3064
			const yyr3064 bool = false
			yyq3064[1] = true
			yyq3064[2] = x.Reason != ""
			yyq3064[3] = x.Message != ""
			var yynn3064 int
			if yyr3064 || yy2arr3064 {
				r.EncodeArrayStart(4)
			} else {
				yynn3064 = 1
				for _, b := range yyq3064 {
					if b {
						yynn3064++
					}
				}
				r.EncodeMapStart(yynn3064)
				yynn3064 = 0
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3066 := &x.PodSignature
				yy3066.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3067 := &x.PodSignature
				yy3067.CodecEncodeSelf(e)
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[1] {
					yy3069 := &x.EvictionTime
					yym3070 := z.EncBinary()
					_ = yym3070
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3069) {
					} else if yym3070 {
						z.EncBinaryMarshal(yy3069)
					} else if !yym3070 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3069)
					} else {
						z.EncFallback(yy3069)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3071 := &x.EvictionTime
					yym3072 := z.EncBinary()
					_ = yym3072
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3071) {
					} else if yym3072 {
						z.EncBinaryMarshal(yy3071)
					} else if !yym3072 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3071)
					} else {
						z.EncFallback(yy3071)
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[2] {
					yym3074 := z.EncBinary()
					_ = yym3074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3064[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3075 := z.EncBinary()
					_ = yym3075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[3] {
					yym3077 := z.EncBinary()
					_ = yym3077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3064[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3079 := z.DecBinary()
	_ = yym3079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3080 := r.ContainerType()
		if yyct3080 == codecSelferValueTypeMap1234 {
			yyl3080 := r.ReadMapStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3080, d)
			}
		} else if yyct3080 == codecSelferValueTypeArray1234 {
			yyl3080 := r.ReadArrayStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3080, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3081Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3081Slc
	var yyhl3081 bool = l >= 0
	for yyj3081 := 0; ; yyj3081++ {
		if yyhl3081 {
			if yyj3081 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3081Slc = r.DecodeBytes(yys3081Slc, true, true)
		yys3081 := string(yys3081Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3081 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3082 := &x.PodSignature
				yyv3082.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3083 := &x.EvictionTime
				yym3084 := z.DecBinary()
				_ = yym3084
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3083) {
				} else if yym3084 {
					z.DecBinaryUnmarshal(yyv3083)
				} else if !yym3084 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3083)
				} else {
					z.DecFallback(yyv3083, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3081)
		} // end switch yys3081
	} // end for yyj3081
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3087 int
	var yyb3087 bool
	var yyhl3087 bool = l >= 0
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3088 := &x.PodSignature
		yyv3088.CodecDecodeSelf(d)
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3089 := &x.EvictionTime
		yym3090 := z.DecBinary()
		_ = yym3090
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3089) {
		} else if yym3090 {
			z.DecBinaryUnmarshal(yyv3089)
		} else if !yym3090 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3089)
		} else {
			z.DecFallback(yyv3089, false)
		}
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3087++
		if yyhl3087 {
			yyb3087 = yyj3087 > l
		} else {
			yyb3087 = r.CheckBreak()
		}
		if yyb3087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3093 := z.EncBinary()
		_ = yym3093
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3094 := !z.EncBinary()
			yy2arr3094 := z.EncBasicHandle().StructToArray
			var yyq3094 [1]bool
			_, _, _ = yysep3094, yyq3094, yy2arr3094
			const yyr3094 bool = false
			yyq3094[0] = x.PodController != nil
			var yynn3094 int
			if yyr3094 || yy2arr3094 {
				r.EncodeArrayStart(1)
			} else {
				yynn3094 = 0
				for _, b := range yyq3094 {
					if b {
						yynn3094++
					}
				}
				r.EncodeMapStart(yynn3094)
				yynn3094 = 0
			}
			if yyr3094 || yy2arr3094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3094[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3094[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3094 || yy2arr3094 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3096 := z.DecBinary()
	_ = yym3096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3097 := r.ContainerType()
		if yyct3097 == codecSelferValueTypeMap1234 {
			yyl3097 := r.ReadMapStart()
			if yyl3097 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3097, d)
			}
		} else if yyct3097 == codecSelferValueTypeArray1234 {
			yyl3097 := r.ReadArrayStart()
			if yyl3097 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3098Slc
	var yyhl3098 bool = l >= 0
	for yyj3098 := 0; ; yyj3098++ {
		if yyhl3098 {
			if yyj3098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3098Slc = r.DecodeBytes(yys3098Slc, true, true)
		yys3098 := string(yys3098Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3098 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3098)
		} // end switch yys3098
	} // end for yyj3098
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3100 int
	var yyb3100 bool
	var yyhl3100 bool = l >= 0
	yyj3100++
	if yyhl3100 {
		yyb3100 = yyj3100 > l
	} else {
		yyb3100 = r.CheckBreak()
	}
	if yyb3100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3100++
		if yyhl3100 {
			yyb3100 = yyj3100 > l
		} else {
			yyb3100 = r.CheckBreak()
		}
		if yyb3100 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3100-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3102 := z.EncBinary()
		_ = yym3102
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3103 := !z.EncBinary()
			yy2arr3103 := z.EncBasicHandle().StructToArray
			var yyq3103 [2]bool
			_, _, _ = yysep3103, yyq3103, yy2arr3103
			const yyr3103 bool = false
			yyq3103[1] = x.SizeBytes != 0
			var yynn3103 int
			if yyr3103 || yy2arr3103 {
				r.EncodeArrayStart(2)
			} else {
				yynn3103 = 1
				for _, b := range yyq3103 {
					if b {
						yynn3103++
					}
				}
				r.EncodeMapStart(yynn3103)
				yynn3103 = 0
			}
			if yyr3103 || yy2arr3103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3105 := z.EncBinary()
					_ = yym3105
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3106 := z.EncBinary()
					_ = yym3106
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3103 || yy2arr3103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3103[1] {
					yym3108 := z.EncBinary()
					_ = yym3108
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3103[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3103 || yy2arr3103 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3110 := z.DecBinary()
	_ = yym3110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3111 := r.ContainerType()
		if yyct3111 == codecSelferValueTypeMap1234 {
			yyl3111 := r.ReadMapStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3111, d)
			}
		} else if yyct3111 == codecSelferValueTypeArray1234 {
			yyl3111 := r.ReadArrayStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3111, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3112Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3112Slc
	var yyhl3112 bool = l >= 0
	for yyj3112 := 0; ; yyj3112++ {
		if yyhl3112 {
			if yyj3112 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3112Slc = r.DecodeBytes(yys3112Slc, true, true)
		yys3112 := string(yys3112Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3112 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3113 := &x.Names
				yym3114 := z.DecBinary()
				_ = yym3114
				if false {
				} else {
					z.F.DecSliceStringX(yyv3113, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3112)
		} // end switch yys3112
	} // end for yyj3112
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3116 int
	var yyb3116 bool
	var yyhl3116 bool = l >= 0
	yyj3116++
	if yyhl3116 {
		yyb3116 = yyj3116 > l
	} else {
		yyb3116 = r.CheckBreak()
	}
	if yyb3116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3117 := &x.Names
		yym3118 := z.DecBinary()
		_ = yym3118
		if false {
		} else {
			z.F.DecSliceStringX(yyv3117, false, d)
		}
	}
	yyj3116++
	if yyhl3116 {
		yyb3116 = yyj3116 > l
	} else {
		yyb3116 = r.CheckBreak()
	}
	if yyb3116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3116++
		if yyhl3116 {
			yyb3116 = yyj3116 > l
		} else {
			yyb3116 = r.CheckBreak()
		}
		if yyb3116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3120 := z.EncBinary()
	_ = yym3120
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3121 := z.DecBinary()
	_ = yym3121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3122 := z.EncBinary()
	_ = yym3122
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3123 := z.DecBinary()
	_ = yym3123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3124 := z.EncBinary()
		_ = yym3124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3125 := !z.EncBinary()
			yy2arr3125 := z.EncBasicHandle().StructToArray
			var yyq3125 [6]bool
			_, _, _ = yysep3125, yyq3125, yy2arr3125
			const yyr3125 bool = false
			yyq3125[2] = true
			yyq3125[3] = true
			yyq3125[4] = x.Reason != ""
			yyq3125[5] = x.Message != ""
			var yynn3125 int
			if yyr3125 || yy2arr3125 {
				r.EncodeArrayStart(6)
			} else {
				yynn3125 = 2
				for _, b := range yyq3125 {
					if b {
						yynn3125++
					}
				}
				r.EncodeMapStart(yynn3125)
				yynn3125 = 0
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3125[2] {
					yy3129 := &x.LastHeartbeatTime
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3129) {
					} else if yym3130 {
						z.EncBinaryMarshal(yy3129)
					} else if !yym3130 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3129)
					} else {
						z.EncFallback(yy3129)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3125[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3131 := &x.LastHeartbeatTime
					yym3132 := z.EncBinary()
					_ = yym3132
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3131) {
					} else if yym3132 {
						z.EncBinaryMarshal(yy3131)
					} else if !yym3132 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3131)
					} else {
						z.EncFallback(yy3131)
					}
				}
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3125[3] {
					yy3134 := &x.LastTransitionTime
					yym3135 := z.EncBinary()
					_ = yym3135
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3134) {
					} else if yym3135 {
						z.EncBinaryMarshal(yy3134)
					} else if !yym3135 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3134)
					} else {
						z.EncFallback(yy3134)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3125[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3136 := &x.LastTransitionTime
					yym3137 := z.EncBinary()
					_ = yym3137
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3136) {
					} else if yym3137 {
						z.EncBinaryMarshal(yy3136)
					} else if !yym3137 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3136)
					} else {
						z.EncFallback(yy3136)
					}
				}
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3125[4] {
					yym3139 := z.EncBinary()
					_ = yym3139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3125[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3140 := z.EncBinary()
					_ = yym3140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3125[5] {
					yym3142 := z.EncBinary()
					_ = yym3142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3125[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3143 := z.EncBinary()
					_ = yym3143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3144 := z.DecBinary()
	_ = yym3144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3145 := r.ContainerType()
		if yyct3145 == codecSelferValueTypeMap1234 {
			yyl3145 := r.ReadMapStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3145, d)
			}
		} else if yyct3145 == codecSelferValueTypeArray1234 {
			yyl3145 := r.ReadArrayStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3146Slc
	var yyhl3146 bool = l >= 0
	for yyj3146 := 0; ; yyj3146++ {
		if yyhl3146 {
			if yyj3146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3146Slc = r.DecodeBytes(yys3146Slc, true, true)
		yys3146 := string(yys3146Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3146 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3149 := &x.LastHeartbeatTime
				yym3150 := z.DecBinary()
				_ = yym3150
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3149) {
				} else if yym3150 {
					z.DecBinaryUnmarshal(yyv3149)
				} else if !yym3150 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3149)
				} else {
					z.DecFallback(yyv3149, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3151 := &x.LastTransitionTime
				yym3152 := z.DecBinary()
				_ = yym3152
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3151) {
				} else if yym3152 {
					z.DecBinaryUnmarshal(yyv3151)
				} else if !yym3152 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3151)
				} else {
					z.DecFallback(yyv3151, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3146)
		} // end switch yys3146
	} // end for yyj3146
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3155 int
	var yyb3155 bool
	var yyhl3155 bool = l >= 0
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3158 := &x.LastHeartbeatTime
		yym3159 := z.DecBinary()
		_ = yym3159
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3158) {
		} else if yym3159 {
			z.DecBinaryUnmarshal(yyv3158)
		} else if !yym3159 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3158)
		} else {
			z.DecFallback(yyv3158, false)
		}
	}
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3160 := &x.LastTransitionTime
		yym3161 := z.DecBinary()
		_ = yym3161
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3160) {
		} else if yym3161 {
			z.DecBinaryUnmarshal(yyv3160)
		} else if !yym3161 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3160)
		} else {
			z.DecFallback(yyv3160, false)
		}
	}
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3155++
		if yyhl3155 {
			yyb3155 = yyj3155 > l
		} else {
			yyb3155 = r.CheckBreak()
		}
		if yyb3155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3164 := z.EncBinary()
	_ = yym3164
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3165 := z.DecBinary()
	_ = yym3165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3166 := z.EncBinary()
		_ = yym3166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3167 := !z.EncBinary()
			yy2arr3167 := z.EncBasicHandle().StructToArray
			var yyq3167 [2]bool
			_, _, _ = yysep3167, yyq3167, yy2arr3167
			const yyr3167 bool = false
			var yynn3167 int
			if yyr3167 || yy2arr3167 {
				r.EncodeArrayStart(2)
			} else {
				yynn3167 = 2
				for _, b := range yyq3167 {
					if b {
						yynn3167++
					}
				}
				r.EncodeMapStart(yynn3167)
				yynn3167 = 0
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3170 := z.EncBinary()
				_ = yym3170
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3171 := z.EncBinary()
				_ = yym3171
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3172 := z.DecBinary()
	_ = yym3172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3173 := r.ContainerType()
		if yyct3173 == codecSelferValueTypeMap1234 {
			yyl3173 := r.ReadMapStart()
			if yyl3173 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3173, d)
			}
		} else if yyct3173 == codecSelferValueTypeArray1234 {
			yyl3173 := r.ReadArrayStart()
			if yyl3173 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3174Slc
	var yyhl3174 bool = l >= 0
	for yyj3174 := 0; ; yyj3174++ {
		if yyhl3174 {
			if yyj3174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3174Slc = r.DecodeBytes(yys3174Slc, true, true)
		yys3174 := string(yys3174Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3174 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3174)
		} // end switch yys3174
	} // end for yyj3174
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3177 int
	var yyb3177 bool
	var yyhl3177 bool = l >= 0
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3177++
		if yyhl3177 {
			yyb3177 = yyj3177 > l
		} else {
			yyb3177 = r.CheckBreak()
		}
		if yyb3177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3180 := z.EncBinary()
	_ = yym3180
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3181 := z.DecBinary()
	_ = yym3181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3182 := z.EncBinary()
		_ = yym3182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3183 := z.DecBinary()
	_ = yym3183
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3184 := z.EncBinary()
		_ = yym3184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3185 := !z.EncBinary()
			yy2arr3185 := z.EncBasicHandle().StructToArray
			var yyq3185 [5]bool
			_, _, _ = yysep3185, yyq3185, yy2arr3185
			const yyr3185 bool = false
			yyq3185[0] = x.Kind != ""
			yyq3185[1] = x.APIVersion != ""
			yyq3185[2] = true
			yyq3185[3] = true
			yyq3185[4] = true
			var yynn3185 int
			if yyr3185 || yy2arr3185 {
				r.EncodeArrayStart(5)
			} else {
				yynn3185 = 0
				for _, b := range yyq3185 {
					if b {
						yynn3185++
					}
				}
				r.EncodeMapStart(yynn3185)
				yynn3185 = 0
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[0] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[1] {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3185[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[2] {
					yy3193 := &x.ObjectMeta
					yy3193.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3185[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3194 := &x.ObjectMeta
					yy3194.CodecEncodeSelf(e)
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[3] {
					yy3196 := &x.Spec
					yy3196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3185[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3197 := &x.Spec
					yy3197.CodecEncodeSelf(e)
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[4] {
					yy3199 := &x.Status
					yy3199.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3185[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3200 := &x.Status
					yy3200.CodecEncodeSelf(e)
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3201 := z.DecBinary()
	_ = yym3201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3202 := r.ContainerType()
		if yyct3202 == codecSelferValueTypeMap1234 {
			yyl3202 := r.ReadMapStart()
			if yyl3202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3202, d)
			}
		} else if yyct3202 == codecSelferValueTypeArray1234 {
			yyl3202 := r.ReadArrayStart()
			if yyl3202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3203Slc
	var yyhl3203 bool = l >= 0
	for yyj3203 := 0; ; yyj3203++ {
		if yyhl3203 {
			if yyj3203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3203Slc = r.DecodeBytes(yys3203Slc, true, true)
		yys3203 := string(yys3203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3203 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3206 := &x.ObjectMeta
				yyv3206.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3207 := &x.Spec
				yyv3207.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3208 := &x.Status
				yyv3208.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3203)
		} // end switch yys3203
	} // end for yyj3203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3209 int
	var yyb3209 bool
	var yyhl3209 bool = l >= 0
	yyj3209++
	if yyhl3209 {
		yyb3209 = yyj3209 > l
	} else {
		yyb3209 = r.CheckBreak()
	}
	if yyb3209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3209++
	if yyhl3209 {
		yyb3209 = yyj3209 > l
	} else {
		yyb3209 = r.CheckBreak()
	}
	if yyb3209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3209++
	if yyhl3209 {
		yyb3209 = yyj3209 > l
	} else {
		yyb3209 = r.CheckBreak()
	}
	if yyb3209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3212 := &x.ObjectMeta
		yyv3212.CodecDecodeSelf(d)
	}
	yyj3209++
	if yyhl3209 {
		yyb3209 = yyj3209 > l
	} else {
		yyb3209 = r.CheckBreak()
	}
	if yyb3209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3213 := &x.Spec
		yyv3213.CodecDecodeSelf(d)
	}
	yyj3209++
	if yyhl3209 {
		yyb3209 = yyj3209 > l
	} else {
		yyb3209 = r.CheckBreak()
	}
	if yyb3209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3214 := &x.Status
		yyv3214.CodecDecodeSelf(d)
	}
	for {
		yyj3209++
		if yyhl3209 {
			yyb3209 = yyj3209 > l
		} else {
			yyb3209 = r.CheckBreak()
		}
		if yyb3209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3215 := z.EncBinary()
		_ = yym3215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3216 := !z.EncBinary()
			yy2arr3216 := z.EncBasicHandle().StructToArray
			var yyq3216 [4]bool
			_, _, _ = yysep3216, yyq3216, yy2arr3216
			const yyr3216 bool = false
			yyq3216[0] = x.Kind != ""
			yyq3216[1] = x.APIVersion != ""
			yyq3216[2] = true
			var yynn3216 int
			if yyr3216 || yy2arr3216 {
				r.EncodeArrayStart(4)
			} else {
				yynn3216 = 1
				for _, b := range yyq3216 {
					if b {
						yynn3216++
					}
				}
				r.EncodeMapStart(yynn3216)
				yynn3216 = 0
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[0] {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[1] {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[2] {
					yy3224 := &x.ListMeta
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3224) {
					} else {
						z.EncFallback(yy3224)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3226 := &x.ListMeta
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3226) {
					} else {
						z.EncFallback(yy3226)
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3231 := z.DecBinary()
	_ = yym3231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3232 := r.ContainerType()
		if yyct3232 == codecSelferValueTypeMap1234 {
			yyl3232 := r.ReadMapStart()
			if yyl3232 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3232, d)
			}
		} else if yyct3232 == codecSelferValueTypeArray1234 {
			yyl3232 := r.ReadArrayStart()
			if yyl3232 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3233Slc
	var yyhl3233 bool = l >= 0
	for yyj3233 := 0; ; yyj3233++ {
		if yyhl3233 {
			if yyj3233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3233Slc = r.DecodeBytes(yys3233Slc, true, true)
		yys3233 := string(yys3233Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3233 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3236 := &x.ListMeta
				yym3237 := z.DecBinary()
				_ = yym3237
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3236) {
				} else {
					z.DecFallback(yyv3236, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3238 := &x.Items
				yym3239 := z.DecBinary()
				_ = yym3239
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3238), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3233)
		} // end switch yys3233
	} // end for yyj3233
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3240 int
	var yyb3240 bool
	var yyhl3240 bool = l >= 0
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3243 := &x.ListMeta
		yym3244 := z.DecBinary()
		_ = yym3244
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3243) {
		} else {
			z.DecFallback(yyv3243, false)
		}
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3245 := &x.Items
		yym3246 := z.DecBinary()
		_ = yym3246
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3245), d)
		}
	}
	for {
		yyj3240++
		if yyhl3240 {
			yyb3240 = yyj3240 > l
		} else {
			yyb3240 = r.CheckBreak()
		}
		if yyb3240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3247 := z.EncBinary()
	_ = yym3247
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3248 := z.DecBinary()
	_ = yym3248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3249 := z.EncBinary()
		_ = yym3249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3250 := !z.EncBinary()
			yy2arr3250 := z.EncBasicHandle().StructToArray
			var yyq3250 [1]bool
			_, _, _ = yysep3250, yyq3250, yy2arr3250
			const yyr3250 bool = false
			yyq3250[0] = len(x.Finalizers) != 0
			var yynn3250 int
			if yyr3250 || yy2arr3250 {
				r.EncodeArrayStart(1)
			} else {
				yynn3250 = 0
				for _, b := range yyq3250 {
					if b {
						yynn3250++
					}
				}
				r.EncodeMapStart(yynn3250)
				yynn3250 = 0
			}
			if yyr3250 || yy2arr3250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3250[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3252 := z.EncBinary()
						_ = yym3252
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3253 := z.EncBinary()
						_ = yym3253
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3250 || yy2arr3250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3254 := z.DecBinary()
	_ = yym3254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3255 := r.ContainerType()
		if yyct3255 == codecSelferValueTypeMap1234 {
			yyl3255 := r.ReadMapStart()
			if yyl3255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3255, d)
			}
		} else if yyct3255 == codecSelferValueTypeArray1234 {
			yyl3255 := r.ReadArrayStart()
			if yyl3255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3256Slc
	var yyhl3256 bool = l >= 0
	for yyj3256 := 0; ; yyj3256++ {
		if yyhl3256 {
			if yyj3256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3256Slc = r.DecodeBytes(yys3256Slc, true, true)
		yys3256 := string(yys3256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3256 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3257 := &x.Finalizers
				yym3258 := z.DecBinary()
				_ = yym3258
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3257), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3256)
		} // end switch yys3256
	} // end for yyj3256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3259 int
	var yyb3259 bool
	var yyhl3259 bool = l >= 0
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3260 := &x.Finalizers
		yym3261 := z.DecBinary()
		_ = yym3261
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3260), d)
		}
	}
	for {
		yyj3259++
		if yyhl3259 {
			yyb3259 = yyj3259 > l
		} else {
			yyb3259 = r.CheckBreak()
		}
		if yyb3259 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3259-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3262 := z.EncBinary()
		_ = yym3262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3263 := !z.EncBinary()
			yy2arr3263 := z.EncBasicHandle().StructToArray
			var yyq3263 [1]bool
			_, _, _ = yysep3263, yyq3263, yy2arr3263
			const yyr3263 bool = false
			yyq3263[0] = x.Phase != ""
			var yynn3263 int
			if yyr3263 || yy2arr3263 {
				r.EncodeArrayStart(1)
			} else {
				yynn3263 = 0
				for _, b := range yyq3263 {
					if b {
						yynn3263++
					}
				}
				r.EncodeMapStart(yynn3263)
				yynn3263 = 0
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3265 := z.DecBinary()
	_ = yym3265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3266 := r.ContainerType()
		if yyct3266 == codecSelferValueTypeMap1234 {
			yyl3266 := r.ReadMapStart()
			if yyl3266 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3266, d)
			}
		} else if yyct3266 == codecSelferValueTypeArray1234 {
			yyl3266 := r.ReadArrayStart()
			if yyl3266 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3266, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3267Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3267Slc
	var yyhl3267 bool = l >= 0
	for yyj3267 := 0; ; yyj3267++ {
		if yyhl3267 {
			if yyj3267 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3267Slc = r.DecodeBytes(yys3267Slc, true, true)
		yys3267 := string(yys3267Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3267 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3267)
		} // end switch yys3267
	} // end for yyj3267
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3269 int
	var yyb3269 bool
	var yyhl3269 bool = l >= 0
	yyj3269++
	if yyhl3269 {
		yyb3269 = yyj3269 > l
	} else {
		yyb3269 = r.CheckBreak()
	}
	if yyb3269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3269++
		if yyhl3269 {
			yyb3269 = yyj3269 > l
		} else {
			yyb3269 = r.CheckBreak()
		}
		if yyb3269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3271 := z.EncBinary()
	_ = yym3271
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3272 := z.DecBinary()
	_ = yym3272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3273 := z.EncBinary()
		_ = yym3273
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3274 := !z.EncBinary()
			yy2arr3274 := z.EncBasicHandle().StructToArray
			var yyq3274 [5]bool
			_, _, _ = yysep3274, yyq3274, yy2arr3274
			const yyr3274 bool = false
			yyq3274[0] = x.Kind != ""
			yyq3274[1] = x.APIVersion != ""
			yyq3274[2] = true
			yyq3274[3] = true
			yyq3274[4] = true
			var yynn3274 int
			if yyr3274 || yy2arr3274 {
				r.EncodeArrayStart(5)
			} else {
				yynn3274 = 0
				for _, b := range yyq3274 {
					if b {
						yynn3274++
					}
				}
				r.EncodeMapStart(yynn3274)
				yynn3274 = 0
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3274[0] {
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3274[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3274[1] {
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3274[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3274[2] {
					yy3282 := &x.ObjectMeta
					yy3282.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3274[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3283 := &x.ObjectMeta
					yy3283.CodecEncodeSelf(e)
				}
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3274[3] {
					yy3285 := &x.Spec
					yy3285.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3274[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3286 := &x.Spec
					yy3286.CodecEncodeSelf(e)
				}
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3274[4] {
					yy3288 := &x.Status
					yy3288.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3274[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3289 := &x.Status
					yy3289.CodecEncodeSelf(e)
				}
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3290 := z.DecBinary()
	_ = yym3290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3291 := r.ContainerType()
		if yyct3291 == codecSelferValueTypeMap1234 {
			yyl3291 := r.ReadMapStart()
			if yyl3291 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3291, d)
			}
		} else if yyct3291 == codecSelferValueTypeArray1234 {
			yyl3291 := r.ReadArrayStart()
			if yyl3291 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3291, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3292Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3292Slc
	var yyhl3292 bool = l >= 0
	for yyj3292 := 0; ; yyj3292++ {
		if yyhl3292 {
			if yyj3292 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3292Slc = r.DecodeBytes(yys3292Slc, true, true)
		yys3292 := string(yys3292Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3292 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3295 := &x.ObjectMeta
				yyv3295.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3296 := &x.Spec
				yyv3296.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3297 := &x.Status
				yyv3297.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3292)
		} // end switch yys3292
	} // end for yyj3292
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3298 int
	var yyb3298 bool
	var yyhl3298 bool = l >= 0
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3301 := &x.ObjectMeta
		yyv3301.CodecDecodeSelf(d)
	}
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3302 := &x.Spec
		yyv3302.CodecDecodeSelf(d)
	}
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3303 := &x.Status
		yyv3303.CodecDecodeSelf(d)
	}
	for {
		yyj3298++
		if yyhl3298 {
			yyb3298 = yyj3298 > l
		} else {
			yyb3298 = r.CheckBreak()
		}
		if yyb3298 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3298-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3304 := z.EncBinary()
		_ = yym3304
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3305 := !z.EncBinary()
			yy2arr3305 := z.EncBasicHandle().StructToArray
			var yyq3305 [4]bool
			_, _, _ = yysep3305, yyq3305, yy2arr3305
			const yyr3305 bool = false
			yyq3305[0] = x.Kind != ""
			yyq3305[1] = x.APIVersion != ""
			yyq3305[2] = true
			var yynn3305 int
			if yyr3305 || yy2arr3305 {
				r.EncodeArrayStart(4)
			} else {
				yynn3305 = 1
				for _, b := range yyq3305 {
					if b {
						yynn3305++
					}
				}
				r.EncodeMapStart(yynn3305)
				yynn3305 = 0
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[0] {
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3305[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[1] {
					yym3310 := z.EncBinary()
					_ = yym3310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3305[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[2] {
					yy3313 := &x.ListMeta
					yym3314 := z.EncBinary()
					_ = yym3314
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3313) {
					} else {
						z.EncFallback(yy3313)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3305[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3315 := &x.ListMeta
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3315) {
					} else {
						z.EncFallback(yy3315)
					}
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3320 := z.DecBinary()
	_ = yym3320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3321 := r.ContainerType()
		if yyct3321 == codecSelferValueTypeMap1234 {
			yyl3321 := r.ReadMapStart()
			if yyl3321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3321, d)
			}
		} else if yyct3321 == codecSelferValueTypeArray1234 {
			yyl3321 := r.ReadArrayStart()
			if yyl3321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3322Slc
	var yyhl3322 bool = l >= 0
	for yyj3322 := 0; ; yyj3322++ {
		if yyhl3322 {
			if yyj3322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3322Slc = r.DecodeBytes(yys3322Slc, true, true)
		yys3322 := string(yys3322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3322 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3325 := &x.ListMeta
				yym3326 := z.DecBinary()
				_ = yym3326
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3325) {
				} else {
					z.DecFallback(yyv3325, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3327 := &x.Items
				yym3328 := z.DecBinary()
				_ = yym3328
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3327), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3322)
		} // end switch yys3322
	} // end for yyj3322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3329 int
	var yyb3329 bool
	var yyhl3329 bool = l >= 0
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3332 := &x.ListMeta
		yym3333 := z.DecBinary()
		_ = yym3333
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3332) {
		} else {
			z.DecFallback(yyv3332, false)
		}
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3334 := &x.Items
		yym3335 := z.DecBinary()
		_ = yym3335
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3334), d)
		}
	}
	for {
		yyj3329++
		if yyhl3329 {
			yyb3329 = yyj3329 > l
		} else {
			yyb3329 = r.CheckBreak()
		}
		if yyb3329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3336 := z.EncBinary()
		_ = yym3336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3337 := !z.EncBinary()
			yy2arr3337 := z.EncBasicHandle().StructToArray
			var yyq3337 [4]bool
			_, _, _ = yysep3337, yyq3337, yy2arr3337
			const yyr3337 bool = false
			yyq3337[0] = x.Kind != ""
			yyq3337[1] = x.APIVersion != ""
			yyq3337[2] = true
			var yynn3337 int
			if yyr3337 || yy2arr3337 {
				r.EncodeArrayStart(4)
			} else {
				yynn3337 = 1
				for _, b := range yyq3337 {
					if b {
						yynn3337++
					}
				}
				r.EncodeMapStart(yynn3337)
				yynn3337 = 0
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3337[0] {
					yym3339 := z.EncBinary()
					_ = yym3339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3337[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3337[1] {
					yym3342 := z.EncBinary()
					_ = yym3342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3337[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3337[2] {
					yy3345 := &x.ObjectMeta
					yy3345.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3337[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3346 := &x.ObjectMeta
					yy3346.CodecEncodeSelf(e)
				}
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3348 := &x.Target
				yy3348.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3349 := &x.Target
				yy3349.CodecEncodeSelf(e)
			}
			if yyr3337 || yy2arr3337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3350 := z.DecBinary()
	_ = yym3350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3351 := r.ContainerType()
		if yyct3351 == codecSelferValueTypeMap1234 {
			yyl3351 := r.ReadMapStart()
			if yyl3351 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3351, d)
			}
		} else if yyct3351 == codecSelferValueTypeArray1234 {
			yyl3351 := r.ReadArrayStart()
			if yyl3351 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3352Slc
	var yyhl3352 bool = l >= 0
	for yyj3352 := 0; ; yyj3352++ {
		if yyhl3352 {
			if yyj3352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3352Slc = r.DecodeBytes(yys3352Slc, true, true)
		yys3352 := string(yys3352Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3352 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3355 := &x.ObjectMeta
				yyv3355.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3356 := &x.Target
				yyv3356.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3352)
		} // end switch yys3352
	} // end for yyj3352
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3357 int
	var yyb3357 bool
	var yyhl3357 bool = l >= 0
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3360 := &x.ObjectMeta
		yyv3360.CodecDecodeSelf(d)
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3361 := &x.Target
		yyv3361.CodecDecodeSelf(d)
	}
	for {
		yyj3357++
		if yyhl3357 {
			yyb3357 = yyj3357 > l
		} else {
			yyb3357 = r.CheckBreak()
		}
		if yyb3357 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3357-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3362 := z.EncBinary()
		_ = yym3362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3363 := !z.EncBinary()
			yy2arr3363 := z.EncBasicHandle().StructToArray
			var yyq3363 [1]bool
			_, _, _ = yysep3363, yyq3363, yy2arr3363
			const yyr3363 bool = false
			yyq3363[0] = x.UID != nil
			var yynn3363 int
			if yyr3363 || yy2arr3363 {
				r.EncodeArrayStart(1)
			} else {
				yynn3363 = 0
				for _, b := range yyq3363 {
					if b {
						yynn3363++
					}
				}
				r.EncodeMapStart(yynn3363)
				yynn3363 = 0
			}
			if yyr3363 || yy2arr3363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3363[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3365 := *x.UID
						yym3366 := z.EncBinary()
						_ = yym3366
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3365) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3365))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3363[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3367 := *x.UID
						yym3368 := z.EncBinary()
						_ = yym3368
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3367) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3367))
						}
					}
				}
			}
			if yyr3363 || yy2arr3363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3369 := z.DecBinary()
	_ = yym3369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3370 := r.ContainerType()
		if yyct3370 == codecSelferValueTypeMap1234 {
			yyl3370 := r.ReadMapStart()
			if yyl3370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3370, d)
			}
		} else if yyct3370 == codecSelferValueTypeArray1234 {
			yyl3370 := r.ReadArrayStart()
			if yyl3370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3371Slc
	var yyhl3371 bool = l >= 0
	for yyj3371 := 0; ; yyj3371++ {
		if yyhl3371 {
			if yyj3371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3371Slc = r.DecodeBytes(yys3371Slc, true, true)
		yys3371 := string(yys3371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3371 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3373 := z.DecBinary()
				_ = yym3373
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3371)
		} // end switch yys3371
	} // end for yyj3371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3374 int
	var yyb3374 bool
	var yyhl3374 bool = l >= 0
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3376 := z.DecBinary()
		_ = yym3376
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3374++
		if yyhl3374 {
			yyb3374 = yyj3374 > l
		} else {
			yyb3374 = r.CheckBreak()
		}
		if yyb3374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3377 := z.EncBinary()
		_ = yym3377
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3378 := !z.EncBinary()
			yy2arr3378 := z.EncBasicHandle().StructToArray
			var yyq3378 [5]bool
			_, _, _ = yysep3378, yyq3378, yy2arr3378
			const yyr3378 bool = false
			yyq3378[0] = x.Kind != ""
			yyq3378[1] = x.APIVersion != ""
			yyq3378[2] = x.GracePeriodSeconds != nil
			yyq3378[3] = x.Preconditions != nil
			yyq3378[4] = x.OrphanDependents != nil
			var yynn3378 int
			if yyr3378 || yy2arr3378 {
				r.EncodeArrayStart(5)
			} else {
				yynn3378 = 0
				for _, b := range yyq3378 {
					if b {
						yynn3378++
					}
				}
				r.EncodeMapStart(yynn3378)
				yynn3378 = 0
			}
			if yyr3378 || yy2arr3378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3378[0] {
					yym3380 := z.EncBinary()
					_ = yym3380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3378[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3381 := z.EncBinary()
					_ = yym3381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3378 || yy2arr3378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3378[1] {
					yym3383 := z.EncBinary()
					_ = yym3383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3378[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3384 := z.EncBinary()
					_ = yym3384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3378 || yy2arr3378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3378[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3386 := *x.GracePeriodSeconds
						yym3387 := z.EncBinary()
						_ = yym3387
						if false {
						} else {
							r.EncodeInt(int64(yy3386))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3378[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3388 := *x.GracePeriodSeconds
						yym3389 := z.EncBinary()
						_ = yym3389
						if false {
						} else {
							r.EncodeInt(int64(yy3388))
						}
					}
				}
			}
			if yyr3378 || yy2arr3378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3378[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3378[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3378 || yy2arr3378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3378[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3392 := *x.OrphanDependents
						yym3393 := z.EncBinary()
						_ = yym3393
						if false {
						} else {
							r.EncodeBool(bool(yy3392))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3378[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3394 := *x.OrphanDependents
						yym3395 := z.EncBinary()
						_ = yym3395
						if false {
						} else {
							r.EncodeBool(bool(yy3394))
						}
					}
				}
			}
			if yyr3378 || yy2arr3378 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3396 := z.DecBinary()
	_ = yym3396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3397 := r.ContainerType()
		if yyct3397 == codecSelferValueTypeMap1234 {
			yyl3397 := r.ReadMapStart()
			if yyl3397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3397, d)
			}
		} else if yyct3397 == codecSelferValueTypeArray1234 {
			yyl3397 := r.ReadArrayStart()
			if yyl3397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3398Slc
	var yyhl3398 bool = l >= 0
	for yyj3398 := 0; ; yyj3398++ {
		if yyhl3398 {
			if yyj3398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3398Slc = r.DecodeBytes(yys3398Slc, true, true)
		yys3398 := string(yys3398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3398 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3402 := z.DecBinary()
				_ = yym3402
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3405 := z.DecBinary()
				_ = yym3405
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3398)
		} // end switch yys3398
	} // end for yyj3398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3406 int
	var yyb3406 bool
	var yyhl3406 bool = l >= 0
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3410 := z.DecBinary()
		_ = yym3410
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3413 := z.DecBinary()
		_ = yym3413
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3406++
		if yyhl3406 {
			yyb3406 = yyj3406 > l
		} else {
			yyb3406 = r.CheckBreak()
		}
		if yyb3406 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3406-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3414 := z.EncBinary()
		_ = yym3414
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3415 := !z.EncBinary()
			yy2arr3415 := z.EncBasicHandle().StructToArray
			var yyq3415 [4]bool
			_, _, _ = yysep3415, yyq3415, yy2arr3415
			const yyr3415 bool = false
			yyq3415[0] = x.Kind != ""
			yyq3415[1] = x.APIVersion != ""
			var yynn3415 int
			if yyr3415 || yy2arr3415 {
				r.EncodeArrayStart(4)
			} else {
				yynn3415 = 2
				for _, b := range yyq3415 {
					if b {
						yynn3415++
					}
				}
				r.EncodeMapStart(yynn3415)
				yynn3415 = 0
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3415[0] {
					yym3417 := z.EncBinary()
					_ = yym3417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3415[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3415[1] {
					yym3420 := z.EncBinary()
					_ = yym3420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3415[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3421 := z.EncBinary()
					_ = yym3421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3423 := z.EncBinary()
				_ = yym3423
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3424 := z.EncBinary()
				_ = yym3424
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3426 := z.EncBinary()
				_ = yym3426
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3427 := z.EncBinary()
				_ = yym3427
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3428 := z.DecBinary()
	_ = yym3428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3429 := r.ContainerType()
		if yyct3429 == codecSelferValueTypeMap1234 {
			yyl3429 := r.ReadMapStart()
			if yyl3429 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3429, d)
			}
		} else if yyct3429 == codecSelferValueTypeArray1234 {
			yyl3429 := r.ReadArrayStart()
			if yyl3429 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3429, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3430Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3430Slc
	var yyhl3430 bool = l >= 0
	for yyj3430 := 0; ; yyj3430++ {
		if yyhl3430 {
			if yyj3430 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3430Slc = r.DecodeBytes(yys3430Slc, true, true)
		yys3430 := string(yys3430Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3430 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3430)
		} // end switch yys3430
	} // end for yyj3430
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3435 int
	var yyb3435 bool
	var yyhl3435 bool = l >= 0
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3435++
		if yyhl3435 {
			yyb3435 = yyj3435 > l
		} else {
			yyb3435 = r.CheckBreak()
		}
		if yyb3435 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3435-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3440 := z.EncBinary()
		_ = yym3440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3441 := !z.EncBinary()
			yy2arr3441 := z.EncBasicHandle().StructToArray
			var yyq3441 [7]bool
			_, _, _ = yysep3441, yyq3441, yy2arr3441
			const yyr3441 bool = false
			yyq3441[0] = x.Kind != ""
			yyq3441[1] = x.APIVersion != ""
			yyq3441[2] = x.LabelSelector != ""
			yyq3441[3] = x.FieldSelector != ""
			yyq3441[4] = x.Watch != false
			yyq3441[5] = x.ResourceVersion != ""
			yyq3441[6] = x.TimeoutSeconds != nil
			var yynn3441 int
			if yyr3441 || yy2arr3441 {
				r.EncodeArrayStart(7)
			} else {
				yynn3441 = 0
				for _, b := range yyq3441 {
					if b {
						yynn3441++
					}
				}
				r.EncodeMapStart(yynn3441)
				yynn3441 = 0
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[0] {
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[1] {
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[2] {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[3] {
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[4] {
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3441[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[5] {
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3441[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3441[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3461 := *x.TimeoutSeconds
						yym3462 := z.EncBinary()
						_ = yym3462
						if false {
						} else {
							r.EncodeInt(int64(yy3461))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3441[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3463 := *x.TimeoutSeconds
						yym3464 := z.EncBinary()
						_ = yym3464
						if false {
						} else {
							r.EncodeInt(int64(yy3463))
						}
					}
				}
			}
			if yyr3441 || yy2arr3441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3465 := z.DecBinary()
	_ = yym3465
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3466 := r.ContainerType()
		if yyct3466 == codecSelferValueTypeMap1234 {
			yyl3466 := r.ReadMapStart()
			if yyl3466 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3466, d)
			}
		} else if yyct3466 == codecSelferValueTypeArray1234 {
			yyl3466 := r.ReadArrayStart()
			if yyl3466 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3466, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3467Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3467Slc
	var yyhl3467 bool = l >= 0
	for yyj3467 := 0; ; yyj3467++ {
		if yyhl3467 {
			if yyj3467 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3467Slc = r.DecodeBytes(yys3467Slc, true, true)
		yys3467 := string(yys3467Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3467 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3475 := z.DecBinary()
				_ = yym3475
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3467)
		} // end switch yys3467
	} // end for yyj3467
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3476 int
	var yyb3476 bool
	var yyhl3476 bool = l >= 0
	yyj3476++
	if yyhl3476 {
		yyb3476 = yyj3476 > l
	} else {
		yyb3476 = r.CheckBreak()
	}
	if yyb3476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3476++
	if yyhl3476 {
		yyb3476 = yyj3476 > l
	} else {
		yyb3476 = r.CheckBreak()
	}
	if yyb3476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3476++
	if yyhl3476 {
		yyb3476 = yyj3476 > l
	} else {
		yyb3476 = r.CheckBreak()
	}
	if yyb3476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3476++
	if yyhl3476 {
		yyb3476 = yyj3476 > l
	} else {
		yyb3476 = r.CheckBreak()
	}
	if yyb3476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3476++
	if yyhl3476 {
		yyb3476 = yyj3476 > l
	} else {
		yyb3476 = r.CheckBreak()
	}
	if yyb3476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3476++
	if yyhl3476 {
		yyb3476 = yyj3476 > l
	} else {
		yyb3476 = r.CheckBreak()
	}
	if yyb3476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3476++
	if yyhl3476 {
		yyb3476 = yyj3476 > l
	} else {
		yyb3476 = r.CheckBreak()
	}
	if yyb3476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3484 := z.DecBinary()
		_ = yym3484
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3476++
		if yyhl3476 {
			yyb3476 = yyj3476 > l
		} else {
			yyb3476 = r.CheckBreak()
		}
		if yyb3476 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3476-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3485 := z.EncBinary()
		_ = yym3485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3486 := !z.EncBinary()
			yy2arr3486 := z.EncBasicHandle().StructToArray
			var yyq3486 [10]bool
			_, _, _ = yysep3486, yyq3486, yy2arr3486
			const yyr3486 bool = false
			yyq3486[0] = x.Kind != ""
			yyq3486[1] = x.APIVersion != ""
			yyq3486[2] = x.Container != ""
			yyq3486[3] = x.Follow != false
			yyq3486[4] = x.Previous != false
			yyq3486[5] = x.SinceSeconds != nil
			yyq3486[6] = x.SinceTime != nil
			yyq3486[7] = x.Timestamps != false
			yyq3486[8] = x.TailLines != nil
			yyq3486[9] = x.LimitBytes != nil
			var yynn3486 int
			if yyr3486 || yy2arr3486 {
				r.EncodeArrayStart(10)
			} else {
				yynn3486 = 0
				for _, b := range yyq3486 {
					if b {
						yynn3486++
					}
				}
				r.EncodeMapStart(yynn3486)
				yynn3486 = 0
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[0] {
					yym3488 := z.EncBinary()
					_ = yym3488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3489 := z.EncBinary()
					_ = yym3489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[1] {
					yym3491 := z.EncBinary()
					_ = yym3491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3492 := z.EncBinary()
					_ = yym3492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[2] {
					yym3494 := z.EncBinary()
					_ = yym3494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3495 := z.EncBinary()
					_ = yym3495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[3] {
					yym3497 := z.EncBinary()
					_ = yym3497
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3486[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3498 := z.EncBinary()
					_ = yym3498
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[4] {
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3486[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3501 := z.EncBinary()
					_ = yym3501
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3503 := *x.SinceSeconds
						yym3504 := z.EncBinary()
						_ = yym3504
						if false {
						} else {
							r.EncodeInt(int64(yy3503))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3486[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3505 := *x.SinceSeconds
						yym3506 := z.EncBinary()
						_ = yym3506
						if false {
						} else {
							r.EncodeInt(int64(yy3505))
						}
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3508 := z.EncBinary()
						_ = yym3508
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3508 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3508 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3486[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3509 := z.EncBinary()
						_ = yym3509
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3509 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3509 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[7] {
					yym3511 := z.EncBinary()
					_ = yym3511
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3486[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3512 := z.EncBinary()
					_ = yym3512
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3514 := *x.TailLines
						yym3515 := z.EncBinary()
						_ = yym3515
						if false {
						} else {
							r.EncodeInt(int64(yy3514))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3486[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3516 := *x.TailLines
						yym3517 := z.EncBinary()
						_ = yym3517
						if false {
						} else {
							r.EncodeInt(int64(yy3516))
						}
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3519 := *x.LimitBytes
						yym3520 := z.EncBinary()
						_ = yym3520
						if false {
						} else {
							r.EncodeInt(int64(yy3519))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3486[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3521 := *x.LimitBytes
						yym3522 := z.EncBinary()
						_ = yym3522
						if false {
						} else {
							r.EncodeInt(int64(yy3521))
						}
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3523 := z.DecBinary()
	_ = yym3523
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3524 := r.ContainerType()
		if yyct3524 == codecSelferValueTypeMap1234 {
			yyl3524 := r.ReadMapStart()
			if yyl3524 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3524, d)
			}
		} else if yyct3524 == codecSelferValueTypeArray1234 {
			yyl3524 := r.ReadArrayStart()
			if yyl3524 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3524, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3525Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3525Slc
	var yyhl3525 bool = l >= 0
	for yyj3525 := 0; ; yyj3525++ {
		if yyhl3525 {
			if yyj3525 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3525Slc = r.DecodeBytes(yys3525Slc, true, true)
		yys3525 := string(yys3525Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3525 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3532 := z.DecBinary()
				_ = yym3532
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3534 := z.DecBinary()
				_ = yym3534
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3534 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3534 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3537 := z.DecBinary()
				_ = yym3537
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3539 := z.DecBinary()
				_ = yym3539
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3525)
		} // end switch yys3525
	} // end for yyj3525
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3540 int
	var yyb3540 bool
	var yyhl3540 bool = l >= 0
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3547 := z.DecBinary()
		_ = yym3547
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3549 := z.DecBinary()
		_ = yym3549
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3549 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3549 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3552 := z.DecBinary()
		_ = yym3552
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3554 := z.DecBinary()
		_ = yym3554
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3540++
		if yyhl3540 {
			yyb3540 = yyj3540 > l
		} else {
			yyb3540 = r.CheckBreak()
		}
		if yyb3540 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3540-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3555 := z.EncBinary()
		_ = yym3555
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3556 := !z.EncBinary()
			yy2arr3556 := z.EncBasicHandle().StructToArray
			var yyq3556 [7]bool
			_, _, _ = yysep3556, yyq3556, yy2arr3556
			const yyr3556 bool = false
			yyq3556[0] = x.Kind != ""
			yyq3556[1] = x.APIVersion != ""
			yyq3556[2] = x.Stdin != false
			yyq3556[3] = x.Stdout != false
			yyq3556[4] = x.Stderr != false
			yyq3556[5] = x.TTY != false
			yyq3556[6] = x.Container != ""
			var yynn3556 int
			if yyr3556 || yy2arr3556 {
				r.EncodeArrayStart(7)
			} else {
				yynn3556 = 0
				for _, b := range yyq3556 {
					if b {
						yynn3556++
					}
				}
				r.EncodeMapStart(yynn3556)
				yynn3556 = 0
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[0] {
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3556[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3559 := z.EncBinary()
					_ = yym3559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[1] {
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3556[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[2] {
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3556[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3565 := z.EncBinary()
					_ = yym3565
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[3] {
					yym3567 := z.EncBinary()
					_ = yym3567
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3556[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3568 := z.EncBinary()
					_ = yym3568
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[4] {
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3556[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3571 := z.EncBinary()
					_ = yym3571
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[5] {
					yym3573 := z.EncBinary()
					_ = yym3573
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3556[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3574 := z.EncBinary()
					_ = yym3574
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3556[6] {
					yym3576 := z.EncBinary()
					_ = yym3576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3556[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3577 := z.EncBinary()
					_ = yym3577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3556 || yy2arr3556 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3578 := z.DecBinary()
	_ = yym3578
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3579 := r.ContainerType()
		if yyct3579 == codecSelferValueTypeMap1234 {
			yyl3579 := r.ReadMapStart()
			if yyl3579 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3579, d)
			}
		} else if yyct3579 == codecSelferValueTypeArray1234 {
			yyl3579 := r.ReadArrayStart()
			if yyl3579 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3579, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3580Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3580Slc
	var yyhl3580 bool = l >= 0
	for yyj3580 := 0; ; yyj3580++ {
		if yyhl3580 {
			if yyj3580 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3580Slc = r.DecodeBytes(yys3580Slc, true, true)
		yys3580 := string(yys3580Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3580 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3580)
		} // end switch yys3580
	} // end for yyj3580
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3588 int
	var yyb3588 bool
	var yyhl3588 bool = l >= 0
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3588++
		if yyhl3588 {
			yyb3588 = yyj3588 > l
		} else {
			yyb3588 = r.CheckBreak()
		}
		if yyb3588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3596 := z.EncBinary()
		_ = yym3596
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3597 := !z.EncBinary()
			yy2arr3597 := z.EncBasicHandle().StructToArray
			var yyq3597 [8]bool
			_, _, _ = yysep3597, yyq3597, yy2arr3597
			const yyr3597 bool = false
			yyq3597[0] = x.Kind != ""
			yyq3597[1] = x.APIVersion != ""
			yyq3597[2] = x.Stdin != false
			yyq3597[3] = x.Stdout != false
			yyq3597[4] = x.Stderr != false
			yyq3597[5] = x.TTY != false
			yyq3597[6] = x.Container != ""
			var yynn3597 int
			if yyr3597 || yy2arr3597 {
				r.EncodeArrayStart(8)
			} else {
				yynn3597 = 1
				for _, b := range yyq3597 {
					if b {
						yynn3597++
					}
				}
				r.EncodeMapStart(yynn3597)
				yynn3597 = 0
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[0] {
					yym3599 := z.EncBinary()
					_ = yym3599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3597[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[1] {
					yym3602 := z.EncBinary()
					_ = yym3602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3597[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[2] {
					yym3605 := z.EncBinary()
					_ = yym3605
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3597[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3606 := z.EncBinary()
					_ = yym3606
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[3] {
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3597[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[4] {
					yym3611 := z.EncBinary()
					_ = yym3611
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3597[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[5] {
					yym3614 := z.EncBinary()
					_ = yym3614
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3597[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3615 := z.EncBinary()
					_ = yym3615
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[6] {
					yym3617 := z.EncBinary()
					_ = yym3617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3597[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3618 := z.EncBinary()
					_ = yym3618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3620 := z.EncBinary()
					_ = yym3620
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3621 := z.EncBinary()
					_ = yym3621
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3622 := z.DecBinary()
	_ = yym3622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3623 := r.ContainerType()
		if yyct3623 == codecSelferValueTypeMap1234 {
			yyl3623 := r.ReadMapStart()
			if yyl3623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3623, d)
			}
		} else if yyct3623 == codecSelferValueTypeArray1234 {
			yyl3623 := r.ReadArrayStart()
			if yyl3623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3624Slc
	var yyhl3624 bool = l >= 0
	for yyj3624 := 0; ; yyj3624++ {
		if yyhl3624 {
			if yyj3624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3624Slc = r.DecodeBytes(yys3624Slc, true, true)
		yys3624 := string(yys3624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3624 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3632 := &x.Command
				yym3633 := z.DecBinary()
				_ = yym3633
				if false {
				} else {
					z.F.DecSliceStringX(yyv3632, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3624)
		} // end switch yys3624
	} // end for yyj3624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3634 int
	var yyb3634 bool
	var yyhl3634 bool = l >= 0
	yyj3634++
	if yyhl3634 {
		yyb3634 = yyj3634 > l
	} else {
		yyb3634 = r.CheckBreak()
	}
	if yyb3634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3634++
	if yyhl3634 {
		yyb3634 = yyj3634 > l
	} else {
		yyb3634 = r.CheckBreak()
	}
	if yyb3634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3634++
	if yyhl3634 {
		yyb3634 = yyj3634 > l
	} else {
		yyb3634 = r.CheckBreak()
	}
	if yyb3634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3634++
	if yyhl3634 {
		yyb3634 = yyj3634 > l
	} else {
		yyb3634 = r.CheckBreak()
	}
	if yyb3634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3634++
	if yyhl3634 {
		yyb3634 = yyj3634 > l
	} else {
		yyb3634 = r.CheckBreak()
	}
	if yyb3634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3634++
	if yyhl3634 {
		yyb3634 = yyj3634 > l
	} else {
		yyb3634 = r.CheckBreak()
	}
	if yyb3634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3634++
	if yyhl3634 {
		yyb3634 = yyj3634 > l
	} else {
		yyb3634 = r.CheckBreak()
	}
	if yyb3634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3634++
	if yyhl3634 {
		yyb3634 = yyj3634 > l
	} else {
		yyb3634 = r.CheckBreak()
	}
	if yyb3634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3642 := &x.Command
		yym3643 := z.DecBinary()
		_ = yym3643
		if false {
		} else {
			z.F.DecSliceStringX(yyv3642, false, d)
		}
	}
	for {
		yyj3634++
		if yyhl3634 {
			yyb3634 = yyj3634 > l
		} else {
			yyb3634 = r.CheckBreak()
		}
		if yyb3634 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3634-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3644 := z.EncBinary()
		_ = yym3644
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3645 := !z.EncBinary()
			yy2arr3645 := z.EncBasicHandle().StructToArray
			var yyq3645 [3]bool
			_, _, _ = yysep3645, yyq3645, yy2arr3645
			const yyr3645 bool = false
			yyq3645[0] = x.Kind != ""
			yyq3645[1] = x.APIVersion != ""
			yyq3645[2] = x.Path != ""
			var yynn3645 int
			if yyr3645 || yy2arr3645 {
				r.EncodeArrayStart(3)
			} else {
				yynn3645 = 0
				for _, b := range yyq3645 {
					if b {
						yynn3645++
					}
				}
				r.EncodeMapStart(yynn3645)
				yynn3645 = 0
			}
			if yyr3645 || yy2arr3645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3645[0] {
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3645[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3648 := z.EncBinary()
					_ = yym3648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3645 || yy2arr3645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3645[1] {
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3645[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3645 || yy2arr3645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3645[2] {
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3645[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3654 := z.EncBinary()
					_ = yym3654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3645 || yy2arr3645 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3655 := z.DecBinary()
	_ = yym3655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3656 := r.ContainerType()
		if yyct3656 == codecSelferValueTypeMap1234 {
			yyl3656 := r.ReadMapStart()
			if yyl3656 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3656, d)
			}
		} else if yyct3656 == codecSelferValueTypeArray1234 {
			yyl3656 := r.ReadArrayStart()
			if yyl3656 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3657Slc
	var yyhl3657 bool = l >= 0
	for yyj3657 := 0; ; yyj3657++ {
		if yyhl3657 {
			if yyj3657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3657Slc = r.DecodeBytes(yys3657Slc, true, true)
		yys3657 := string(yys3657Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3657 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3657)
		} // end switch yys3657
	} // end for yyj3657
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3661 int
	var yyb3661 bool
	var yyhl3661 bool = l >= 0
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3661++
		if yyhl3661 {
			yyb3661 = yyj3661 > l
		} else {
			yyb3661 = r.CheckBreak()
		}
		if yyb3661 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3661-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3665 := z.EncBinary()
		_ = yym3665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3666 := !z.EncBinary()
			yy2arr3666 := z.EncBasicHandle().StructToArray
			var yyq3666 [3]bool
			_, _, _ = yysep3666, yyq3666, yy2arr3666
			const yyr3666 bool = false
			yyq3666[0] = x.Kind != ""
			yyq3666[1] = x.APIVersion != ""
			yyq3666[2] = x.Path != ""
			var yynn3666 int
			if yyr3666 || yy2arr3666 {
				r.EncodeArrayStart(3)
			} else {
				yynn3666 = 0
				for _, b := range yyq3666 {
					if b {
						yynn3666++
					}
				}
				r.EncodeMapStart(yynn3666)
				yynn3666 = 0
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[0] {
					yym3668 := z.EncBinary()
					_ = yym3668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[1] {
					yym3671 := z.EncBinary()
					_ = yym3671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3672 := z.EncBinary()
					_ = yym3672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[2] {
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3675 := z.EncBinary()
					_ = yym3675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3676 := z.DecBinary()
	_ = yym3676
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3677 := r.ContainerType()
		if yyct3677 == codecSelferValueTypeMap1234 {
			yyl3677 := r.ReadMapStart()
			if yyl3677 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3677, d)
			}
		} else if yyct3677 == codecSelferValueTypeArray1234 {
			yyl3677 := r.ReadArrayStart()
			if yyl3677 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3677, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3678Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3678Slc
	var yyhl3678 bool = l >= 0
	for yyj3678 := 0; ; yyj3678++ {
		if yyhl3678 {
			if yyj3678 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3678Slc = r.DecodeBytes(yys3678Slc, true, true)
		yys3678 := string(yys3678Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3678 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3678)
		} // end switch yys3678
	} // end for yyj3678
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3682 int
	var yyb3682 bool
	var yyhl3682 bool = l >= 0
	yyj3682++
	if yyhl3682 {
		yyb3682 = yyj3682 > l
	} else {
		yyb3682 = r.CheckBreak()
	}
	if yyb3682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3682++
	if yyhl3682 {
		yyb3682 = yyj3682 > l
	} else {
		yyb3682 = r.CheckBreak()
	}
	if yyb3682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3682++
	if yyhl3682 {
		yyb3682 = yyj3682 > l
	} else {
		yyb3682 = r.CheckBreak()
	}
	if yyb3682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3682++
		if yyhl3682 {
			yyb3682 = yyj3682 > l
		} else {
			yyb3682 = r.CheckBreak()
		}
		if yyb3682 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3682-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3686 := z.EncBinary()
		_ = yym3686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3687 := !z.EncBinary()
			yy2arr3687 := z.EncBasicHandle().StructToArray
			var yyq3687 [3]bool
			_, _, _ = yysep3687, yyq3687, yy2arr3687
			const yyr3687 bool = false
			yyq3687[0] = x.Kind != ""
			yyq3687[1] = x.APIVersion != ""
			yyq3687[2] = x.Path != ""
			var yynn3687 int
			if yyr3687 || yy2arr3687 {
				r.EncodeArrayStart(3)
			} else {
				yynn3687 = 0
				for _, b := range yyq3687 {
					if b {
						yynn3687++
					}
				}
				r.EncodeMapStart(yynn3687)
				yynn3687 = 0
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[0] {
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[1] {
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3693 := z.EncBinary()
					_ = yym3693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[2] {
					yym3695 := z.EncBinary()
					_ = yym3695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3696 := z.EncBinary()
					_ = yym3696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3697 := z.DecBinary()
	_ = yym3697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3698 := r.ContainerType()
		if yyct3698 == codecSelferValueTypeMap1234 {
			yyl3698 := r.ReadMapStart()
			if yyl3698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3698, d)
			}
		} else if yyct3698 == codecSelferValueTypeArray1234 {
			yyl3698 := r.ReadArrayStart()
			if yyl3698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3699Slc
	var yyhl3699 bool = l >= 0
	for yyj3699 := 0; ; yyj3699++ {
		if yyhl3699 {
			if yyj3699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3699Slc = r.DecodeBytes(yys3699Slc, true, true)
		yys3699 := string(yys3699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3699 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3699)
		} // end switch yys3699
	} // end for yyj3699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3703 int
	var yyb3703 bool
	var yyhl3703 bool = l >= 0
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3703++
	if yyhl3703 {
		yyb3703 = yyj3703 > l
	} else {
		yyb3703 = r.CheckBreak()
	}
	if yyb3703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3703++
		if yyhl3703 {
			yyb3703 = yyj3703 > l
		} else {
			yyb3703 = r.CheckBreak()
		}
		if yyb3703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3707 := z.EncBinary()
		_ = yym3707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3708 := !z.EncBinary()
			yy2arr3708 := z.EncBasicHandle().StructToArray
			var yyq3708 [5]bool
			_, _, _ = yysep3708, yyq3708, yy2arr3708
			const yyr3708 bool = false
			yyq3708[4] = x.Controller != nil
			var yynn3708 int
			if yyr3708 || yy2arr3708 {
				r.EncodeArrayStart(5)
			} else {
				yynn3708 = 4
				for _, b := range yyq3708 {
					if b {
						yynn3708++
					}
				}
				r.EncodeMapStart(yynn3708)
				yynn3708 = 0
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3710 := z.EncBinary()
				_ = yym3710
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3711 := z.EncBinary()
				_ = yym3711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3713 := z.EncBinary()
				_ = yym3713
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3714 := z.EncBinary()
				_ = yym3714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3716 := z.EncBinary()
				_ = yym3716
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3717 := z.EncBinary()
				_ = yym3717
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3719 := z.EncBinary()
				_ = yym3719
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3720 := z.EncBinary()
				_ = yym3720
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3708[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3722 := *x.Controller
						yym3723 := z.EncBinary()
						_ = yym3723
						if false {
						} else {
							r.EncodeBool(bool(yy3722))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3708[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3724 := *x.Controller
						yym3725 := z.EncBinary()
						_ = yym3725
						if false {
						} else {
							r.EncodeBool(bool(yy3724))
						}
					}
				}
			}
			if yyr3708 || yy2arr3708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3726 := z.DecBinary()
	_ = yym3726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3727 := r.ContainerType()
		if yyct3727 == codecSelferValueTypeMap1234 {
			yyl3727 := r.ReadMapStart()
			if yyl3727 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3727, d)
			}
		} else if yyct3727 == codecSelferValueTypeArray1234 {
			yyl3727 := r.ReadArrayStart()
			if yyl3727 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3728Slc
	var yyhl3728 bool = l >= 0
	for yyj3728 := 0; ; yyj3728++ {
		if yyhl3728 {
			if yyj3728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3728Slc = r.DecodeBytes(yys3728Slc, true, true)
		yys3728 := string(yys3728Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3728 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3734 := z.DecBinary()
				_ = yym3734
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3728)
		} // end switch yys3728
	} // end for yyj3728
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3735 int
	var yyb3735 bool
	var yyhl3735 bool = l >= 0
	yyj3735++
	if yyhl3735 {
		yyb3735 = yyj3735 > l
	} else {
		yyb3735 = r.CheckBreak()
	}
	if yyb3735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3735++
	if yyhl3735 {
		yyb3735 = yyj3735 > l
	} else {
		yyb3735 = r.CheckBreak()
	}
	if yyb3735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3735++
	if yyhl3735 {
		yyb3735 = yyj3735 > l
	} else {
		yyb3735 = r.CheckBreak()
	}
	if yyb3735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3735++
	if yyhl3735 {
		yyb3735 = yyj3735 > l
	} else {
		yyb3735 = r.CheckBreak()
	}
	if yyb3735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3735++
	if yyhl3735 {
		yyb3735 = yyj3735 > l
	} else {
		yyb3735 = r.CheckBreak()
	}
	if yyb3735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3741 := z.DecBinary()
		_ = yym3741
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3735++
		if yyhl3735 {
			yyb3735 = yyj3735 > l
		} else {
			yyb3735 = r.CheckBreak()
		}
		if yyb3735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3742 := z.EncBinary()
		_ = yym3742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3743 := !z.EncBinary()
			yy2arr3743 := z.EncBasicHandle().StructToArray
			var yyq3743 [7]bool
			_, _, _ = yysep3743, yyq3743, yy2arr3743
			const yyr3743 bool = false
			yyq3743[0] = x.Kind != ""
			yyq3743[1] = x.Namespace != ""
			yyq3743[2] = x.Name != ""
			yyq3743[3] = x.UID != ""
			yyq3743[4] = x.APIVersion != ""
			yyq3743[5] = x.ResourceVersion != ""
			yyq3743[6] = x.FieldPath != ""
			var yynn3743 int
			if yyr3743 || yy2arr3743 {
				r.EncodeArrayStart(7)
			} else {
				yynn3743 = 0
				for _, b := range yyq3743 {
					if b {
						yynn3743++
					}
				}
				r.EncodeMapStart(yynn3743)
				yynn3743 = 0
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[0] {
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[1] {
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3749 := z.EncBinary()
					_ = yym3749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[2] {
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[3] {
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[4] {
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[5] {
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[6] {
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3765 := z.DecBinary()
	_ = yym3765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3766 := r.ContainerType()
		if yyct3766 == codecSelferValueTypeMap1234 {
			yyl3766 := r.ReadMapStart()
			if yyl3766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3766, d)
			}
		} else if yyct3766 == codecSelferValueTypeArray1234 {
			yyl3766 := r.ReadArrayStart()
			if yyl3766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3767Slc
	var yyhl3767 bool = l >= 0
	for yyj3767 := 0; ; yyj3767++ {
		if yyhl3767 {
			if yyj3767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3767Slc = r.DecodeBytes(yys3767Slc, true, true)
		yys3767 := string(yys3767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3767 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3767)
		} // end switch yys3767
	} // end for yyj3767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3775 int
	var yyb3775 bool
	var yyhl3775 bool = l >= 0
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3775++
		if yyhl3775 {
			yyb3775 = yyj3775 > l
		} else {
			yyb3775 = r.CheckBreak()
		}
		if yyb3775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3783 := z.EncBinary()
		_ = yym3783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3784 := !z.EncBinary()
			yy2arr3784 := z.EncBasicHandle().StructToArray
			var yyq3784 [1]bool
			_, _, _ = yysep3784, yyq3784, yy2arr3784
			const yyr3784 bool = false
			yyq3784[0] = x.Name != ""
			var yynn3784 int
			if yyr3784 || yy2arr3784 {
				r.EncodeArrayStart(1)
			} else {
				yynn3784 = 0
				for _, b := range yyq3784 {
					if b {
						yynn3784++
					}
				}
				r.EncodeMapStart(yynn3784)
				yynn3784 = 0
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3784[0] {
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3784[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3787 := z.EncBinary()
					_ = yym3787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3788 := z.DecBinary()
	_ = yym3788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3789 := r.ContainerType()
		if yyct3789 == codecSelferValueTypeMap1234 {
			yyl3789 := r.ReadMapStart()
			if yyl3789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3789, d)
			}
		} else if yyct3789 == codecSelferValueTypeArray1234 {
			yyl3789 := r.ReadArrayStart()
			if yyl3789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3790Slc
	var yyhl3790 bool = l >= 0
	for yyj3790 := 0; ; yyj3790++ {
		if yyhl3790 {
			if yyj3790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3790Slc = r.DecodeBytes(yys3790Slc, true, true)
		yys3790 := string(yys3790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3790 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3790)
		} // end switch yys3790
	} // end for yyj3790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3792 int
	var yyb3792 bool
	var yyhl3792 bool = l >= 0
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3792++
		if yyhl3792 {
			yyb3792 = yyj3792 > l
		} else {
			yyb3792 = r.CheckBreak()
		}
		if yyb3792 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3792-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3794 := z.EncBinary()
		_ = yym3794
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3795 := !z.EncBinary()
			yy2arr3795 := z.EncBasicHandle().StructToArray
			var yyq3795 [3]bool
			_, _, _ = yysep3795, yyq3795, yy2arr3795
			const yyr3795 bool = false
			yyq3795[0] = x.Kind != ""
			yyq3795[1] = x.APIVersion != ""
			yyq3795[2] = true
			var yynn3795 int
			if yyr3795 || yy2arr3795 {
				r.EncodeArrayStart(3)
			} else {
				yynn3795 = 0
				for _, b := range yyq3795 {
					if b {
						yynn3795++
					}
				}
				r.EncodeMapStart(yynn3795)
				yynn3795 = 0
			}
			if yyr3795 || yy2arr3795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3795[0] {
					yym3797 := z.EncBinary()
					_ = yym3797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3795[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3798 := z.EncBinary()
					_ = yym3798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3795 || yy2arr3795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3795[1] {
					yym3800 := z.EncBinary()
					_ = yym3800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3795[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3801 := z.EncBinary()
					_ = yym3801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3795 || yy2arr3795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3795[2] {
					yy3803 := &x.Reference
					yy3803.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3795[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3804 := &x.Reference
					yy3804.CodecEncodeSelf(e)
				}
			}
			if yyr3795 || yy2arr3795 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3805 := z.DecBinary()
	_ = yym3805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3806 := r.ContainerType()
		if yyct3806 == codecSelferValueTypeMap1234 {
			yyl3806 := r.ReadMapStart()
			if yyl3806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3806, d)
			}
		} else if yyct3806 == codecSelferValueTypeArray1234 {
			yyl3806 := r.ReadArrayStart()
			if yyl3806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3807Slc
	var yyhl3807 bool = l >= 0
	for yyj3807 := 0; ; yyj3807++ {
		if yyhl3807 {
			if yyj3807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3807Slc = r.DecodeBytes(yys3807Slc, true, true)
		yys3807 := string(yys3807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3807 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3810 := &x.Reference
				yyv3810.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3807)
		} // end switch yys3807
	} // end for yyj3807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3811 int
	var yyb3811 bool
	var yyhl3811 bool = l >= 0
	yyj3811++
	if yyhl3811 {
		yyb3811 = yyj3811 > l
	} else {
		yyb3811 = r.CheckBreak()
	}
	if yyb3811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3811++
	if yyhl3811 {
		yyb3811 = yyj3811 > l
	} else {
		yyb3811 = r.CheckBreak()
	}
	if yyb3811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3811++
	if yyhl3811 {
		yyb3811 = yyj3811 > l
	} else {
		yyb3811 = r.CheckBreak()
	}
	if yyb3811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3814 := &x.Reference
		yyv3814.CodecDecodeSelf(d)
	}
	for {
		yyj3811++
		if yyhl3811 {
			yyb3811 = yyj3811 > l
		} else {
			yyb3811 = r.CheckBreak()
		}
		if yyb3811 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3811-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3815 := z.EncBinary()
		_ = yym3815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3816 := !z.EncBinary()
			yy2arr3816 := z.EncBasicHandle().StructToArray
			var yyq3816 [2]bool
			_, _, _ = yysep3816, yyq3816, yy2arr3816
			const yyr3816 bool = false
			yyq3816[0] = x.Component != ""
			yyq3816[1] = x.Host != ""
			var yynn3816 int
			if yyr3816 || yy2arr3816 {
				r.EncodeArrayStart(2)
			} else {
				yynn3816 = 0
				for _, b := range yyq3816 {
					if b {
						yynn3816++
					}
				}
				r.EncodeMapStart(yynn3816)
				yynn3816 = 0
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3816[0] {
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3816[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3819 := z.EncBinary()
					_ = yym3819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3816[1] {
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3816[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3823 := z.DecBinary()
	_ = yym3823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3824 := r.ContainerType()
		if yyct3824 == codecSelferValueTypeMap1234 {
			yyl3824 := r.ReadMapStart()
			if yyl3824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3824, d)
			}
		} else if yyct3824 == codecSelferValueTypeArray1234 {
			yyl3824 := r.ReadArrayStart()
			if yyl3824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3825Slc
	var yyhl3825 bool = l >= 0
	for yyj3825 := 0; ; yyj3825++ {
		if yyhl3825 {
			if yyj3825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3825Slc = r.DecodeBytes(yys3825Slc, true, true)
		yys3825 := string(yys3825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3825 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3825)
		} // end switch yys3825
	} // end for yyj3825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3828 int
	var yyb3828 bool
	var yyhl3828 bool = l >= 0
	yyj3828++
	if yyhl3828 {
		yyb3828 = yyj3828 > l
	} else {
		yyb3828 = r.CheckBreak()
	}
	if yyb3828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3828++
	if yyhl3828 {
		yyb3828 = yyj3828 > l
	} else {
		yyb3828 = r.CheckBreak()
	}
	if yyb3828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3828++
		if yyhl3828 {
			yyb3828 = yyj3828 > l
		} else {
			yyb3828 = r.CheckBreak()
		}
		if yyb3828 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3828-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3831 := z.EncBinary()
		_ = yym3831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3832 := !z.EncBinary()
			yy2arr3832 := z.EncBasicHandle().StructToArray
			var yyq3832 [11]bool
			_, _, _ = yysep3832, yyq3832, yy2arr3832
			const yyr3832 bool = false
			yyq3832[0] = x.Kind != ""
			yyq3832[1] = x.APIVersion != ""
			yyq3832[4] = x.Reason != ""
			yyq3832[5] = x.Message != ""
			yyq3832[6] = true
			yyq3832[7] = true
			yyq3832[8] = true
			yyq3832[9] = x.Count != 0
			yyq3832[10] = x.Type != ""
			var yynn3832 int
			if yyr3832 || yy2arr3832 {
				r.EncodeArrayStart(11)
			} else {
				yynn3832 = 2
				for _, b := range yyq3832 {
					if b {
						yynn3832++
					}
				}
				r.EncodeMapStart(yynn3832)
				yynn3832 = 0
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[0] {
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3832[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3835 := z.EncBinary()
					_ = yym3835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[1] {
					yym3837 := z.EncBinary()
					_ = yym3837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3832[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3840 := &x.ObjectMeta
				yy3840.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3841 := &x.ObjectMeta
				yy3841.CodecEncodeSelf(e)
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3843 := &x.InvolvedObject
				yy3843.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3844 := &x.InvolvedObject
				yy3844.CodecEncodeSelf(e)
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[4] {
					yym3846 := z.EncBinary()
					_ = yym3846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3832[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3847 := z.EncBinary()
					_ = yym3847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[5] {
					yym3849 := z.EncBinary()
					_ = yym3849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3832[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[6] {
					yy3852 := &x.Source
					yy3852.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3832[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3853 := &x.Source
					yy3853.CodecEncodeSelf(e)
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[7] {
					yy3855 := &x.FirstTimestamp
					yym3856 := z.EncBinary()
					_ = yym3856
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3855) {
					} else if yym3856 {
						z.EncBinaryMarshal(yy3855)
					} else if !yym3856 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3855)
					} else {
						z.EncFallback(yy3855)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3832[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3857 := &x.FirstTimestamp
					yym3858 := z.EncBinary()
					_ = yym3858
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3857) {
					} else if yym3858 {
						z.EncBinaryMarshal(yy3857)
					} else if !yym3858 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3857)
					} else {
						z.EncFallback(yy3857)
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[8] {
					yy3860 := &x.LastTimestamp
					yym3861 := z.EncBinary()
					_ = yym3861
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3860) {
					} else if yym3861 {
						z.EncBinaryMarshal(yy3860)
					} else if !yym3861 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3860)
					} else {
						z.EncFallback(yy3860)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3832[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3862 := &x.LastTimestamp
					yym3863 := z.EncBinary()
					_ = yym3863
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3862) {
					} else if yym3863 {
						z.EncBinaryMarshal(yy3862)
					} else if !yym3863 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3862)
					} else {
						z.EncFallback(yy3862)
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[9] {
					yym3865 := z.EncBinary()
					_ = yym3865
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3832[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[10] {
					yym3868 := z.EncBinary()
					_ = yym3868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3832[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3869 := z.EncBinary()
					_ = yym3869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3870 := z.DecBinary()
	_ = yym3870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3871 := r.ContainerType()
		if yyct3871 == codecSelferValueTypeMap1234 {
			yyl3871 := r.ReadMapStart()
			if yyl3871 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3871, d)
			}
		} else if yyct3871 == codecSelferValueTypeArray1234 {
			yyl3871 := r.ReadArrayStart()
			if yyl3871 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3872Slc
	var yyhl3872 bool = l >= 0
	for yyj3872 := 0; ; yyj3872++ {
		if yyhl3872 {
			if yyj3872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3872Slc = r.DecodeBytes(yys3872Slc, true, true)
		yys3872 := string(yys3872Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3872 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3875 := &x.ObjectMeta
				yyv3875.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3876 := &x.InvolvedObject
				yyv3876.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3879 := &x.Source
				yyv3879.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3880 := &x.FirstTimestamp
				yym3881 := z.DecBinary()
				_ = yym3881
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3880) {
				} else if yym3881 {
					z.DecBinaryUnmarshal(yyv3880)
				} else if !yym3881 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3880)
				} else {
					z.DecFallback(yyv3880, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3882 := &x.LastTimestamp
				yym3883 := z.DecBinary()
				_ = yym3883
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3882) {
				} else if yym3883 {
					z.DecBinaryUnmarshal(yyv3882)
				} else if !yym3883 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3882)
				} else {
					z.DecFallback(yyv3882, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3872)
		} // end switch yys3872
	} // end for yyj3872
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3886 int
	var yyb3886 bool
	var yyhl3886 bool = l >= 0
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3889 := &x.ObjectMeta
		yyv3889.CodecDecodeSelf(d)
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3890 := &x.InvolvedObject
		yyv3890.CodecDecodeSelf(d)
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3893 := &x.Source
		yyv3893.CodecDecodeSelf(d)
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3894 := &x.FirstTimestamp
		yym3895 := z.DecBinary()
		_ = yym3895
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3894) {
		} else if yym3895 {
			z.DecBinaryUnmarshal(yyv3894)
		} else if !yym3895 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3894)
		} else {
			z.DecFallback(yyv3894, false)
		}
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3896 := &x.LastTimestamp
		yym3897 := z.DecBinary()
		_ = yym3897
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3896) {
		} else if yym3897 {
			z.DecBinaryUnmarshal(yyv3896)
		} else if !yym3897 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3896)
		} else {
			z.DecFallback(yyv3896, false)
		}
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3886++
		if yyhl3886 {
			yyb3886 = yyj3886 > l
		} else {
			yyb3886 = r.CheckBreak()
		}
		if yyb3886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3900 := z.EncBinary()
		_ = yym3900
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3901 := !z.EncBinary()
			yy2arr3901 := z.EncBasicHandle().StructToArray
			var yyq3901 [4]bool
			_, _, _ = yysep3901, yyq3901, yy2arr3901
			const yyr3901 bool = false
			yyq3901[0] = x.Kind != ""
			yyq3901[1] = x.APIVersion != ""
			yyq3901[2] = true
			var yynn3901 int
			if yyr3901 || yy2arr3901 {
				r.EncodeArrayStart(4)
			} else {
				yynn3901 = 1
				for _, b := range yyq3901 {
					if b {
						yynn3901++
					}
				}
				r.EncodeMapStart(yynn3901)
				yynn3901 = 0
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[0] {
					yym3903 := z.EncBinary()
					_ = yym3903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3901[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3904 := z.EncBinary()
					_ = yym3904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[1] {
					yym3906 := z.EncBinary()
					_ = yym3906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3901[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3907 := z.EncBinary()
					_ = yym3907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3901[2] {
					yy3909 := &x.ListMeta
					yym3910 := z.EncBinary()
					_ = yym3910
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3909) {
					} else {
						z.EncFallback(yy3909)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3901[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3911 := &x.ListMeta
					yym3912 := z.EncBinary()
					_ = yym3912
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3911) {
					} else {
						z.EncFallback(yy3911)
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3914 := z.EncBinary()
					_ = yym3914
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3901 || yy2arr3901 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3916 := z.DecBinary()
	_ = yym3916
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3917 := r.ContainerType()
		if yyct3917 == codecSelferValueTypeMap1234 {
			yyl3917 := r.ReadMapStart()
			if yyl3917 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3917, d)
			}
		} else if yyct3917 == codecSelferValueTypeArray1234 {
			yyl3917 := r.ReadArrayStart()
			if yyl3917 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3917, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3918Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3918Slc
	var yyhl3918 bool = l >= 0
	for yyj3918 := 0; ; yyj3918++ {
		if yyhl3918 {
			if yyj3918 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3918Slc = r.DecodeBytes(yys3918Slc, true, true)
		yys3918 := string(yys3918Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3918 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3921 := &x.ListMeta
				yym3922 := z.DecBinary()
				_ = yym3922
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3921) {
				} else {
					z.DecFallback(yyv3921, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3923 := &x.Items
				yym3924 := z.DecBinary()
				_ = yym3924
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3923), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3918)
		} // end switch yys3918
	} // end for yyj3918
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3925 int
	var yyb3925 bool
	var yyhl3925 bool = l >= 0
	yyj3925++
	if yyhl3925 {
		yyb3925 = yyj3925 > l
	} else {
		yyb3925 = r.CheckBreak()
	}
	if yyb3925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3925++
	if yyhl3925 {
		yyb3925 = yyj3925 > l
	} else {
		yyb3925 = r.CheckBreak()
	}
	if yyb3925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3925++
	if yyhl3925 {
		yyb3925 = yyj3925 > l
	} else {
		yyb3925 = r.CheckBreak()
	}
	if yyb3925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3928 := &x.ListMeta
		yym3929 := z.DecBinary()
		_ = yym3929
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3928) {
		} else {
			z.DecFallback(yyv3928, false)
		}
	}
	yyj3925++
	if yyhl3925 {
		yyb3925 = yyj3925 > l
	} else {
		yyb3925 = r.CheckBreak()
	}
	if yyb3925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3930 := &x.Items
		yym3931 := z.DecBinary()
		_ = yym3931
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3930), d)
		}
	}
	for {
		yyj3925++
		if yyhl3925 {
			yyb3925 = yyj3925 > l
		} else {
			yyb3925 = r.CheckBreak()
		}
		if yyb3925 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3925-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3932 := z.EncBinary()
		_ = yym3932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3933 := !z.EncBinary()
			yy2arr3933 := z.EncBasicHandle().StructToArray
			var yyq3933 [4]bool
			_, _, _ = yysep3933, yyq3933, yy2arr3933
			const yyr3933 bool = false
			yyq3933[0] = x.Kind != ""
			yyq3933[1] = x.APIVersion != ""
			yyq3933[2] = true
			var yynn3933 int
			if yyr3933 || yy2arr3933 {
				r.EncodeArrayStart(4)
			} else {
				yynn3933 = 1
				for _, b := range yyq3933 {
					if b {
						yynn3933++
					}
				}
				r.EncodeMapStart(yynn3933)
				yynn3933 = 0
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[0] {
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3933[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[1] {
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3933[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[2] {
					yy3941 := &x.ListMeta
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3941) {
					} else {
						z.EncFallback(yy3941)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3933[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3943 := &x.ListMeta
					yym3944 := z.EncBinary()
					_ = yym3944
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3943) {
					} else {
						z.EncFallback(yy3943)
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3946 := z.EncBinary()
					_ = yym3946
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3948 := z.DecBinary()
	_ = yym3948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3949 := r.ContainerType()
		if yyct3949 == codecSelferValueTypeMap1234 {
			yyl3949 := r.ReadMapStart()
			if yyl3949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3949, d)
			}
		} else if yyct3949 == codecSelferValueTypeArray1234 {
			yyl3949 := r.ReadArrayStart()
			if yyl3949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3950Slc
	var yyhl3950 bool = l >= 0
	for yyj3950 := 0; ; yyj3950++ {
		if yyhl3950 {
			if yyj3950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3950Slc = r.DecodeBytes(yys3950Slc, true, true)
		yys3950 := string(yys3950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3950 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3953 := &x.ListMeta
				yym3954 := z.DecBinary()
				_ = yym3954
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3953) {
				} else {
					z.DecFallback(yyv3953, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3955 := &x.Items
				yym3956 := z.DecBinary()
				_ = yym3956
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3955), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3950)
		} // end switch yys3950
	} // end for yyj3950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3957 int
	var yyb3957 bool
	var yyhl3957 bool = l >= 0
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3960 := &x.ListMeta
		yym3961 := z.DecBinary()
		_ = yym3961
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3960) {
		} else {
			z.DecFallback(yyv3960, false)
		}
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3962 := &x.Items
		yym3963 := z.DecBinary()
		_ = yym3963
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3962), d)
		}
	}
	for {
		yyj3957++
		if yyhl3957 {
			yyb3957 = yyj3957 > l
		} else {
			yyb3957 = r.CheckBreak()
		}
		if yyb3957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3964 := z.EncBinary()
	_ = yym3964
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3965 := z.DecBinary()
	_ = yym3965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3966 := z.EncBinary()
		_ = yym3966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3967 := !z.EncBinary()
			yy2arr3967 := z.EncBasicHandle().StructToArray
			var yyq3967 [6]bool
			_, _, _ = yysep3967, yyq3967, yy2arr3967
			const yyr3967 bool = false
			yyq3967[0] = x.Type != ""
			yyq3967[1] = len(x.Max) != 0
			yyq3967[2] = len(x.Min) != 0
			yyq3967[3] = len(x.Default) != 0
			yyq3967[4] = len(x.DefaultRequest) != 0
			yyq3967[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3967 int
			if yyr3967 || yy2arr3967 {
				r.EncodeArrayStart(6)
			} else {
				yynn3967 = 0
				for _, b := range yyq3967 {
					if b {
						yynn3967++
					}
				}
				r.EncodeMapStart(yynn3967)
				yynn3967 = 0
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3967[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3974 := z.DecBinary()
	_ = yym3974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3975 := r.ContainerType()
		if yyct3975 == codecSelferValueTypeMap1234 {
			yyl3975 := r.ReadMapStart()
			if yyl3975 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3975, d)
			}
		} else if yyct3975 == codecSelferValueTypeArray1234 {
			yyl3975 := r.ReadArrayStart()
			if yyl3975 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3976Slc
	var yyhl3976 bool = l >= 0
	for yyj3976 := 0; ; yyj3976++ {
		if yyhl3976 {
			if yyj3976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3976Slc = r.DecodeBytes(yys3976Slc, true, true)
		yys3976 := string(yys3976Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3976 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3978 := &x.Max
				yyv3978.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3979 := &x.Min
				yyv3979.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3980 := &x.Default
				yyv3980.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3981 := &x.DefaultRequest
				yyv3981.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3982 := &x.MaxLimitRequestRatio
				yyv3982.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3976)
		} // end switch yys3976
	} // end for yyj3976
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3983 int
	var yyb3983 bool
	var yyhl3983 bool = l >= 0
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3985 := &x.Max
		yyv3985.CodecDecodeSelf(d)
	}
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3986 := &x.Min
		yyv3986.CodecDecodeSelf(d)
	}
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3987 := &x.Default
		yyv3987.CodecDecodeSelf(d)
	}
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3988 := &x.DefaultRequest
		yyv3988.CodecDecodeSelf(d)
	}
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3989 := &x.MaxLimitRequestRatio
		yyv3989.CodecDecodeSelf(d)
	}
	for {
		yyj3983++
		if yyhl3983 {
			yyb3983 = yyj3983 > l
		} else {
			yyb3983 = r.CheckBreak()
		}
		if yyb3983 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3983-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3990 := z.EncBinary()
		_ = yym3990
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3991 := !z.EncBinary()
			yy2arr3991 := z.EncBasicHandle().StructToArray
			var yyq3991 [1]bool
			_, _, _ = yysep3991, yyq3991, yy2arr3991
			const yyr3991 bool = false
			var yynn3991 int
			if yyr3991 || yy2arr3991 {
				r.EncodeArrayStart(1)
			} else {
				yynn3991 = 1
				for _, b := range yyq3991 {
					if b {
						yynn3991++
					}
				}
				r.EncodeMapStart(yynn3991)
				yynn3991 = 0
			}
			if yyr3991 || yy2arr3991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3993 := z.EncBinary()
					_ = yym3993
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3994 := z.EncBinary()
					_ = yym3994
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3991 || yy2arr3991 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3995 := z.DecBinary()
	_ = yym3995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3996 := r.ContainerType()
		if yyct3996 == codecSelferValueTypeMap1234 {
			yyl3996 := r.ReadMapStart()
			if yyl3996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3996, d)
			}
		} else if yyct3996 == codecSelferValueTypeArray1234 {
			yyl3996 := r.ReadArrayStart()
			if yyl3996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3997Slc
	var yyhl3997 bool = l >= 0
	for yyj3997 := 0; ; yyj3997++ {
		if yyhl3997 {
			if yyj3997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3997Slc = r.DecodeBytes(yys3997Slc, true, true)
		yys3997 := string(yys3997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3997 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3998 := &x.Limits
				yym3999 := z.DecBinary()
				_ = yym3999
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3998), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3997)
		} // end switch yys3997
	} // end for yyj3997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4000 int
	var yyb4000 bool
	var yyhl4000 bool = l >= 0
	yyj4000++
	if yyhl4000 {
		yyb4000 = yyj4000 > l
	} else {
		yyb4000 = r.CheckBreak()
	}
	if yyb4000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4001 := &x.Limits
		yym4002 := z.DecBinary()
		_ = yym4002
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4001), d)
		}
	}
	for {
		yyj4000++
		if yyhl4000 {
			yyb4000 = yyj4000 > l
		} else {
			yyb4000 = r.CheckBreak()
		}
		if yyb4000 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4000-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4003 := z.EncBinary()
		_ = yym4003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4004 := !z.EncBinary()
			yy2arr4004 := z.EncBasicHandle().StructToArray
			var yyq4004 [4]bool
			_, _, _ = yysep4004, yyq4004, yy2arr4004
			const yyr4004 bool = false
			yyq4004[0] = x.Kind != ""
			yyq4004[1] = x.APIVersion != ""
			yyq4004[2] = true
			yyq4004[3] = true
			var yynn4004 int
			if yyr4004 || yy2arr4004 {
				r.EncodeArrayStart(4)
			} else {
				yynn4004 = 0
				for _, b := range yyq4004 {
					if b {
						yynn4004++
					}
				}
				r.EncodeMapStart(yynn4004)
				yynn4004 = 0
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[0] {
					yym4006 := z.EncBinary()
					_ = yym4006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4004[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[1] {
					yym4009 := z.EncBinary()
					_ = yym4009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4004[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4010 := z.EncBinary()
					_ = yym4010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[2] {
					yy4012 := &x.ObjectMeta
					yy4012.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4004[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4013 := &x.ObjectMeta
					yy4013.CodecEncodeSelf(e)
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4004[3] {
					yy4015 := &x.Spec
					yy4015.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4004[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4016 := &x.Spec
					yy4016.CodecEncodeSelf(e)
				}
			}
			if yyr4004 || yy2arr4004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4017 := z.DecBinary()
	_ = yym4017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4018 := r.ContainerType()
		if yyct4018 == codecSelferValueTypeMap1234 {
			yyl4018 := r.ReadMapStart()
			if yyl4018 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4018, d)
			}
		} else if yyct4018 == codecSelferValueTypeArray1234 {
			yyl4018 := r.ReadArrayStart()
			if yyl4018 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4018, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4019Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4019Slc
	var yyhl4019 bool = l >= 0
	for yyj4019 := 0; ; yyj4019++ {
		if yyhl4019 {
			if yyj4019 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4019Slc = r.DecodeBytes(yys4019Slc, true, true)
		yys4019 := string(yys4019Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4019 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4022 := &x.ObjectMeta
				yyv4022.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4023 := &x.Spec
				yyv4023.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4019)
		} // end switch yys4019
	} // end for yyj4019
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4024 int
	var yyb4024 bool
	var yyhl4024 bool = l >= 0
	yyj4024++
	if yyhl4024 {
		yyb4024 = yyj4024 > l
	} else {
		yyb4024 = r.CheckBreak()
	}
	if yyb4024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4024++
	if yyhl4024 {
		yyb4024 = yyj4024 > l
	} else {
		yyb4024 = r.CheckBreak()
	}
	if yyb4024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4024++
	if yyhl4024 {
		yyb4024 = yyj4024 > l
	} else {
		yyb4024 = r.CheckBreak()
	}
	if yyb4024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4027 := &x.ObjectMeta
		yyv4027.CodecDecodeSelf(d)
	}
	yyj4024++
	if yyhl4024 {
		yyb4024 = yyj4024 > l
	} else {
		yyb4024 = r.CheckBreak()
	}
	if yyb4024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4028 := &x.Spec
		yyv4028.CodecDecodeSelf(d)
	}
	for {
		yyj4024++
		if yyhl4024 {
			yyb4024 = yyj4024 > l
		} else {
			yyb4024 = r.CheckBreak()
		}
		if yyb4024 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4024-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4029 := z.EncBinary()
		_ = yym4029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4030 := !z.EncBinary()
			yy2arr4030 := z.EncBasicHandle().StructToArray
			var yyq4030 [4]bool
			_, _, _ = yysep4030, yyq4030, yy2arr4030
			const yyr4030 bool = false
			yyq4030[0] = x.Kind != ""
			yyq4030[1] = x.APIVersion != ""
			yyq4030[2] = true
			var yynn4030 int
			if yyr4030 || yy2arr4030 {
				r.EncodeArrayStart(4)
			} else {
				yynn4030 = 1
				for _, b := range yyq4030 {
					if b {
						yynn4030++
					}
				}
				r.EncodeMapStart(yynn4030)
				yynn4030 = 0
			}
			if yyr4030 || yy2arr4030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4030[0] {
					yym4032 := z.EncBinary()
					_ = yym4032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4030[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4033 := z.EncBinary()
					_ = yym4033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4030 || yy2arr4030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4030[1] {
					yym4035 := z.EncBinary()
					_ = yym4035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4030[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4036 := z.EncBinary()
					_ = yym4036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4030 || yy2arr4030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4030[2] {
					yy4038 := &x.ListMeta
					yym4039 := z.EncBinary()
					_ = yym4039
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4038) {
					} else {
						z.EncFallback(yy4038)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4030[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4040 := &x.ListMeta
					yym4041 := z.EncBinary()
					_ = yym4041
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4040) {
					} else {
						z.EncFallback(yy4040)
					}
				}
			}
			if yyr4030 || yy2arr4030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4044 := z.EncBinary()
					_ = yym4044
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4030 || yy2arr4030 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4045 := z.DecBinary()
	_ = yym4045
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4046 := r.ContainerType()
		if yyct4046 == codecSelferValueTypeMap1234 {
			yyl4046 := r.ReadMapStart()
			if yyl4046 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4046, d)
			}
		} else if yyct4046 == codecSelferValueTypeArray1234 {
			yyl4046 := r.ReadArrayStart()
			if yyl4046 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4046, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4047Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4047Slc
	var yyhl4047 bool = l >= 0
	for yyj4047 := 0; ; yyj4047++ {
		if yyhl4047 {
			if yyj4047 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4047Slc = r.DecodeBytes(yys4047Slc, true, true)
		yys4047 := string(yys4047Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4047 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4050 := &x.ListMeta
				yym4051 := z.DecBinary()
				_ = yym4051
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4050) {
				} else {
					z.DecFallback(yyv4050, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4052 := &x.Items
				yym4053 := z.DecBinary()
				_ = yym4053
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4052), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4047)
		} // end switch yys4047
	} // end for yyj4047
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4054 int
	var yyb4054 bool
	var yyhl4054 bool = l >= 0
	yyj4054++
	if yyhl4054 {
		yyb4054 = yyj4054 > l
	} else {
		yyb4054 = r.CheckBreak()
	}
	if yyb4054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4054++
	if yyhl4054 {
		yyb4054 = yyj4054 > l
	} else {
		yyb4054 = r.CheckBreak()
	}
	if yyb4054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4054++
	if yyhl4054 {
		yyb4054 = yyj4054 > l
	} else {
		yyb4054 = r.CheckBreak()
	}
	if yyb4054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4057 := &x.ListMeta
		yym4058 := z.DecBinary()
		_ = yym4058
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4057) {
		} else {
			z.DecFallback(yyv4057, false)
		}
	}
	yyj4054++
	if yyhl4054 {
		yyb4054 = yyj4054 > l
	} else {
		yyb4054 = r.CheckBreak()
	}
	if yyb4054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4059 := &x.Items
		yym4060 := z.DecBinary()
		_ = yym4060
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4059), d)
		}
	}
	for {
		yyj4054++
		if yyhl4054 {
			yyb4054 = yyj4054 > l
		} else {
			yyb4054 = r.CheckBreak()
		}
		if yyb4054 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4054-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4061 := z.EncBinary()
	_ = yym4061
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4062 := z.DecBinary()
	_ = yym4062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4063 := z.EncBinary()
		_ = yym4063
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4064 := !z.EncBinary()
			yy2arr4064 := z.EncBasicHandle().StructToArray
			var yyq4064 [2]bool
			_, _, _ = yysep4064, yyq4064, yy2arr4064
			const yyr4064 bool = false
			yyq4064[0] = len(x.Hard) != 0
			yyq4064[1] = len(x.Scopes) != 0
			var yynn4064 int
			if yyr4064 || yy2arr4064 {
				r.EncodeArrayStart(2)
			} else {
				yynn4064 = 0
				for _, b := range yyq4064 {
					if b {
						yynn4064++
					}
				}
				r.EncodeMapStart(yynn4064)
				yynn4064 = 0
			}
			if yyr4064 || yy2arr4064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4064[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4064[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4064 || yy2arr4064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4064[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4067 := z.EncBinary()
						_ = yym4067
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4064[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4068 := z.EncBinary()
						_ = yym4068
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4064 || yy2arr4064 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4069 := z.DecBinary()
	_ = yym4069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4070 := r.ContainerType()
		if yyct4070 == codecSelferValueTypeMap1234 {
			yyl4070 := r.ReadMapStart()
			if yyl4070 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4070, d)
			}
		} else if yyct4070 == codecSelferValueTypeArray1234 {
			yyl4070 := r.ReadArrayStart()
			if yyl4070 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4070, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4071Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4071Slc
	var yyhl4071 bool = l >= 0
	for yyj4071 := 0; ; yyj4071++ {
		if yyhl4071 {
			if yyj4071 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4071Slc = r.DecodeBytes(yys4071Slc, true, true)
		yys4071 := string(yys4071Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4071 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4072 := &x.Hard
				yyv4072.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4073 := &x.Scopes
				yym4074 := z.DecBinary()
				_ = yym4074
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4073), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4071)
		} // end switch yys4071
	} // end for yyj4071
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4075 int
	var yyb4075 bool
	var yyhl4075 bool = l >= 0
	yyj4075++
	if yyhl4075 {
		yyb4075 = yyj4075 > l
	} else {
		yyb4075 = r.CheckBreak()
	}
	if yyb4075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4076 := &x.Hard
		yyv4076.CodecDecodeSelf(d)
	}
	yyj4075++
	if yyhl4075 {
		yyb4075 = yyj4075 > l
	} else {
		yyb4075 = r.CheckBreak()
	}
	if yyb4075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4077 := &x.Scopes
		yym4078 := z.DecBinary()
		_ = yym4078
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4077), d)
		}
	}
	for {
		yyj4075++
		if yyhl4075 {
			yyb4075 = yyj4075 > l
		} else {
			yyb4075 = r.CheckBreak()
		}
		if yyb4075 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4075-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4079 := z.EncBinary()
		_ = yym4079
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4080 := !z.EncBinary()
			yy2arr4080 := z.EncBasicHandle().StructToArray
			var yyq4080 [2]bool
			_, _, _ = yysep4080, yyq4080, yy2arr4080
			const yyr4080 bool = false
			yyq4080[0] = len(x.Hard) != 0
			yyq4080[1] = len(x.Used) != 0
			var yynn4080 int
			if yyr4080 || yy2arr4080 {
				r.EncodeArrayStart(2)
			} else {
				yynn4080 = 0
				for _, b := range yyq4080 {
					if b {
						yynn4080++
					}
				}
				r.EncodeMapStart(yynn4080)
				yynn4080 = 0
			}
			if yyr4080 || yy2arr4080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4080[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4080[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4080 || yy2arr4080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4080[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4080[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4080 || yy2arr4080 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4083 := z.DecBinary()
	_ = yym4083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4084 := r.ContainerType()
		if yyct4084 == codecSelferValueTypeMap1234 {
			yyl4084 := r.ReadMapStart()
			if yyl4084 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4084, d)
			}
		} else if yyct4084 == codecSelferValueTypeArray1234 {
			yyl4084 := r.ReadArrayStart()
			if yyl4084 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4084, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4085Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4085Slc
	var yyhl4085 bool = l >= 0
	for yyj4085 := 0; ; yyj4085++ {
		if yyhl4085 {
			if yyj4085 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4085Slc = r.DecodeBytes(yys4085Slc, true, true)
		yys4085 := string(yys4085Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4085 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4086 := &x.Hard
				yyv4086.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4087 := &x.Used
				yyv4087.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4085)
		} // end switch yys4085
	} // end for yyj4085
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4088 int
	var yyb4088 bool
	var yyhl4088 bool = l >= 0
	yyj4088++
	if yyhl4088 {
		yyb4088 = yyj4088 > l
	} else {
		yyb4088 = r.CheckBreak()
	}
	if yyb4088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4089 := &x.Hard
		yyv4089.CodecDecodeSelf(d)
	}
	yyj4088++
	if yyhl4088 {
		yyb4088 = yyj4088 > l
	} else {
		yyb4088 = r.CheckBreak()
	}
	if yyb4088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4090 := &x.Used
		yyv4090.CodecDecodeSelf(d)
	}
	for {
		yyj4088++
		if yyhl4088 {
			yyb4088 = yyj4088 > l
		} else {
			yyb4088 = r.CheckBreak()
		}
		if yyb4088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4091 := z.EncBinary()
		_ = yym4091
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4092 := !z.EncBinary()
			yy2arr4092 := z.EncBasicHandle().StructToArray
			var yyq4092 [5]bool
			_, _, _ = yysep4092, yyq4092, yy2arr4092
			const yyr4092 bool = false
			yyq4092[0] = x.Kind != ""
			yyq4092[1] = x.APIVersion != ""
			yyq4092[2] = true
			yyq4092[3] = true
			yyq4092[4] = true
			var yynn4092 int
			if yyr4092 || yy2arr4092 {
				r.EncodeArrayStart(5)
			} else {
				yynn4092 = 0
				for _, b := range yyq4092 {
					if b {
						yynn4092++
					}
				}
				r.EncodeMapStart(yynn4092)
				yynn4092 = 0
			}
			if yyr4092 || yy2arr4092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4092[0] {
					yym4094 := z.EncBinary()
					_ = yym4094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4092[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4095 := z.EncBinary()
					_ = yym4095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4092 || yy2arr4092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4092[1] {
					yym4097 := z.EncBinary()
					_ = yym4097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4092[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4098 := z.EncBinary()
					_ = yym4098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4092 || yy2arr4092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4092[2] {
					yy4100 := &x.ObjectMeta
					yy4100.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4092[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4101 := &x.ObjectMeta
					yy4101.CodecEncodeSelf(e)
				}
			}
			if yyr4092 || yy2arr4092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4092[3] {
					yy4103 := &x.Spec
					yy4103.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4092[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4104 := &x.Spec
					yy4104.CodecEncodeSelf(e)
				}
			}
			if yyr4092 || yy2arr4092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4092[4] {
					yy4106 := &x.Status
					yy4106.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4092[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4107 := &x.Status
					yy4107.CodecEncodeSelf(e)
				}
			}
			if yyr4092 || yy2arr4092 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4108 := z.DecBinary()
	_ = yym4108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4109 := r.ContainerType()
		if yyct4109 == codecSelferValueTypeMap1234 {
			yyl4109 := r.ReadMapStart()
			if yyl4109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4109, d)
			}
		} else if yyct4109 == codecSelferValueTypeArray1234 {
			yyl4109 := r.ReadArrayStart()
			if yyl4109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4110Slc
	var yyhl4110 bool = l >= 0
	for yyj4110 := 0; ; yyj4110++ {
		if yyhl4110 {
			if yyj4110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4110Slc = r.DecodeBytes(yys4110Slc, true, true)
		yys4110 := string(yys4110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4110 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4113 := &x.ObjectMeta
				yyv4113.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4114 := &x.Spec
				yyv4114.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4115 := &x.Status
				yyv4115.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4110)
		} // end switch yys4110
	} // end for yyj4110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4116 int
	var yyb4116 bool
	var yyhl4116 bool = l >= 0
	yyj4116++
	if yyhl4116 {
		yyb4116 = yyj4116 > l
	} else {
		yyb4116 = r.CheckBreak()
	}
	if yyb4116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4116++
	if yyhl4116 {
		yyb4116 = yyj4116 > l
	} else {
		yyb4116 = r.CheckBreak()
	}
	if yyb4116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4116++
	if yyhl4116 {
		yyb4116 = yyj4116 > l
	} else {
		yyb4116 = r.CheckBreak()
	}
	if yyb4116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4119 := &x.ObjectMeta
		yyv4119.CodecDecodeSelf(d)
	}
	yyj4116++
	if yyhl4116 {
		yyb4116 = yyj4116 > l
	} else {
		yyb4116 = r.CheckBreak()
	}
	if yyb4116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4120 := &x.Spec
		yyv4120.CodecDecodeSelf(d)
	}
	yyj4116++
	if yyhl4116 {
		yyb4116 = yyj4116 > l
	} else {
		yyb4116 = r.CheckBreak()
	}
	if yyb4116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4121 := &x.Status
		yyv4121.CodecDecodeSelf(d)
	}
	for {
		yyj4116++
		if yyhl4116 {
			yyb4116 = yyj4116 > l
		} else {
			yyb4116 = r.CheckBreak()
		}
		if yyb4116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4122 := z.EncBinary()
		_ = yym4122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4123 := !z.EncBinary()
			yy2arr4123 := z.EncBasicHandle().StructToArray
			var yyq4123 [4]bool
			_, _, _ = yysep4123, yyq4123, yy2arr4123
			const yyr4123 bool = false
			yyq4123[0] = x.Kind != ""
			yyq4123[1] = x.APIVersion != ""
			yyq4123[2] = true
			var yynn4123 int
			if yyr4123 || yy2arr4123 {
				r.EncodeArrayStart(4)
			} else {
				yynn4123 = 1
				for _, b := range yyq4123 {
					if b {
						yynn4123++
					}
				}
				r.EncodeMapStart(yynn4123)
				yynn4123 = 0
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[0] {
					yym4125 := z.EncBinary()
					_ = yym4125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4123[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4126 := z.EncBinary()
					_ = yym4126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[1] {
					yym4128 := z.EncBinary()
					_ = yym4128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4123[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4129 := z.EncBinary()
					_ = yym4129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[2] {
					yy4131 := &x.ListMeta
					yym4132 := z.EncBinary()
					_ = yym4132
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4131) {
					} else {
						z.EncFallback(yy4131)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4123[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4133 := &x.ListMeta
					yym4134 := z.EncBinary()
					_ = yym4134
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4133) {
					} else {
						z.EncFallback(yy4133)
					}
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4136 := z.EncBinary()
					_ = yym4136
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4138 := z.DecBinary()
	_ = yym4138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4139 := r.ContainerType()
		if yyct4139 == codecSelferValueTypeMap1234 {
			yyl4139 := r.ReadMapStart()
			if yyl4139 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4139, d)
			}
		} else if yyct4139 == codecSelferValueTypeArray1234 {
			yyl4139 := r.ReadArrayStart()
			if yyl4139 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4140Slc
	var yyhl4140 bool = l >= 0
	for yyj4140 := 0; ; yyj4140++ {
		if yyhl4140 {
			if yyj4140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4140Slc = r.DecodeBytes(yys4140Slc, true, true)
		yys4140 := string(yys4140Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4140 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4143 := &x.ListMeta
				yym4144 := z.DecBinary()
				_ = yym4144
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4143) {
				} else {
					z.DecFallback(yyv4143, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4145 := &x.Items
				yym4146 := z.DecBinary()
				_ = yym4146
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4145), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4140)
		} // end switch yys4140
	} // end for yyj4140
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4147 int
	var yyb4147 bool
	var yyhl4147 bool = l >= 0
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4150 := &x.ListMeta
		yym4151 := z.DecBinary()
		_ = yym4151
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4150) {
		} else {
			z.DecFallback(yyv4150, false)
		}
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4152 := &x.Items
		yym4153 := z.DecBinary()
		_ = yym4153
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4152), d)
		}
	}
	for {
		yyj4147++
		if yyhl4147 {
			yyb4147 = yyj4147 > l
		} else {
			yyb4147 = r.CheckBreak()
		}
		if yyb4147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4154 := z.EncBinary()
		_ = yym4154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4155 := !z.EncBinary()
			yy2arr4155 := z.EncBasicHandle().StructToArray
			var yyq4155 [6]bool
			_, _, _ = yysep4155, yyq4155, yy2arr4155
			const yyr4155 bool = false
			yyq4155[0] = x.Kind != ""
			yyq4155[1] = x.APIVersion != ""
			yyq4155[2] = true
			yyq4155[3] = len(x.Data) != 0
			yyq4155[4] = len(x.StringData) != 0
			yyq4155[5] = x.Type != ""
			var yynn4155 int
			if yyr4155 || yy2arr4155 {
				r.EncodeArrayStart(6)
			} else {
				yynn4155 = 0
				for _, b := range yyq4155 {
					if b {
						yynn4155++
					}
				}
				r.EncodeMapStart(yynn4155)
				yynn4155 = 0
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4155[0] {
					yym4157 := z.EncBinary()
					_ = yym4157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4155[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4158 := z.EncBinary()
					_ = yym4158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4155[1] {
					yym4160 := z.EncBinary()
					_ = yym4160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4155[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4161 := z.EncBinary()
					_ = yym4161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4155[2] {
					yy4163 := &x.ObjectMeta
					yy4163.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4155[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4164 := &x.ObjectMeta
					yy4164.CodecEncodeSelf(e)
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4155[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4166 := z.EncBinary()
						_ = yym4166
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4155[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4167 := z.EncBinary()
						_ = yym4167
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4155[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4169 := z.EncBinary()
						_ = yym4169
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4155[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4170 := z.EncBinary()
						_ = yym4170
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4155[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4155[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4172 := z.DecBinary()
	_ = yym4172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4173 := r.ContainerType()
		if yyct4173 == codecSelferValueTypeMap1234 {
			yyl4173 := r.ReadMapStart()
			if yyl4173 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4173, d)
			}
		} else if yyct4173 == codecSelferValueTypeArray1234 {
			yyl4173 := r.ReadArrayStart()
			if yyl4173 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4174Slc
	var yyhl4174 bool = l >= 0
	for yyj4174 := 0; ; yyj4174++ {
		if yyhl4174 {
			if yyj4174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4174Slc = r.DecodeBytes(yys4174Slc, true, true)
		yys4174 := string(yys4174Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4174 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4177 := &x.ObjectMeta
				yyv4177.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4178 := &x.Data
				yym4179 := z.DecBinary()
				_ = yym4179
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4178), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4180 := &x.StringData
				yym4181 := z.DecBinary()
				_ = yym4181
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4180, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4174)
		} // end switch yys4174
	} // end for yyj4174
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4183 int
	var yyb4183 bool
	var yyhl4183 bool = l >= 0
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4186 := &x.ObjectMeta
		yyv4186.CodecDecodeSelf(d)
	}
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4187 := &x.Data
		yym4188 := z.DecBinary()
		_ = yym4188
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4187), d)
		}
	}
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4189 := &x.StringData
		yym4190 := z.DecBinary()
		_ = yym4190
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4189, false, d)
		}
	}
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4183++
		if yyhl4183 {
			yyb4183 = yyj4183 > l
		} else {
			yyb4183 = r.CheckBreak()
		}
		if yyb4183 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4183-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4192 := z.EncBinary()
	_ = yym4192
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4193 := z.DecBinary()
	_ = yym4193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4194 := z.EncBinary()
		_ = yym4194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4195 := !z.EncBinary()
			yy2arr4195 := z.EncBasicHandle().StructToArray
			var yyq4195 [4]bool
			_, _, _ = yysep4195, yyq4195, yy2arr4195
			const yyr4195 bool = false
			yyq4195[0] = x.Kind != ""
			yyq4195[1] = x.APIVersion != ""
			yyq4195[2] = true
			var yynn4195 int
			if yyr4195 || yy2arr4195 {
				r.EncodeArrayStart(4)
			} else {
				yynn4195 = 1
				for _, b := range yyq4195 {
					if b {
						yynn4195++
					}
				}
				r.EncodeMapStart(yynn4195)
				yynn4195 = 0
			}
			if yyr4195 || yy2arr4195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4195[0] {
					yym4197 := z.EncBinary()
					_ = yym4197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4195[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4198 := z.EncBinary()
					_ = yym4198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4195 || yy2arr4195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4195[1] {
					yym4200 := z.EncBinary()
					_ = yym4200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4195[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4201 := z.EncBinary()
					_ = yym4201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4195 || yy2arr4195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4195[2] {
					yy4203 := &x.ListMeta
					yym4204 := z.EncBinary()
					_ = yym4204
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4203) {
					} else {
						z.EncFallback(yy4203)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4195[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4205 := &x.ListMeta
					yym4206 := z.EncBinary()
					_ = yym4206
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4205) {
					} else {
						z.EncFallback(yy4205)
					}
				}
			}
			if yyr4195 || yy2arr4195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4208 := z.EncBinary()
					_ = yym4208
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4209 := z.EncBinary()
					_ = yym4209
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4195 || yy2arr4195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4210 := z.DecBinary()
	_ = yym4210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4211 := r.ContainerType()
		if yyct4211 == codecSelferValueTypeMap1234 {
			yyl4211 := r.ReadMapStart()
			if yyl4211 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4211, d)
			}
		} else if yyct4211 == codecSelferValueTypeArray1234 {
			yyl4211 := r.ReadArrayStart()
			if yyl4211 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4212Slc
	var yyhl4212 bool = l >= 0
	for yyj4212 := 0; ; yyj4212++ {
		if yyhl4212 {
			if yyj4212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4212Slc = r.DecodeBytes(yys4212Slc, true, true)
		yys4212 := string(yys4212Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4212 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4215 := &x.ListMeta
				yym4216 := z.DecBinary()
				_ = yym4216
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4215) {
				} else {
					z.DecFallback(yyv4215, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4217 := &x.Items
				yym4218 := z.DecBinary()
				_ = yym4218
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4217), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4212)
		} // end switch yys4212
	} // end for yyj4212
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4219 int
	var yyb4219 bool
	var yyhl4219 bool = l >= 0
	yyj4219++
	if yyhl4219 {
		yyb4219 = yyj4219 > l
	} else {
		yyb4219 = r.CheckBreak()
	}
	if yyb4219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4219++
	if yyhl4219 {
		yyb4219 = yyj4219 > l
	} else {
		yyb4219 = r.CheckBreak()
	}
	if yyb4219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4219++
	if yyhl4219 {
		yyb4219 = yyj4219 > l
	} else {
		yyb4219 = r.CheckBreak()
	}
	if yyb4219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4222 := &x.ListMeta
		yym4223 := z.DecBinary()
		_ = yym4223
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4222) {
		} else {
			z.DecFallback(yyv4222, false)
		}
	}
	yyj4219++
	if yyhl4219 {
		yyb4219 = yyj4219 > l
	} else {
		yyb4219 = r.CheckBreak()
	}
	if yyb4219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4224 := &x.Items
		yym4225 := z.DecBinary()
		_ = yym4225
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4224), d)
		}
	}
	for {
		yyj4219++
		if yyhl4219 {
			yyb4219 = yyj4219 > l
		} else {
			yyb4219 = r.CheckBreak()
		}
		if yyb4219 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4219-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4226 := z.EncBinary()
		_ = yym4226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4227 := !z.EncBinary()
			yy2arr4227 := z.EncBasicHandle().StructToArray
			var yyq4227 [4]bool
			_, _, _ = yysep4227, yyq4227, yy2arr4227
			const yyr4227 bool = false
			yyq4227[0] = x.Kind != ""
			yyq4227[1] = x.APIVersion != ""
			yyq4227[2] = true
			yyq4227[3] = len(x.Data) != 0
			var yynn4227 int
			if yyr4227 || yy2arr4227 {
				r.EncodeArrayStart(4)
			} else {
				yynn4227 = 0
				for _, b := range yyq4227 {
					if b {
						yynn4227++
					}
				}
				r.EncodeMapStart(yynn4227)
				yynn4227 = 0
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[0] {
					yym4229 := z.EncBinary()
					_ = yym4229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4227[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[1] {
					yym4232 := z.EncBinary()
					_ = yym4232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4227[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4233 := z.EncBinary()
					_ = yym4233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[2] {
					yy4235 := &x.ObjectMeta
					yy4235.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4227[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4236 := &x.ObjectMeta
					yy4236.CodecEncodeSelf(e)
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4238 := z.EncBinary()
						_ = yym4238
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4227[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4239 := z.EncBinary()
						_ = yym4239
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4240 := z.DecBinary()
	_ = yym4240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4241 := r.ContainerType()
		if yyct4241 == codecSelferValueTypeMap1234 {
			yyl4241 := r.ReadMapStart()
			if yyl4241 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4241, d)
			}
		} else if yyct4241 == codecSelferValueTypeArray1234 {
			yyl4241 := r.ReadArrayStart()
			if yyl4241 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4242Slc
	var yyhl4242 bool = l >= 0
	for yyj4242 := 0; ; yyj4242++ {
		if yyhl4242 {
			if yyj4242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4242Slc = r.DecodeBytes(yys4242Slc, true, true)
		yys4242 := string(yys4242Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4242 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4245 := &x.ObjectMeta
				yyv4245.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4246 := &x.Data
				yym4247 := z.DecBinary()
				_ = yym4247
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4246, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4242)
		} // end switch yys4242
	} // end for yyj4242
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4248 int
	var yyb4248 bool
	var yyhl4248 bool = l >= 0
	yyj4248++
	if yyhl4248 {
		yyb4248 = yyj4248 > l
	} else {
		yyb4248 = r.CheckBreak()
	}
	if yyb4248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4248++
	if yyhl4248 {
		yyb4248 = yyj4248 > l
	} else {
		yyb4248 = r.CheckBreak()
	}
	if yyb4248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4248++
	if yyhl4248 {
		yyb4248 = yyj4248 > l
	} else {
		yyb4248 = r.CheckBreak()
	}
	if yyb4248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4251 := &x.ObjectMeta
		yyv4251.CodecDecodeSelf(d)
	}
	yyj4248++
	if yyhl4248 {
		yyb4248 = yyj4248 > l
	} else {
		yyb4248 = r.CheckBreak()
	}
	if yyb4248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4252 := &x.Data
		yym4253 := z.DecBinary()
		_ = yym4253
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4252, false, d)
		}
	}
	for {
		yyj4248++
		if yyhl4248 {
			yyb4248 = yyj4248 > l
		} else {
			yyb4248 = r.CheckBreak()
		}
		if yyb4248 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4248-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4254 := z.EncBinary()
		_ = yym4254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4255 := !z.EncBinary()
			yy2arr4255 := z.EncBasicHandle().StructToArray
			var yyq4255 [4]bool
			_, _, _ = yysep4255, yyq4255, yy2arr4255
			const yyr4255 bool = false
			yyq4255[0] = x.Kind != ""
			yyq4255[1] = x.APIVersion != ""
			yyq4255[2] = true
			var yynn4255 int
			if yyr4255 || yy2arr4255 {
				r.EncodeArrayStart(4)
			} else {
				yynn4255 = 1
				for _, b := range yyq4255 {
					if b {
						yynn4255++
					}
				}
				r.EncodeMapStart(yynn4255)
				yynn4255 = 0
			}
			if yyr4255 || yy2arr4255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4255[0] {
					yym4257 := z.EncBinary()
					_ = yym4257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4255[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4258 := z.EncBinary()
					_ = yym4258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4255 || yy2arr4255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4255[1] {
					yym4260 := z.EncBinary()
					_ = yym4260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4261 := z.EncBinary()
					_ = yym4261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4255 || yy2arr4255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4255[2] {
					yy4263 := &x.ListMeta
					yym4264 := z.EncBinary()
					_ = yym4264
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4263) {
					} else {
						z.EncFallback(yy4263)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4255[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4265 := &x.ListMeta
					yym4266 := z.EncBinary()
					_ = yym4266
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4265) {
					} else {
						z.EncFallback(yy4265)
					}
				}
			}
			if yyr4255 || yy2arr4255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4268 := z.EncBinary()
					_ = yym4268
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4269 := z.EncBinary()
					_ = yym4269
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4255 || yy2arr4255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4270 := z.DecBinary()
	_ = yym4270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4271 := r.ContainerType()
		if yyct4271 == codecSelferValueTypeMap1234 {
			yyl4271 := r.ReadMapStart()
			if yyl4271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4271, d)
			}
		} else if yyct4271 == codecSelferValueTypeArray1234 {
			yyl4271 := r.ReadArrayStart()
			if yyl4271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4272Slc
	var yyhl4272 bool = l >= 0
	for yyj4272 := 0; ; yyj4272++ {
		if yyhl4272 {
			if yyj4272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4272Slc = r.DecodeBytes(yys4272Slc, true, true)
		yys4272 := string(yys4272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4272 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4275 := &x.ListMeta
				yym4276 := z.DecBinary()
				_ = yym4276
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4275) {
				} else {
					z.DecFallback(yyv4275, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4277 := &x.Items
				yym4278 := z.DecBinary()
				_ = yym4278
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4277), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4272)
		} // end switch yys4272
	} // end for yyj4272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4279 int
	var yyb4279 bool
	var yyhl4279 bool = l >= 0
	yyj4279++
	if yyhl4279 {
		yyb4279 = yyj4279 > l
	} else {
		yyb4279 = r.CheckBreak()
	}
	if yyb4279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4279++
	if yyhl4279 {
		yyb4279 = yyj4279 > l
	} else {
		yyb4279 = r.CheckBreak()
	}
	if yyb4279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4279++
	if yyhl4279 {
		yyb4279 = yyj4279 > l
	} else {
		yyb4279 = r.CheckBreak()
	}
	if yyb4279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4282 := &x.ListMeta
		yym4283 := z.DecBinary()
		_ = yym4283
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4282) {
		} else {
			z.DecFallback(yyv4282, false)
		}
	}
	yyj4279++
	if yyhl4279 {
		yyb4279 = yyj4279 > l
	} else {
		yyb4279 = r.CheckBreak()
	}
	if yyb4279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4284 := &x.Items
		yym4285 := z.DecBinary()
		_ = yym4285
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4284), d)
		}
	}
	for {
		yyj4279++
		if yyhl4279 {
			yyb4279 = yyj4279 > l
		} else {
			yyb4279 = r.CheckBreak()
		}
		if yyb4279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4286 := z.EncBinary()
	_ = yym4286
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4287 := z.DecBinary()
	_ = yym4287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4288 := z.EncBinary()
		_ = yym4288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4289 := !z.EncBinary()
			yy2arr4289 := z.EncBasicHandle().StructToArray
			var yyq4289 [4]bool
			_, _, _ = yysep4289, yyq4289, yy2arr4289
			const yyr4289 bool = false
			yyq4289[2] = x.Message != ""
			yyq4289[3] = x.Error != ""
			var yynn4289 int
			if yyr4289 || yy2arr4289 {
				r.EncodeArrayStart(4)
			} else {
				yynn4289 = 2
				for _, b := range yyq4289 {
					if b {
						yynn4289++
					}
				}
				r.EncodeMapStart(yynn4289)
				yynn4289 = 0
			}
			if yyr4289 || yy2arr4289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4289 || yy2arr4289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4289 || yy2arr4289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4289[2] {
					yym4293 := z.EncBinary()
					_ = yym4293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4289[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4294 := z.EncBinary()
					_ = yym4294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4289 || yy2arr4289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4289[3] {
					yym4296 := z.EncBinary()
					_ = yym4296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4289[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4297 := z.EncBinary()
					_ = yym4297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4289 || yy2arr4289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4298 := z.DecBinary()
	_ = yym4298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4299 := r.ContainerType()
		if yyct4299 == codecSelferValueTypeMap1234 {
			yyl4299 := r.ReadMapStart()
			if yyl4299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4299, d)
			}
		} else if yyct4299 == codecSelferValueTypeArray1234 {
			yyl4299 := r.ReadArrayStart()
			if yyl4299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4300Slc
	var yyhl4300 bool = l >= 0
	for yyj4300 := 0; ; yyj4300++ {
		if yyhl4300 {
			if yyj4300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4300Slc = r.DecodeBytes(yys4300Slc, true, true)
		yys4300 := string(yys4300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4300 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4300)
		} // end switch yys4300
	} // end for yyj4300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4305 int
	var yyb4305 bool
	var yyhl4305 bool = l >= 0
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4305++
		if yyhl4305 {
			yyb4305 = yyj4305 > l
		} else {
			yyb4305 = r.CheckBreak()
		}
		if yyb4305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4310 := z.EncBinary()
		_ = yym4310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4311 := !z.EncBinary()
			yy2arr4311 := z.EncBasicHandle().StructToArray
			var yyq4311 [4]bool
			_, _, _ = yysep4311, yyq4311, yy2arr4311
			const yyr4311 bool = false
			yyq4311[0] = x.Kind != ""
			yyq4311[1] = x.APIVersion != ""
			yyq4311[2] = true
			yyq4311[3] = len(x.Conditions) != 0
			var yynn4311 int
			if yyr4311 || yy2arr4311 {
				r.EncodeArrayStart(4)
			} else {
				yynn4311 = 0
				for _, b := range yyq4311 {
					if b {
						yynn4311++
					}
				}
				r.EncodeMapStart(yynn4311)
				yynn4311 = 0
			}
			if yyr4311 || yy2arr4311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4311[0] {
					yym4313 := z.EncBinary()
					_ = yym4313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4311[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4314 := z.EncBinary()
					_ = yym4314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4311 || yy2arr4311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4311[1] {
					yym4316 := z.EncBinary()
					_ = yym4316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4311[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4317 := z.EncBinary()
					_ = yym4317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4311 || yy2arr4311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4311[2] {
					yy4319 := &x.ObjectMeta
					yy4319.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4311[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4320 := &x.ObjectMeta
					yy4320.CodecEncodeSelf(e)
				}
			}
			if yyr4311 || yy2arr4311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4311[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4322 := z.EncBinary()
						_ = yym4322
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4311[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4323 := z.EncBinary()
						_ = yym4323
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4311 || yy2arr4311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4324 := z.DecBinary()
	_ = yym4324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4325 := r.ContainerType()
		if yyct4325 == codecSelferValueTypeMap1234 {
			yyl4325 := r.ReadMapStart()
			if yyl4325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4325, d)
			}
		} else if yyct4325 == codecSelferValueTypeArray1234 {
			yyl4325 := r.ReadArrayStart()
			if yyl4325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4326Slc
	var yyhl4326 bool = l >= 0
	for yyj4326 := 0; ; yyj4326++ {
		if yyhl4326 {
			if yyj4326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4326Slc = r.DecodeBytes(yys4326Slc, true, true)
		yys4326 := string(yys4326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4326 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4329 := &x.ObjectMeta
				yyv4329.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4330 := &x.Conditions
				yym4331 := z.DecBinary()
				_ = yym4331
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4330), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4326)
		} // end switch yys4326
	} // end for yyj4326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4332 int
	var yyb4332 bool
	var yyhl4332 bool = l >= 0
	yyj4332++
	if yyhl4332 {
		yyb4332 = yyj4332 > l
	} else {
		yyb4332 = r.CheckBreak()
	}
	if yyb4332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4332++
	if yyhl4332 {
		yyb4332 = yyj4332 > l
	} else {
		yyb4332 = r.CheckBreak()
	}
	if yyb4332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4332++
	if yyhl4332 {
		yyb4332 = yyj4332 > l
	} else {
		yyb4332 = r.CheckBreak()
	}
	if yyb4332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4335 := &x.ObjectMeta
		yyv4335.CodecDecodeSelf(d)
	}
	yyj4332++
	if yyhl4332 {
		yyb4332 = yyj4332 > l
	} else {
		yyb4332 = r.CheckBreak()
	}
	if yyb4332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4336 := &x.Conditions
		yym4337 := z.DecBinary()
		_ = yym4337
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4336), d)
		}
	}
	for {
		yyj4332++
		if yyhl4332 {
			yyb4332 = yyj4332 > l
		} else {
			yyb4332 = r.CheckBreak()
		}
		if yyb4332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4338 := z.EncBinary()
		_ = yym4338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4339 := !z.EncBinary()
			yy2arr4339 := z.EncBasicHandle().StructToArray
			var yyq4339 [4]bool
			_, _, _ = yysep4339, yyq4339, yy2arr4339
			const yyr4339 bool = false
			yyq4339[0] = x.Kind != ""
			yyq4339[1] = x.APIVersion != ""
			yyq4339[2] = true
			var yynn4339 int
			if yyr4339 || yy2arr4339 {
				r.EncodeArrayStart(4)
			} else {
				yynn4339 = 1
				for _, b := range yyq4339 {
					if b {
						yynn4339++
					}
				}
				r.EncodeMapStart(yynn4339)
				yynn4339 = 0
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4339[0] {
					yym4341 := z.EncBinary()
					_ = yym4341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4339[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4342 := z.EncBinary()
					_ = yym4342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4339[1] {
					yym4344 := z.EncBinary()
					_ = yym4344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4339[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4339[2] {
					yy4347 := &x.ListMeta
					yym4348 := z.EncBinary()
					_ = yym4348
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4347) {
					} else {
						z.EncFallback(yy4347)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4339[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4349 := &x.ListMeta
					yym4350 := z.EncBinary()
					_ = yym4350
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4349) {
					} else {
						z.EncFallback(yy4349)
					}
				}
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4352 := z.EncBinary()
					_ = yym4352
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4353 := z.EncBinary()
					_ = yym4353
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4354 := z.DecBinary()
	_ = yym4354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4355 := r.ContainerType()
		if yyct4355 == codecSelferValueTypeMap1234 {
			yyl4355 := r.ReadMapStart()
			if yyl4355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4355, d)
			}
		} else if yyct4355 == codecSelferValueTypeArray1234 {
			yyl4355 := r.ReadArrayStart()
			if yyl4355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4356Slc
	var yyhl4356 bool = l >= 0
	for yyj4356 := 0; ; yyj4356++ {
		if yyhl4356 {
			if yyj4356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4356Slc = r.DecodeBytes(yys4356Slc, true, true)
		yys4356 := string(yys4356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4359 := &x.ListMeta
				yym4360 := z.DecBinary()
				_ = yym4360
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4359) {
				} else {
					z.DecFallback(yyv4359, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4361 := &x.Items
				yym4362 := z.DecBinary()
				_ = yym4362
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4361), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4356)
		} // end switch yys4356
	} // end for yyj4356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4363 int
	var yyb4363 bool
	var yyhl4363 bool = l >= 0
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4366 := &x.ListMeta
		yym4367 := z.DecBinary()
		_ = yym4367
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4366) {
		} else {
			z.DecFallback(yyv4366, false)
		}
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4368 := &x.Items
		yym4369 := z.DecBinary()
		_ = yym4369
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4368), d)
		}
	}
	for {
		yyj4363++
		if yyhl4363 {
			yyb4363 = yyj4363 > l
		} else {
			yyb4363 = r.CheckBreak()
		}
		if yyb4363 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4363-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4370 := z.EncBinary()
		_ = yym4370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4371 := !z.EncBinary()
			yy2arr4371 := z.EncBasicHandle().StructToArray
			var yyq4371 [2]bool
			_, _, _ = yysep4371, yyq4371, yy2arr4371
			const yyr4371 bool = false
			yyq4371[0] = len(x.Items) != 0
			yyq4371[1] = x.DefaultMode != nil
			var yynn4371 int
			if yyr4371 || yy2arr4371 {
				r.EncodeArrayStart(2)
			} else {
				yynn4371 = 0
				for _, b := range yyq4371 {
					if b {
						yynn4371++
					}
				}
				r.EncodeMapStart(yynn4371)
				yynn4371 = 0
			}
			if yyr4371 || yy2arr4371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4371[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4373 := z.EncBinary()
						_ = yym4373
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4371[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4374 := z.EncBinary()
						_ = yym4374
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4371 || yy2arr4371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4371[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4376 := *x.DefaultMode
						yym4377 := z.EncBinary()
						_ = yym4377
						if false {
						} else {
							r.EncodeInt(int64(yy4376))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4371[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4378 := *x.DefaultMode
						yym4379 := z.EncBinary()
						_ = yym4379
						if false {
						} else {
							r.EncodeInt(int64(yy4378))
						}
					}
				}
			}
			if yyr4371 || yy2arr4371 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4380 := z.DecBinary()
	_ = yym4380
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4381 := r.ContainerType()
		if yyct4381 == codecSelferValueTypeMap1234 {
			yyl4381 := r.ReadMapStart()
			if yyl4381 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4381, d)
			}
		} else if yyct4381 == codecSelferValueTypeArray1234 {
			yyl4381 := r.ReadArrayStart()
			if yyl4381 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4381, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4382Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4382Slc
	var yyhl4382 bool = l >= 0
	for yyj4382 := 0; ; yyj4382++ {
		if yyhl4382 {
			if yyj4382 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4382Slc = r.DecodeBytes(yys4382Slc, true, true)
		yys4382 := string(yys4382Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4382 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4383 := &x.Items
				yym4384 := z.DecBinary()
				_ = yym4384
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4383), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4386 := z.DecBinary()
				_ = yym4386
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4382)
		} // end switch yys4382
	} // end for yyj4382
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4387 int
	var yyb4387 bool
	var yyhl4387 bool = l >= 0
	yyj4387++
	if yyhl4387 {
		yyb4387 = yyj4387 > l
	} else {
		yyb4387 = r.CheckBreak()
	}
	if yyb4387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4388 := &x.Items
		yym4389 := z.DecBinary()
		_ = yym4389
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4388), d)
		}
	}
	yyj4387++
	if yyhl4387 {
		yyb4387 = yyj4387 > l
	} else {
		yyb4387 = r.CheckBreak()
	}
	if yyb4387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4391 := z.DecBinary()
		_ = yym4391
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4387++
		if yyhl4387 {
			yyb4387 = yyj4387 > l
		} else {
			yyb4387 = r.CheckBreak()
		}
		if yyb4387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4392 := z.EncBinary()
		_ = yym4392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4393 := !z.EncBinary()
			yy2arr4393 := z.EncBasicHandle().StructToArray
			var yyq4393 [4]bool
			_, _, _ = yysep4393, yyq4393, yy2arr4393
			const yyr4393 bool = false
			yyq4393[1] = x.FieldRef != nil
			yyq4393[2] = x.ResourceFieldRef != nil
			yyq4393[3] = x.Mode != nil
			var yynn4393 int
			if yyr4393 || yy2arr4393 {
				r.EncodeArrayStart(4)
			} else {
				yynn4393 = 1
				for _, b := range yyq4393 {
					if b {
						yynn4393++
					}
				}
				r.EncodeMapStart(yynn4393)
				yynn4393 = 0
			}
			if yyr4393 || yy2arr4393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4395 := z.EncBinary()
				_ = yym4395
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4396 := z.EncBinary()
				_ = yym4396
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4393 || yy2arr4393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4393[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4393[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4393 || yy2arr4393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4393[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4393[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4393 || yy2arr4393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4393[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4400 := *x.Mode
						yym4401 := z.EncBinary()
						_ = yym4401
						if false {
						} else {
							r.EncodeInt(int64(yy4400))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4393[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4402 := *x.Mode
						yym4403 := z.EncBinary()
						_ = yym4403
						if false {
						} else {
							r.EncodeInt(int64(yy4402))
						}
					}
				}
			}
			if yyr4393 || yy2arr4393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4404 := z.DecBinary()
	_ = yym4404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4405 := r.ContainerType()
		if yyct4405 == codecSelferValueTypeMap1234 {
			yyl4405 := r.ReadMapStart()
			if yyl4405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4405, d)
			}
		} else if yyct4405 == codecSelferValueTypeArray1234 {
			yyl4405 := r.ReadArrayStart()
			if yyl4405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4406Slc
	var yyhl4406 bool = l >= 0
	for yyj4406 := 0; ; yyj4406++ {
		if yyhl4406 {
			if yyj4406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4406Slc = r.DecodeBytes(yys4406Slc, true, true)
		yys4406 := string(yys4406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4406 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4411 := z.DecBinary()
				_ = yym4411
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4406)
		} // end switch yys4406
	} // end for yyj4406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4412 int
	var yyb4412 bool
	var yyhl4412 bool = l >= 0
	yyj4412++
	if yyhl4412 {
		yyb4412 = yyj4412 > l
	} else {
		yyb4412 = r.CheckBreak()
	}
	if yyb4412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4412++
	if yyhl4412 {
		yyb4412 = yyj4412 > l
	} else {
		yyb4412 = r.CheckBreak()
	}
	if yyb4412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4412++
	if yyhl4412 {
		yyb4412 = yyj4412 > l
	} else {
		yyb4412 = r.CheckBreak()
	}
	if yyb4412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4412++
	if yyhl4412 {
		yyb4412 = yyj4412 > l
	} else {
		yyb4412 = r.CheckBreak()
	}
	if yyb4412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4417 := z.DecBinary()
		_ = yym4417
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4412++
		if yyhl4412 {
			yyb4412 = yyj4412 > l
		} else {
			yyb4412 = r.CheckBreak()
		}
		if yyb4412 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4412-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4418 := z.EncBinary()
		_ = yym4418
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4419 := !z.EncBinary()
			yy2arr4419 := z.EncBasicHandle().StructToArray
			var yyq4419 [6]bool
			_, _, _ = yysep4419, yyq4419, yy2arr4419
			const yyr4419 bool = false
			yyq4419[0] = x.Capabilities != nil
			yyq4419[1] = x.Privileged != nil
			yyq4419[2] = x.SELinuxOptions != nil
			yyq4419[3] = x.RunAsUser != nil
			yyq4419[4] = x.RunAsNonRoot != nil
			yyq4419[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4419 int
			if yyr4419 || yy2arr4419 {
				r.EncodeArrayStart(6)
			} else {
				yynn4419 = 0
				for _, b := range yyq4419 {
					if b {
						yynn4419++
					}
				}
				r.EncodeMapStart(yynn4419)
				yynn4419 = 0
			}
			if yyr4419 || yy2arr4419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4419[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4419[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4419 || yy2arr4419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4419[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4422 := *x.Privileged
						yym4423 := z.EncBinary()
						_ = yym4423
						if false {
						} else {
							r.EncodeBool(bool(yy4422))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4419[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4424 := *x.Privileged
						yym4425 := z.EncBinary()
						_ = yym4425
						if false {
						} else {
							r.EncodeBool(bool(yy4424))
						}
					}
				}
			}
			if yyr4419 || yy2arr4419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4419[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4419[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4419 || yy2arr4419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4419[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4428 := *x.RunAsUser
						yym4429 := z.EncBinary()
						_ = yym4429
						if false {
						} else {
							r.EncodeInt(int64(yy4428))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4419[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4430 := *x.RunAsUser
						yym4431 := z.EncBinary()
						_ = yym4431
						if false {
						} else {
							r.EncodeInt(int64(yy4430))
						}
					}
				}
			}
			if yyr4419 || yy2arr4419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4419[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4433 := *x.RunAsNonRoot
						yym4434 := z.EncBinary()
						_ = yym4434
						if false {
						} else {
							r.EncodeBool(bool(yy4433))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4419[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4435 := *x.RunAsNonRoot
						yym4436 := z.EncBinary()
						_ = yym4436
						if false {
						} else {
							r.EncodeBool(bool(yy4435))
						}
					}
				}
			}
			if yyr4419 || yy2arr4419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4419[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4438 := *x.ReadOnlyRootFilesystem
						yym4439 := z.EncBinary()
						_ = yym4439
						if false {
						} else {
							r.EncodeBool(bool(yy4438))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4419[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4440 := *x.ReadOnlyRootFilesystem
						yym4441 := z.EncBinary()
						_ = yym4441
						if false {
						} else {
							r.EncodeBool(bool(yy4440))
						}
					}
				}
			}
			if yyr4419 || yy2arr4419 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4442 := z.DecBinary()
	_ = yym4442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4443 := r.ContainerType()
		if yyct4443 == codecSelferValueTypeMap1234 {
			yyl4443 := r.ReadMapStart()
			if yyl4443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4443, d)
			}
		} else if yyct4443 == codecSelferValueTypeArray1234 {
			yyl4443 := r.ReadArrayStart()
			if yyl4443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4444Slc
	var yyhl4444 bool = l >= 0
	for yyj4444 := 0; ; yyj4444++ {
		if yyhl4444 {
			if yyj4444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4444Slc = r.DecodeBytes(yys4444Slc, true, true)
		yys4444 := string(yys4444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4444 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4447 := z.DecBinary()
				_ = yym4447
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4450 := z.DecBinary()
				_ = yym4450
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4452 := z.DecBinary()
				_ = yym4452
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4454 := z.DecBinary()
				_ = yym4454
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4444)
		} // end switch yys4444
	} // end for yyj4444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4455 int
	var yyb4455 bool
	var yyhl4455 bool = l >= 0
	yyj4455++
	if yyhl4455 {
		yyb4455 = yyj4455 > l
	} else {
		yyb4455 = r.CheckBreak()
	}
	if yyb4455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4455++
	if yyhl4455 {
		yyb4455 = yyj4455 > l
	} else {
		yyb4455 = r.CheckBreak()
	}
	if yyb4455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4458 := z.DecBinary()
		_ = yym4458
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4455++
	if yyhl4455 {
		yyb4455 = yyj4455 > l
	} else {
		yyb4455 = r.CheckBreak()
	}
	if yyb4455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4455++
	if yyhl4455 {
		yyb4455 = yyj4455 > l
	} else {
		yyb4455 = r.CheckBreak()
	}
	if yyb4455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4461 := z.DecBinary()
		_ = yym4461
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4455++
	if yyhl4455 {
		yyb4455 = yyj4455 > l
	} else {
		yyb4455 = r.CheckBreak()
	}
	if yyb4455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4463 := z.DecBinary()
		_ = yym4463
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4455++
	if yyhl4455 {
		yyb4455 = yyj4455 > l
	} else {
		yyb4455 = r.CheckBreak()
	}
	if yyb4455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4465 := z.DecBinary()
		_ = yym4465
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4455++
		if yyhl4455 {
			yyb4455 = yyj4455 > l
		} else {
			yyb4455 = r.CheckBreak()
		}
		if yyb4455 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4455-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4466 := z.EncBinary()
		_ = yym4466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4467 := !z.EncBinary()
			yy2arr4467 := z.EncBasicHandle().StructToArray
			var yyq4467 [4]bool
			_, _, _ = yysep4467, yyq4467, yy2arr4467
			const yyr4467 bool = false
			yyq4467[0] = x.User != ""
			yyq4467[1] = x.Role != ""
			yyq4467[2] = x.Type != ""
			yyq4467[3] = x.Level != ""
			var yynn4467 int
			if yyr4467 || yy2arr4467 {
				r.EncodeArrayStart(4)
			} else {
				yynn4467 = 0
				for _, b := range yyq4467 {
					if b {
						yynn4467++
					}
				}
				r.EncodeMapStart(yynn4467)
				yynn4467 = 0
			}
			if yyr4467 || yy2arr4467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4467[0] {
					yym4469 := z.EncBinary()
					_ = yym4469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4467[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4470 := z.EncBinary()
					_ = yym4470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4467 || yy2arr4467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4467[1] {
					yym4472 := z.EncBinary()
					_ = yym4472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4467[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4473 := z.EncBinary()
					_ = yym4473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4467 || yy2arr4467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4467[2] {
					yym4475 := z.EncBinary()
					_ = yym4475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4467[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4476 := z.EncBinary()
					_ = yym4476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4467 || yy2arr4467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4467[3] {
					yym4478 := z.EncBinary()
					_ = yym4478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4467[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4479 := z.EncBinary()
					_ = yym4479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4467 || yy2arr4467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4480 := z.DecBinary()
	_ = yym4480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4481 := r.ContainerType()
		if yyct4481 == codecSelferValueTypeMap1234 {
			yyl4481 := r.ReadMapStart()
			if yyl4481 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4481, d)
			}
		} else if yyct4481 == codecSelferValueTypeArray1234 {
			yyl4481 := r.ReadArrayStart()
			if yyl4481 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4482Slc
	var yyhl4482 bool = l >= 0
	for yyj4482 := 0; ; yyj4482++ {
		if yyhl4482 {
			if yyj4482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4482Slc = r.DecodeBytes(yys4482Slc, true, true)
		yys4482 := string(yys4482Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4482 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4482)
		} // end switch yys4482
	} // end for yyj4482
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4487 int
	var yyb4487 bool
	var yyhl4487 bool = l >= 0
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4487++
		if yyhl4487 {
			yyb4487 = yyj4487 > l
		} else {
			yyb4487 = r.CheckBreak()
		}
		if yyb4487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4492 := z.EncBinary()
		_ = yym4492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4493 := !z.EncBinary()
			yy2arr4493 := z.EncBasicHandle().StructToArray
			var yyq4493 [5]bool
			_, _, _ = yysep4493, yyq4493, yy2arr4493
			const yyr4493 bool = false
			yyq4493[0] = x.Kind != ""
			yyq4493[1] = x.APIVersion != ""
			yyq4493[2] = true
			var yynn4493 int
			if yyr4493 || yy2arr4493 {
				r.EncodeArrayStart(5)
			} else {
				yynn4493 = 2
				for _, b := range yyq4493 {
					if b {
						yynn4493++
					}
				}
				r.EncodeMapStart(yynn4493)
				yynn4493 = 0
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4493[0] {
					yym4495 := z.EncBinary()
					_ = yym4495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4496 := z.EncBinary()
					_ = yym4496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4493[1] {
					yym4498 := z.EncBinary()
					_ = yym4498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4493[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4499 := z.EncBinary()
					_ = yym4499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4493[2] {
					yy4501 := &x.ObjectMeta
					yy4501.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4493[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4502 := &x.ObjectMeta
					yy4502.CodecEncodeSelf(e)
				}
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4504 := z.EncBinary()
				_ = yym4504
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4505 := z.EncBinary()
				_ = yym4505
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4507 := z.EncBinary()
					_ = yym4507
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4508 := z.EncBinary()
					_ = yym4508
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4509 := z.DecBinary()
	_ = yym4509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4510 := r.ContainerType()
		if yyct4510 == codecSelferValueTypeMap1234 {
			yyl4510 := r.ReadMapStart()
			if yyl4510 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4510, d)
			}
		} else if yyct4510 == codecSelferValueTypeArray1234 {
			yyl4510 := r.ReadArrayStart()
			if yyl4510 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4511Slc
	var yyhl4511 bool = l >= 0
	for yyj4511 := 0; ; yyj4511++ {
		if yyhl4511 {
			if yyj4511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4511Slc = r.DecodeBytes(yys4511Slc, true, true)
		yys4511 := string(yys4511Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4511 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4514 := &x.ObjectMeta
				yyv4514.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4516 := &x.Data
				yym4517 := z.DecBinary()
				_ = yym4517
				if false {
				} else {
					*yyv4516 = r.DecodeBytes(*(*[]byte)(yyv4516), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4511)
		} // end switch yys4511
	} // end for yyj4511
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4518 int
	var yyb4518 bool
	var yyhl4518 bool = l >= 0
	yyj4518++
	if yyhl4518 {
		yyb4518 = yyj4518 > l
	} else {
		yyb4518 = r.CheckBreak()
	}
	if yyb4518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4518++
	if yyhl4518 {
		yyb4518 = yyj4518 > l
	} else {
		yyb4518 = r.CheckBreak()
	}
	if yyb4518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4518++
	if yyhl4518 {
		yyb4518 = yyj4518 > l
	} else {
		yyb4518 = r.CheckBreak()
	}
	if yyb4518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4521 := &x.ObjectMeta
		yyv4521.CodecDecodeSelf(d)
	}
	yyj4518++
	if yyhl4518 {
		yyb4518 = yyj4518 > l
	} else {
		yyb4518 = r.CheckBreak()
	}
	if yyb4518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4518++
	if yyhl4518 {
		yyb4518 = yyj4518 > l
	} else {
		yyb4518 = r.CheckBreak()
	}
	if yyb4518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4523 := &x.Data
		yym4524 := z.DecBinary()
		_ = yym4524
		if false {
		} else {
			*yyv4523 = r.DecodeBytes(*(*[]byte)(yyv4523), false, false)
		}
	}
	for {
		yyj4518++
		if yyhl4518 {
			yyb4518 = yyj4518 > l
		} else {
			yyb4518 = r.CheckBreak()
		}
		if yyb4518 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4518-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4525 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4526 := &yyv4525
		yy4526.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4527 := *v
	yyh4527, yyl4527 := z.DecSliceHelperStart()
	var yyc4527 bool
	if yyl4527 == 0 {
		if yyv4527 == nil {
			yyv4527 = []OwnerReference{}
			yyc4527 = true
		} else if len(yyv4527) != 0 {
			yyv4527 = yyv4527[:0]
			yyc4527 = true
		}
	} else if yyl4527 > 0 {
		var yyrr4527, yyrl4527 int
		var yyrt4527 bool
		if yyl4527 > cap(yyv4527) {

			yyrg4527 := len(yyv4527) > 0
			yyv24527 := yyv4527
			yyrl4527, yyrt4527 = z.DecInferLen(yyl4527, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4527 {
				if yyrl4527 <= cap(yyv4527) {
					yyv4527 = yyv4527[:yyrl4527]
				} else {
					yyv4527 = make([]OwnerReference, yyrl4527)
				}
			} else {
				yyv4527 = make([]OwnerReference, yyrl4527)
			}
			yyc4527 = true
			yyrr4527 = len(yyv4527)
			if yyrg4527 {
				copy(yyv4527, yyv24527)
			}
		} else if yyl4527 != len(yyv4527) {
			yyv4527 = yyv4527[:yyl4527]
			yyc4527 = true
		}
		yyj4527 := 0
		for ; yyj4527 < yyrr4527; yyj4527++ {
			yyh4527.ElemContainerState(yyj4527)
			if r.TryDecodeAsNil() {
				yyv4527[yyj4527] = OwnerReference{}
			} else {
				yyv4528 := &yyv4527[yyj4527]
				yyv4528.CodecDecodeSelf(d)
			}

		}
		if yyrt4527 {
			for ; yyj4527 < yyl4527; yyj4527++ {
				yyv4527 = append(yyv4527, OwnerReference{})
				yyh4527.ElemContainerState(yyj4527)
				if r.TryDecodeAsNil() {
					yyv4527[yyj4527] = OwnerReference{}
				} else {
					yyv4529 := &yyv4527[yyj4527]
					yyv4529.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4527 := 0
		for ; !r.CheckBreak(); yyj4527++ {

			if yyj4527 >= len(yyv4527) {
				yyv4527 = append(yyv4527, OwnerReference{}) // var yyz4527 OwnerReference
				yyc4527 = true
			}
			yyh4527.ElemContainerState(yyj4527)
			if yyj4527 < len(yyv4527) {
				if r.TryDecodeAsNil() {
					yyv4527[yyj4527] = OwnerReference{}
				} else {
					yyv4530 := &yyv4527[yyj4527]
					yyv4530.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4527 < len(yyv4527) {
			yyv4527 = yyv4527[:yyj4527]
			yyc4527 = true
		} else if yyj4527 == 0 && yyv4527 == nil {
			yyv4527 = []OwnerReference{}
			yyc4527 = true
		}
	}
	yyh4527.End()
	if yyc4527 {
		*v = yyv4527
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4531 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4531.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4532 := *v
	yyh4532, yyl4532 := z.DecSliceHelperStart()
	var yyc4532 bool
	if yyl4532 == 0 {
		if yyv4532 == nil {
			yyv4532 = []PersistentVolumeAccessMode{}
			yyc4532 = true
		} else if len(yyv4532) != 0 {
			yyv4532 = yyv4532[:0]
			yyc4532 = true
		}
	} else if yyl4532 > 0 {
		var yyrr4532, yyrl4532 int
		var yyrt4532 bool
		if yyl4532 > cap(yyv4532) {

			yyrl4532, yyrt4532 = z.DecInferLen(yyl4532, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4532 {
				if yyrl4532 <= cap(yyv4532) {
					yyv4532 = yyv4532[:yyrl4532]
				} else {
					yyv4532 = make([]PersistentVolumeAccessMode, yyrl4532)
				}
			} else {
				yyv4532 = make([]PersistentVolumeAccessMode, yyrl4532)
			}
			yyc4532 = true
			yyrr4532 = len(yyv4532)
		} else if yyl4532 != len(yyv4532) {
			yyv4532 = yyv4532[:yyl4532]
			yyc4532 = true
		}
		yyj4532 := 0
		for ; yyj4532 < yyrr4532; yyj4532++ {
			yyh4532.ElemContainerState(yyj4532)
			if r.TryDecodeAsNil() {
				yyv4532[yyj4532] = ""
			} else {
				yyv4532[yyj4532] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4532 {
			for ; yyj4532 < yyl4532; yyj4532++ {
				yyv4532 = append(yyv4532, "")
				yyh4532.ElemContainerState(yyj4532)
				if r.TryDecodeAsNil() {
					yyv4532[yyj4532] = ""
				} else {
					yyv4532[yyj4532] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4532 := 0
		for ; !r.CheckBreak(); yyj4532++ {

			if yyj4532 >= len(yyv4532) {
				yyv4532 = append(yyv4532, "") // var yyz4532 PersistentVolumeAccessMode
				yyc4532 = true
			}
			yyh4532.ElemContainerState(yyj4532)
			if yyj4532 < len(yyv4532) {
				if r.TryDecodeAsNil() {
					yyv4532[yyj4532] = ""
				} else {
					yyv4532[yyj4532] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4532 < len(yyv4532) {
			yyv4532 = yyv4532[:yyj4532]
			yyc4532 = true
		} else if yyj4532 == 0 && yyv4532 == nil {
			yyv4532 = []PersistentVolumeAccessMode{}
			yyc4532 = true
		}
	}
	yyh4532.End()
	if yyc4532 {
		*v = yyv4532
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4536 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4537 := &yyv4536
		yy4537.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4538 := *v
	yyh4538, yyl4538 := z.DecSliceHelperStart()
	var yyc4538 bool
	if yyl4538 == 0 {
		if yyv4538 == nil {
			yyv4538 = []PersistentVolume{}
			yyc4538 = true
		} else if len(yyv4538) != 0 {
			yyv4538 = yyv4538[:0]
			yyc4538 = true
		}
	} else if yyl4538 > 0 {
		var yyrr4538, yyrl4538 int
		var yyrt4538 bool
		if yyl4538 > cap(yyv4538) {

			yyrg4538 := len(yyv4538) > 0
			yyv24538 := yyv4538
			yyrl4538, yyrt4538 = z.DecInferLen(yyl4538, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4538 {
				if yyrl4538 <= cap(yyv4538) {
					yyv4538 = yyv4538[:yyrl4538]
				} else {
					yyv4538 = make([]PersistentVolume, yyrl4538)
				}
			} else {
				yyv4538 = make([]PersistentVolume, yyrl4538)
			}
			yyc4538 = true
			yyrr4538 = len(yyv4538)
			if yyrg4538 {
				copy(yyv4538, yyv24538)
			}
		} else if yyl4538 != len(yyv4538) {
			yyv4538 = yyv4538[:yyl4538]
			yyc4538 = true
		}
		yyj4538 := 0
		for ; yyj4538 < yyrr4538; yyj4538++ {
			yyh4538.ElemContainerState(yyj4538)
			if r.TryDecodeAsNil() {
				yyv4538[yyj4538] = PersistentVolume{}
			} else {
				yyv4539 := &yyv4538[yyj4538]
				yyv4539.CodecDecodeSelf(d)
			}

		}
		if yyrt4538 {
			for ; yyj4538 < yyl4538; yyj4538++ {
				yyv4538 = append(yyv4538, PersistentVolume{})
				yyh4538.ElemContainerState(yyj4538)
				if r.TryDecodeAsNil() {
					yyv4538[yyj4538] = PersistentVolume{}
				} else {
					yyv4540 := &yyv4538[yyj4538]
					yyv4540.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4538 := 0
		for ; !r.CheckBreak(); yyj4538++ {

			if yyj4538 >= len(yyv4538) {
				yyv4538 = append(yyv4538, PersistentVolume{}) // var yyz4538 PersistentVolume
				yyc4538 = true
			}
			yyh4538.ElemContainerState(yyj4538)
			if yyj4538 < len(yyv4538) {
				if r.TryDecodeAsNil() {
					yyv4538[yyj4538] = PersistentVolume{}
				} else {
					yyv4541 := &yyv4538[yyj4538]
					yyv4541.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4538 < len(yyv4538) {
			yyv4538 = yyv4538[:yyj4538]
			yyc4538 = true
		} else if yyj4538 == 0 && yyv4538 == nil {
			yyv4538 = []PersistentVolume{}
			yyc4538 = true
		}
	}
	yyh4538.End()
	if yyc4538 {
		*v = yyv4538
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4542 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4543 := &yyv4542
		yy4543.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4544 := *v
	yyh4544, yyl4544 := z.DecSliceHelperStart()
	var yyc4544 bool
	if yyl4544 == 0 {
		if yyv4544 == nil {
			yyv4544 = []PersistentVolumeClaim{}
			yyc4544 = true
		} else if len(yyv4544) != 0 {
			yyv4544 = yyv4544[:0]
			yyc4544 = true
		}
	} else if yyl4544 > 0 {
		var yyrr4544, yyrl4544 int
		var yyrt4544 bool
		if yyl4544 > cap(yyv4544) {

			yyrg4544 := len(yyv4544) > 0
			yyv24544 := yyv4544
			yyrl4544, yyrt4544 = z.DecInferLen(yyl4544, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4544 {
				if yyrl4544 <= cap(yyv4544) {
					yyv4544 = yyv4544[:yyrl4544]
				} else {
					yyv4544 = make([]PersistentVolumeClaim, yyrl4544)
				}
			} else {
				yyv4544 = make([]PersistentVolumeClaim, yyrl4544)
			}
			yyc4544 = true
			yyrr4544 = len(yyv4544)
			if yyrg4544 {
				copy(yyv4544, yyv24544)
			}
		} else if yyl4544 != len(yyv4544) {
			yyv4544 = yyv4544[:yyl4544]
			yyc4544 = true
		}
		yyj4544 := 0
		for ; yyj4544 < yyrr4544; yyj4544++ {
			yyh4544.ElemContainerState(yyj4544)
			if r.TryDecodeAsNil() {
				yyv4544[yyj4544] = PersistentVolumeClaim{}
			} else {
				yyv4545 := &yyv4544[yyj4544]
				yyv4545.CodecDecodeSelf(d)
			}

		}
		if yyrt4544 {
			for ; yyj4544 < yyl4544; yyj4544++ {
				yyv4544 = append(yyv4544, PersistentVolumeClaim{})
				yyh4544.ElemContainerState(yyj4544)
				if r.TryDecodeAsNil() {
					yyv4544[yyj4544] = PersistentVolumeClaim{}
				} else {
					yyv4546 := &yyv4544[yyj4544]
					yyv4546.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4544 := 0
		for ; !r.CheckBreak(); yyj4544++ {

			if yyj4544 >= len(yyv4544) {
				yyv4544 = append(yyv4544, PersistentVolumeClaim{}) // var yyz4544 PersistentVolumeClaim
				yyc4544 = true
			}
			yyh4544.ElemContainerState(yyj4544)
			if yyj4544 < len(yyv4544) {
				if r.TryDecodeAsNil() {
					yyv4544[yyj4544] = PersistentVolumeClaim{}
				} else {
					yyv4547 := &yyv4544[yyj4544]
					yyv4547.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4544 < len(yyv4544) {
			yyv4544 = yyv4544[:yyj4544]
			yyc4544 = true
		} else if yyj4544 == 0 && yyv4544 == nil {
			yyv4544 = []PersistentVolumeClaim{}
			yyc4544 = true
		}
	}
	yyh4544.End()
	if yyc4544 {
		*v = yyv4544
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4548 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4549 := &yyv4548
		yy4549.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4550 := *v
	yyh4550, yyl4550 := z.DecSliceHelperStart()
	var yyc4550 bool
	if yyl4550 == 0 {
		if yyv4550 == nil {
			yyv4550 = []KeyToPath{}
			yyc4550 = true
		} else if len(yyv4550) != 0 {
			yyv4550 = yyv4550[:0]
			yyc4550 = true
		}
	} else if yyl4550 > 0 {
		var yyrr4550, yyrl4550 int
		var yyrt4550 bool
		if yyl4550 > cap(yyv4550) {

			yyrg4550 := len(yyv4550) > 0
			yyv24550 := yyv4550
			yyrl4550, yyrt4550 = z.DecInferLen(yyl4550, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4550 {
				if yyrl4550 <= cap(yyv4550) {
					yyv4550 = yyv4550[:yyrl4550]
				} else {
					yyv4550 = make([]KeyToPath, yyrl4550)
				}
			} else {
				yyv4550 = make([]KeyToPath, yyrl4550)
			}
			yyc4550 = true
			yyrr4550 = len(yyv4550)
			if yyrg4550 {
				copy(yyv4550, yyv24550)
			}
		} else if yyl4550 != len(yyv4550) {
			yyv4550 = yyv4550[:yyl4550]
			yyc4550 = true
		}
		yyj4550 := 0
		for ; yyj4550 < yyrr4550; yyj4550++ {
			yyh4550.ElemContainerState(yyj4550)
			if r.TryDecodeAsNil() {
				yyv4550[yyj4550] = KeyToPath{}
			} else {
				yyv4551 := &yyv4550[yyj4550]
				yyv4551.CodecDecodeSelf(d)
			}

		}
		if yyrt4550 {
			for ; yyj4550 < yyl4550; yyj4550++ {
				yyv4550 = append(yyv4550, KeyToPath{})
				yyh4550.ElemContainerState(yyj4550)
				if r.TryDecodeAsNil() {
					yyv4550[yyj4550] = KeyToPath{}
				} else {
					yyv4552 := &yyv4550[yyj4550]
					yyv4552.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4550 := 0
		for ; !r.CheckBreak(); yyj4550++ {

			if yyj4550 >= len(yyv4550) {
				yyv4550 = append(yyv4550, KeyToPath{}) // var yyz4550 KeyToPath
				yyc4550 = true
			}
			yyh4550.ElemContainerState(yyj4550)
			if yyj4550 < len(yyv4550) {
				if r.TryDecodeAsNil() {
					yyv4550[yyj4550] = KeyToPath{}
				} else {
					yyv4553 := &yyv4550[yyj4550]
					yyv4553.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4550 < len(yyv4550) {
			yyv4550 = yyv4550[:yyj4550]
			yyc4550 = true
		} else if yyj4550 == 0 && yyv4550 == nil {
			yyv4550 = []KeyToPath{}
			yyc4550 = true
		}
	}
	yyh4550.End()
	if yyc4550 {
		*v = yyv4550
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4554 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4555 := &yyv4554
		yy4555.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4556 := *v
	yyh4556, yyl4556 := z.DecSliceHelperStart()
	var yyc4556 bool
	if yyl4556 == 0 {
		if yyv4556 == nil {
			yyv4556 = []HTTPHeader{}
			yyc4556 = true
		} else if len(yyv4556) != 0 {
			yyv4556 = yyv4556[:0]
			yyc4556 = true
		}
	} else if yyl4556 > 0 {
		var yyrr4556, yyrl4556 int
		var yyrt4556 bool
		if yyl4556 > cap(yyv4556) {

			yyrg4556 := len(yyv4556) > 0
			yyv24556 := yyv4556
			yyrl4556, yyrt4556 = z.DecInferLen(yyl4556, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4556 {
				if yyrl4556 <= cap(yyv4556) {
					yyv4556 = yyv4556[:yyrl4556]
				} else {
					yyv4556 = make([]HTTPHeader, yyrl4556)
				}
			} else {
				yyv4556 = make([]HTTPHeader, yyrl4556)
			}
			yyc4556 = true
			yyrr4556 = len(yyv4556)
			if yyrg4556 {
				copy(yyv4556, yyv24556)
			}
		} else if yyl4556 != len(yyv4556) {
			yyv4556 = yyv4556[:yyl4556]
			yyc4556 = true
		}
		yyj4556 := 0
		for ; yyj4556 < yyrr4556; yyj4556++ {
			yyh4556.ElemContainerState(yyj4556)
			if r.TryDecodeAsNil() {
				yyv4556[yyj4556] = HTTPHeader{}
			} else {
				yyv4557 := &yyv4556[yyj4556]
				yyv4557.CodecDecodeSelf(d)
			}

		}
		if yyrt4556 {
			for ; yyj4556 < yyl4556; yyj4556++ {
				yyv4556 = append(yyv4556, HTTPHeader{})
				yyh4556.ElemContainerState(yyj4556)
				if r.TryDecodeAsNil() {
					yyv4556[yyj4556] = HTTPHeader{}
				} else {
					yyv4558 := &yyv4556[yyj4556]
					yyv4558.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4556 := 0
		for ; !r.CheckBreak(); yyj4556++ {

			if yyj4556 >= len(yyv4556) {
				yyv4556 = append(yyv4556, HTTPHeader{}) // var yyz4556 HTTPHeader
				yyc4556 = true
			}
			yyh4556.ElemContainerState(yyj4556)
			if yyj4556 < len(yyv4556) {
				if r.TryDecodeAsNil() {
					yyv4556[yyj4556] = HTTPHeader{}
				} else {
					yyv4559 := &yyv4556[yyj4556]
					yyv4559.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4556 < len(yyv4556) {
			yyv4556 = yyv4556[:yyj4556]
			yyc4556 = true
		} else if yyj4556 == 0 && yyv4556 == nil {
			yyv4556 = []HTTPHeader{}
			yyc4556 = true
		}
	}
	yyh4556.End()
	if yyc4556 {
		*v = yyv4556
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4560 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4560.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4561 := *v
	yyh4561, yyl4561 := z.DecSliceHelperStart()
	var yyc4561 bool
	if yyl4561 == 0 {
		if yyv4561 == nil {
			yyv4561 = []Capability{}
			yyc4561 = true
		} else if len(yyv4561) != 0 {
			yyv4561 = yyv4561[:0]
			yyc4561 = true
		}
	} else if yyl4561 > 0 {
		var yyrr4561, yyrl4561 int
		var yyrt4561 bool
		if yyl4561 > cap(yyv4561) {

			yyrl4561, yyrt4561 = z.DecInferLen(yyl4561, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4561 {
				if yyrl4561 <= cap(yyv4561) {
					yyv4561 = yyv4561[:yyrl4561]
				} else {
					yyv4561 = make([]Capability, yyrl4561)
				}
			} else {
				yyv4561 = make([]Capability, yyrl4561)
			}
			yyc4561 = true
			yyrr4561 = len(yyv4561)
		} else if yyl4561 != len(yyv4561) {
			yyv4561 = yyv4561[:yyl4561]
			yyc4561 = true
		}
		yyj4561 := 0
		for ; yyj4561 < yyrr4561; yyj4561++ {
			yyh4561.ElemContainerState(yyj4561)
			if r.TryDecodeAsNil() {
				yyv4561[yyj4561] = ""
			} else {
				yyv4561[yyj4561] = Capability(r.DecodeString())
			}

		}
		if yyrt4561 {
			for ; yyj4561 < yyl4561; yyj4561++ {
				yyv4561 = append(yyv4561, "")
				yyh4561.ElemContainerState(yyj4561)
				if r.TryDecodeAsNil() {
					yyv4561[yyj4561] = ""
				} else {
					yyv4561[yyj4561] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4561 := 0
		for ; !r.CheckBreak(); yyj4561++ {

			if yyj4561 >= len(yyv4561) {
				yyv4561 = append(yyv4561, "") // var yyz4561 Capability
				yyc4561 = true
			}
			yyh4561.ElemContainerState(yyj4561)
			if yyj4561 < len(yyv4561) {
				if r.TryDecodeAsNil() {
					yyv4561[yyj4561] = ""
				} else {
					yyv4561[yyj4561] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4561 < len(yyv4561) {
			yyv4561 = yyv4561[:yyj4561]
			yyc4561 = true
		} else if yyj4561 == 0 && yyv4561 == nil {
			yyv4561 = []Capability{}
			yyc4561 = true
		}
	}
	yyh4561.End()
	if yyc4561 {
		*v = yyv4561
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4565 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4566 := &yyv4565
		yy4566.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4567 := *v
	yyh4567, yyl4567 := z.DecSliceHelperStart()
	var yyc4567 bool
	if yyl4567 == 0 {
		if yyv4567 == nil {
			yyv4567 = []ContainerPort{}
			yyc4567 = true
		} else if len(yyv4567) != 0 {
			yyv4567 = yyv4567[:0]
			yyc4567 = true
		}
	} else if yyl4567 > 0 {
		var yyrr4567, yyrl4567 int
		var yyrt4567 bool
		if yyl4567 > cap(yyv4567) {

			yyrg4567 := len(yyv4567) > 0
			yyv24567 := yyv4567
			yyrl4567, yyrt4567 = z.DecInferLen(yyl4567, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4567 {
				if yyrl4567 <= cap(yyv4567) {
					yyv4567 = yyv4567[:yyrl4567]
				} else {
					yyv4567 = make([]ContainerPort, yyrl4567)
				}
			} else {
				yyv4567 = make([]ContainerPort, yyrl4567)
			}
			yyc4567 = true
			yyrr4567 = len(yyv4567)
			if yyrg4567 {
				copy(yyv4567, yyv24567)
			}
		} else if yyl4567 != len(yyv4567) {
			yyv4567 = yyv4567[:yyl4567]
			yyc4567 = true
		}
		yyj4567 := 0
		for ; yyj4567 < yyrr4567; yyj4567++ {
			yyh4567.ElemContainerState(yyj4567)
			if r.TryDecodeAsNil() {
				yyv4567[yyj4567] = ContainerPort{}
			} else {
				yyv4568 := &yyv4567[yyj4567]
				yyv4568.CodecDecodeSelf(d)
			}

		}
		if yyrt4567 {
			for ; yyj4567 < yyl4567; yyj4567++ {
				yyv4567 = append(yyv4567, ContainerPort{})
				yyh4567.ElemContainerState(yyj4567)
				if r.TryDecodeAsNil() {
					yyv4567[yyj4567] = ContainerPort{}
				} else {
					yyv4569 := &yyv4567[yyj4567]
					yyv4569.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4567 := 0
		for ; !r.CheckBreak(); yyj4567++ {

			if yyj4567 >= len(yyv4567) {
				yyv4567 = append(yyv4567, ContainerPort{}) // var yyz4567 ContainerPort
				yyc4567 = true
			}
			yyh4567.ElemContainerState(yyj4567)
			if yyj4567 < len(yyv4567) {
				if r.TryDecodeAsNil() {
					yyv4567[yyj4567] = ContainerPort{}
				} else {
					yyv4570 := &yyv4567[yyj4567]
					yyv4570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4567 < len(yyv4567) {
			yyv4567 = yyv4567[:yyj4567]
			yyc4567 = true
		} else if yyj4567 == 0 && yyv4567 == nil {
			yyv4567 = []ContainerPort{}
			yyc4567 = true
		}
	}
	yyh4567.End()
	if yyc4567 {
		*v = yyv4567
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4571 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4572 := &yyv4571
		yy4572.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4573 := *v
	yyh4573, yyl4573 := z.DecSliceHelperStart()
	var yyc4573 bool
	if yyl4573 == 0 {
		if yyv4573 == nil {
			yyv4573 = []EnvVar{}
			yyc4573 = true
		} else if len(yyv4573) != 0 {
			yyv4573 = yyv4573[:0]
			yyc4573 = true
		}
	} else if yyl4573 > 0 {
		var yyrr4573, yyrl4573 int
		var yyrt4573 bool
		if yyl4573 > cap(yyv4573) {

			yyrg4573 := len(yyv4573) > 0
			yyv24573 := yyv4573
			yyrl4573, yyrt4573 = z.DecInferLen(yyl4573, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4573 {
				if yyrl4573 <= cap(yyv4573) {
					yyv4573 = yyv4573[:yyrl4573]
				} else {
					yyv4573 = make([]EnvVar, yyrl4573)
				}
			} else {
				yyv4573 = make([]EnvVar, yyrl4573)
			}
			yyc4573 = true
			yyrr4573 = len(yyv4573)
			if yyrg4573 {
				copy(yyv4573, yyv24573)
			}
		} else if yyl4573 != len(yyv4573) {
			yyv4573 = yyv4573[:yyl4573]
			yyc4573 = true
		}
		yyj4573 := 0
		for ; yyj4573 < yyrr4573; yyj4573++ {
			yyh4573.ElemContainerState(yyj4573)
			if r.TryDecodeAsNil() {
				yyv4573[yyj4573] = EnvVar{}
			} else {
				yyv4574 := &yyv4573[yyj4573]
				yyv4574.CodecDecodeSelf(d)
			}

		}
		if yyrt4573 {
			for ; yyj4573 < yyl4573; yyj4573++ {
				yyv4573 = append(yyv4573, EnvVar{})
				yyh4573.ElemContainerState(yyj4573)
				if r.TryDecodeAsNil() {
					yyv4573[yyj4573] = EnvVar{}
				} else {
					yyv4575 := &yyv4573[yyj4573]
					yyv4575.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4573 := 0
		for ; !r.CheckBreak(); yyj4573++ {

			if yyj4573 >= len(yyv4573) {
				yyv4573 = append(yyv4573, EnvVar{}) // var yyz4573 EnvVar
				yyc4573 = true
			}
			yyh4573.ElemContainerState(yyj4573)
			if yyj4573 < len(yyv4573) {
				if r.TryDecodeAsNil() {
					yyv4573[yyj4573] = EnvVar{}
				} else {
					yyv4576 := &yyv4573[yyj4573]
					yyv4576.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4573 < len(yyv4573) {
			yyv4573 = yyv4573[:yyj4573]
			yyc4573 = true
		} else if yyj4573 == 0 && yyv4573 == nil {
			yyv4573 = []EnvVar{}
			yyc4573 = true
		}
	}
	yyh4573.End()
	if yyc4573 {
		*v = yyv4573
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4577 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4578 := &yyv4577
		yy4578.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4579 := *v
	yyh4579, yyl4579 := z.DecSliceHelperStart()
	var yyc4579 bool
	if yyl4579 == 0 {
		if yyv4579 == nil {
			yyv4579 = []VolumeMount{}
			yyc4579 = true
		} else if len(yyv4579) != 0 {
			yyv4579 = yyv4579[:0]
			yyc4579 = true
		}
	} else if yyl4579 > 0 {
		var yyrr4579, yyrl4579 int
		var yyrt4579 bool
		if yyl4579 > cap(yyv4579) {

			yyrg4579 := len(yyv4579) > 0
			yyv24579 := yyv4579
			yyrl4579, yyrt4579 = z.DecInferLen(yyl4579, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4579 {
				if yyrl4579 <= cap(yyv4579) {
					yyv4579 = yyv4579[:yyrl4579]
				} else {
					yyv4579 = make([]VolumeMount, yyrl4579)
				}
			} else {
				yyv4579 = make([]VolumeMount, yyrl4579)
			}
			yyc4579 = true
			yyrr4579 = len(yyv4579)
			if yyrg4579 {
				copy(yyv4579, yyv24579)
			}
		} else if yyl4579 != len(yyv4579) {
			yyv4579 = yyv4579[:yyl4579]
			yyc4579 = true
		}
		yyj4579 := 0
		for ; yyj4579 < yyrr4579; yyj4579++ {
			yyh4579.ElemContainerState(yyj4579)
			if r.TryDecodeAsNil() {
				yyv4579[yyj4579] = VolumeMount{}
			} else {
				yyv4580 := &yyv4579[yyj4579]
				yyv4580.CodecDecodeSelf(d)
			}

		}
		if yyrt4579 {
			for ; yyj4579 < yyl4579; yyj4579++ {
				yyv4579 = append(yyv4579, VolumeMount{})
				yyh4579.ElemContainerState(yyj4579)
				if r.TryDecodeAsNil() {
					yyv4579[yyj4579] = VolumeMount{}
				} else {
					yyv4581 := &yyv4579[yyj4579]
					yyv4581.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4579 := 0
		for ; !r.CheckBreak(); yyj4579++ {

			if yyj4579 >= len(yyv4579) {
				yyv4579 = append(yyv4579, VolumeMount{}) // var yyz4579 VolumeMount
				yyc4579 = true
			}
			yyh4579.ElemContainerState(yyj4579)
			if yyj4579 < len(yyv4579) {
				if r.TryDecodeAsNil() {
					yyv4579[yyj4579] = VolumeMount{}
				} else {
					yyv4582 := &yyv4579[yyj4579]
					yyv4582.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4579 < len(yyv4579) {
			yyv4579 = yyv4579[:yyj4579]
			yyc4579 = true
		} else if yyj4579 == 0 && yyv4579 == nil {
			yyv4579 = []VolumeMount{}
			yyc4579 = true
		}
	}
	yyh4579.End()
	if yyc4579 {
		*v = yyv4579
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4583 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4584 := &yyv4583
		yy4584.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4585 := *v
	yyh4585, yyl4585 := z.DecSliceHelperStart()
	var yyc4585 bool
	if yyl4585 == 0 {
		if yyv4585 == nil {
			yyv4585 = []NodeSelectorTerm{}
			yyc4585 = true
		} else if len(yyv4585) != 0 {
			yyv4585 = yyv4585[:0]
			yyc4585 = true
		}
	} else if yyl4585 > 0 {
		var yyrr4585, yyrl4585 int
		var yyrt4585 bool
		if yyl4585 > cap(yyv4585) {

			yyrg4585 := len(yyv4585) > 0
			yyv24585 := yyv4585
			yyrl4585, yyrt4585 = z.DecInferLen(yyl4585, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4585 {
				if yyrl4585 <= cap(yyv4585) {
					yyv4585 = yyv4585[:yyrl4585]
				} else {
					yyv4585 = make([]NodeSelectorTerm, yyrl4585)
				}
			} else {
				yyv4585 = make([]NodeSelectorTerm, yyrl4585)
			}
			yyc4585 = true
			yyrr4585 = len(yyv4585)
			if yyrg4585 {
				copy(yyv4585, yyv24585)
			}
		} else if yyl4585 != len(yyv4585) {
			yyv4585 = yyv4585[:yyl4585]
			yyc4585 = true
		}
		yyj4585 := 0
		for ; yyj4585 < yyrr4585; yyj4585++ {
			yyh4585.ElemContainerState(yyj4585)
			if r.TryDecodeAsNil() {
				yyv4585[yyj4585] = NodeSelectorTerm{}
			} else {
				yyv4586 := &yyv4585[yyj4585]
				yyv4586.CodecDecodeSelf(d)
			}

		}
		if yyrt4585 {
			for ; yyj4585 < yyl4585; yyj4585++ {
				yyv4585 = append(yyv4585, NodeSelectorTerm{})
				yyh4585.ElemContainerState(yyj4585)
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = NodeSelectorTerm{}
				} else {
					yyv4587 := &yyv4585[yyj4585]
					yyv4587.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4585 := 0
		for ; !r.CheckBreak(); yyj4585++ {

			if yyj4585 >= len(yyv4585) {
				yyv4585 = append(yyv4585, NodeSelectorTerm{}) // var yyz4585 NodeSelectorTerm
				yyc4585 = true
			}
			yyh4585.ElemContainerState(yyj4585)
			if yyj4585 < len(yyv4585) {
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = NodeSelectorTerm{}
				} else {
					yyv4588 := &yyv4585[yyj4585]
					yyv4588.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4585 < len(yyv4585) {
			yyv4585 = yyv4585[:yyj4585]
			yyc4585 = true
		} else if yyj4585 == 0 && yyv4585 == nil {
			yyv4585 = []NodeSelectorTerm{}
			yyc4585 = true
		}
	}
	yyh4585.End()
	if yyc4585 {
		*v = yyv4585
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4589 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4590 := &yyv4589
		yy4590.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4591 := *v
	yyh4591, yyl4591 := z.DecSliceHelperStart()
	var yyc4591 bool
	if yyl4591 == 0 {
		if yyv4591 == nil {
			yyv4591 = []NodeSelectorRequirement{}
			yyc4591 = true
		} else if len(yyv4591) != 0 {
			yyv4591 = yyv4591[:0]
			yyc4591 = true
		}
	} else if yyl4591 > 0 {
		var yyrr4591, yyrl4591 int
		var yyrt4591 bool
		if yyl4591 > cap(yyv4591) {

			yyrg4591 := len(yyv4591) > 0
			yyv24591 := yyv4591
			yyrl4591, yyrt4591 = z.DecInferLen(yyl4591, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4591 {
				if yyrl4591 <= cap(yyv4591) {
					yyv4591 = yyv4591[:yyrl4591]
				} else {
					yyv4591 = make([]NodeSelectorRequirement, yyrl4591)
				}
			} else {
				yyv4591 = make([]NodeSelectorRequirement, yyrl4591)
			}
			yyc4591 = true
			yyrr4591 = len(yyv4591)
			if yyrg4591 {
				copy(yyv4591, yyv24591)
			}
		} else if yyl4591 != len(yyv4591) {
			yyv4591 = yyv4591[:yyl4591]
			yyc4591 = true
		}
		yyj4591 := 0
		for ; yyj4591 < yyrr4591; yyj4591++ {
			yyh4591.ElemContainerState(yyj4591)
			if r.TryDecodeAsNil() {
				yyv4591[yyj4591] = NodeSelectorRequirement{}
			} else {
				yyv4592 := &yyv4591[yyj4591]
				yyv4592.CodecDecodeSelf(d)
			}

		}
		if yyrt4591 {
			for ; yyj4591 < yyl4591; yyj4591++ {
				yyv4591 = append(yyv4591, NodeSelectorRequirement{})
				yyh4591.ElemContainerState(yyj4591)
				if r.TryDecodeAsNil() {
					yyv4591[yyj4591] = NodeSelectorRequirement{}
				} else {
					yyv4593 := &yyv4591[yyj4591]
					yyv4593.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4591 := 0
		for ; !r.CheckBreak(); yyj4591++ {

			if yyj4591 >= len(yyv4591) {
				yyv4591 = append(yyv4591, NodeSelectorRequirement{}) // var yyz4591 NodeSelectorRequirement
				yyc4591 = true
			}
			yyh4591.ElemContainerState(yyj4591)
			if yyj4591 < len(yyv4591) {
				if r.TryDecodeAsNil() {
					yyv4591[yyj4591] = NodeSelectorRequirement{}
				} else {
					yyv4594 := &yyv4591[yyj4591]
					yyv4594.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4591 < len(yyv4591) {
			yyv4591 = yyv4591[:yyj4591]
			yyc4591 = true
		} else if yyj4591 == 0 && yyv4591 == nil {
			yyv4591 = []NodeSelectorRequirement{}
			yyc4591 = true
		}
	}
	yyh4591.End()
	if yyc4591 {
		*v = yyv4591
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4595 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4596 := &yyv4595
		yy4596.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4597 := *v
	yyh4597, yyl4597 := z.DecSliceHelperStart()
	var yyc4597 bool
	if yyl4597 == 0 {
		if yyv4597 == nil {
			yyv4597 = []PodAffinityTerm{}
			yyc4597 = true
		} else if len(yyv4597) != 0 {
			yyv4597 = yyv4597[:0]
			yyc4597 = true
		}
	} else if yyl4597 > 0 {
		var yyrr4597, yyrl4597 int
		var yyrt4597 bool
		if yyl4597 > cap(yyv4597) {

			yyrg4597 := len(yyv4597) > 0
			yyv24597 := yyv4597
			yyrl4597, yyrt4597 = z.DecInferLen(yyl4597, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4597 {
				if yyrl4597 <= cap(yyv4597) {
					yyv4597 = yyv4597[:yyrl4597]
				} else {
					yyv4597 = make([]PodAffinityTerm, yyrl4597)
				}
			} else {
				yyv4597 = make([]PodAffinityTerm, yyrl4597)
			}
			yyc4597 = true
			yyrr4597 = len(yyv4597)
			if yyrg4597 {
				copy(yyv4597, yyv24597)
			}
		} else if yyl4597 != len(yyv4597) {
			yyv4597 = yyv4597[:yyl4597]
			yyc4597 = true
		}
		yyj4597 := 0
		for ; yyj4597 < yyrr4597; yyj4597++ {
			yyh4597.ElemContainerState(yyj4597)
			if r.TryDecodeAsNil() {
				yyv4597[yyj4597] = PodAffinityTerm{}
			} else {
				yyv4598 := &yyv4597[yyj4597]
				yyv4598.CodecDecodeSelf(d)
			}

		}
		if yyrt4597 {
			for ; yyj4597 < yyl4597; yyj4597++ {
				yyv4597 = append(yyv4597, PodAffinityTerm{})
				yyh4597.ElemContainerState(yyj4597)
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = PodAffinityTerm{}
				} else {
					yyv4599 := &yyv4597[yyj4597]
					yyv4599.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4597 := 0
		for ; !r.CheckBreak(); yyj4597++ {

			if yyj4597 >= len(yyv4597) {
				yyv4597 = append(yyv4597, PodAffinityTerm{}) // var yyz4597 PodAffinityTerm
				yyc4597 = true
			}
			yyh4597.ElemContainerState(yyj4597)
			if yyj4597 < len(yyv4597) {
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = PodAffinityTerm{}
				} else {
					yyv4600 := &yyv4597[yyj4597]
					yyv4600.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4597 < len(yyv4597) {
			yyv4597 = yyv4597[:yyj4597]
			yyc4597 = true
		} else if yyj4597 == 0 && yyv4597 == nil {
			yyv4597 = []PodAffinityTerm{}
			yyc4597 = true
		}
	}
	yyh4597.End()
	if yyc4597 {
		*v = yyv4597
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4601 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4602 := &yyv4601
		yy4602.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4603 := *v
	yyh4603, yyl4603 := z.DecSliceHelperStart()
	var yyc4603 bool
	if yyl4603 == 0 {
		if yyv4603 == nil {
			yyv4603 = []WeightedPodAffinityTerm{}
			yyc4603 = true
		} else if len(yyv4603) != 0 {
			yyv4603 = yyv4603[:0]
			yyc4603 = true
		}
	} else if yyl4603 > 0 {
		var yyrr4603, yyrl4603 int
		var yyrt4603 bool
		if yyl4603 > cap(yyv4603) {

			yyrg4603 := len(yyv4603) > 0
			yyv24603 := yyv4603
			yyrl4603, yyrt4603 = z.DecInferLen(yyl4603, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4603 {
				if yyrl4603 <= cap(yyv4603) {
					yyv4603 = yyv4603[:yyrl4603]
				} else {
					yyv4603 = make([]WeightedPodAffinityTerm, yyrl4603)
				}
			} else {
				yyv4603 = make([]WeightedPodAffinityTerm, yyrl4603)
			}
			yyc4603 = true
			yyrr4603 = len(yyv4603)
			if yyrg4603 {
				copy(yyv4603, yyv24603)
			}
		} else if yyl4603 != len(yyv4603) {
			yyv4603 = yyv4603[:yyl4603]
			yyc4603 = true
		}
		yyj4603 := 0
		for ; yyj4603 < yyrr4603; yyj4603++ {
			yyh4603.ElemContainerState(yyj4603)
			if r.TryDecodeAsNil() {
				yyv4603[yyj4603] = WeightedPodAffinityTerm{}
			} else {
				yyv4604 := &yyv4603[yyj4603]
				yyv4604.CodecDecodeSelf(d)
			}

		}
		if yyrt4603 {
			for ; yyj4603 < yyl4603; yyj4603++ {
				yyv4603 = append(yyv4603, WeightedPodAffinityTerm{})
				yyh4603.ElemContainerState(yyj4603)
				if r.TryDecodeAsNil() {
					yyv4603[yyj4603] = WeightedPodAffinityTerm{}
				} else {
					yyv4605 := &yyv4603[yyj4603]
					yyv4605.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4603 := 0
		for ; !r.CheckBreak(); yyj4603++ {

			if yyj4603 >= len(yyv4603) {
				yyv4603 = append(yyv4603, WeightedPodAffinityTerm{}) // var yyz4603 WeightedPodAffinityTerm
				yyc4603 = true
			}
			yyh4603.ElemContainerState(yyj4603)
			if yyj4603 < len(yyv4603) {
				if r.TryDecodeAsNil() {
					yyv4603[yyj4603] = WeightedPodAffinityTerm{}
				} else {
					yyv4606 := &yyv4603[yyj4603]
					yyv4606.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4603 < len(yyv4603) {
			yyv4603 = yyv4603[:yyj4603]
			yyc4603 = true
		} else if yyj4603 == 0 && yyv4603 == nil {
			yyv4603 = []WeightedPodAffinityTerm{}
			yyc4603 = true
		}
	}
	yyh4603.End()
	if yyc4603 {
		*v = yyv4603
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4607 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4608 := &yyv4607
		yy4608.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4609 := *v
	yyh4609, yyl4609 := z.DecSliceHelperStart()
	var yyc4609 bool
	if yyl4609 == 0 {
		if yyv4609 == nil {
			yyv4609 = []PreferredSchedulingTerm{}
			yyc4609 = true
		} else if len(yyv4609) != 0 {
			yyv4609 = yyv4609[:0]
			yyc4609 = true
		}
	} else if yyl4609 > 0 {
		var yyrr4609, yyrl4609 int
		var yyrt4609 bool
		if yyl4609 > cap(yyv4609) {

			yyrg4609 := len(yyv4609) > 0
			yyv24609 := yyv4609
			yyrl4609, yyrt4609 = z.DecInferLen(yyl4609, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4609 {
				if yyrl4609 <= cap(yyv4609) {
					yyv4609 = yyv4609[:yyrl4609]
				} else {
					yyv4609 = make([]PreferredSchedulingTerm, yyrl4609)
				}
			} else {
				yyv4609 = make([]PreferredSchedulingTerm, yyrl4609)
			}
			yyc4609 = true
			yyrr4609 = len(yyv4609)
			if yyrg4609 {
				copy(yyv4609, yyv24609)
			}
		} else if yyl4609 != len(yyv4609) {
			yyv4609 = yyv4609[:yyl4609]
			yyc4609 = true
		}
		yyj4609 := 0
		for ; yyj4609 < yyrr4609; yyj4609++ {
			yyh4609.ElemContainerState(yyj4609)
			if r.TryDecodeAsNil() {
				yyv4609[yyj4609] = PreferredSchedulingTerm{}
			} else {
				yyv4610 := &yyv4609[yyj4609]
				yyv4610.CodecDecodeSelf(d)
			}

		}
		if yyrt4609 {
			for ; yyj4609 < yyl4609; yyj4609++ {
				yyv4609 = append(yyv4609, PreferredSchedulingTerm{})
				yyh4609.ElemContainerState(yyj4609)
				if r.TryDecodeAsNil() {
					yyv4609[yyj4609] = PreferredSchedulingTerm{}
				} else {
					yyv4611 := &yyv4609[yyj4609]
					yyv4611.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4609 := 0
		for ; !r.CheckBreak(); yyj4609++ {

			if yyj4609 >= len(yyv4609) {
				yyv4609 = append(yyv4609, PreferredSchedulingTerm{}) // var yyz4609 PreferredSchedulingTerm
				yyc4609 = true
			}
			yyh4609.ElemContainerState(yyj4609)
			if yyj4609 < len(yyv4609) {
				if r.TryDecodeAsNil() {
					yyv4609[yyj4609] = PreferredSchedulingTerm{}
				} else {
					yyv4612 := &yyv4609[yyj4609]
					yyv4612.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4609 < len(yyv4609) {
			yyv4609 = yyv4609[:yyj4609]
			yyc4609 = true
		} else if yyj4609 == 0 && yyv4609 == nil {
			yyv4609 = []PreferredSchedulingTerm{}
			yyc4609 = true
		}
	}
	yyh4609.End()
	if yyc4609 {
		*v = yyv4609
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4613 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4614 := &yyv4613
		yy4614.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4615 := *v
	yyh4615, yyl4615 := z.DecSliceHelperStart()
	var yyc4615 bool
	if yyl4615 == 0 {
		if yyv4615 == nil {
			yyv4615 = []Volume{}
			yyc4615 = true
		} else if len(yyv4615) != 0 {
			yyv4615 = yyv4615[:0]
			yyc4615 = true
		}
	} else if yyl4615 > 0 {
		var yyrr4615, yyrl4615 int
		var yyrt4615 bool
		if yyl4615 > cap(yyv4615) {

			yyrg4615 := len(yyv4615) > 0
			yyv24615 := yyv4615
			yyrl4615, yyrt4615 = z.DecInferLen(yyl4615, z.DecBasicHandle().MaxInitLen, 192)
			if yyrt4615 {
				if yyrl4615 <= cap(yyv4615) {
					yyv4615 = yyv4615[:yyrl4615]
				} else {
					yyv4615 = make([]Volume, yyrl4615)
				}
			} else {
				yyv4615 = make([]Volume, yyrl4615)
			}
			yyc4615 = true
			yyrr4615 = len(yyv4615)
			if yyrg4615 {
				copy(yyv4615, yyv24615)
			}
		} else if yyl4615 != len(yyv4615) {
			yyv4615 = yyv4615[:yyl4615]
			yyc4615 = true
		}
		yyj4615 := 0
		for ; yyj4615 < yyrr4615; yyj4615++ {
			yyh4615.ElemContainerState(yyj4615)
			if r.TryDecodeAsNil() {
				yyv4615[yyj4615] = Volume{}
			} else {
				yyv4616 := &yyv4615[yyj4615]
				yyv4616.CodecDecodeSelf(d)
			}

		}
		if yyrt4615 {
			for ; yyj4615 < yyl4615; yyj4615++ {
				yyv4615 = append(yyv4615, Volume{})
				yyh4615.ElemContainerState(yyj4615)
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = Volume{}
				} else {
					yyv4617 := &yyv4615[yyj4615]
					yyv4617.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4615 := 0
		for ; !r.CheckBreak(); yyj4615++ {

			if yyj4615 >= len(yyv4615) {
				yyv4615 = append(yyv4615, Volume{}) // var yyz4615 Volume
				yyc4615 = true
			}
			yyh4615.ElemContainerState(yyj4615)
			if yyj4615 < len(yyv4615) {
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = Volume{}
				} else {
					yyv4618 := &yyv4615[yyj4615]
					yyv4618.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4615 < len(yyv4615) {
			yyv4615 = yyv4615[:yyj4615]
			yyc4615 = true
		} else if yyj4615 == 0 && yyv4615 == nil {
			yyv4615 = []Volume{}
			yyc4615 = true
		}
	}
	yyh4615.End()
	if yyc4615 {
		*v = yyv4615
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4619 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4620 := &yyv4619
		yy4620.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4621 := *v
	yyh4621, yyl4621 := z.DecSliceHelperStart()
	var yyc4621 bool
	if yyl4621 == 0 {
		if yyv4621 == nil {
			yyv4621 = []Container{}
			yyc4621 = true
		} else if len(yyv4621) != 0 {
			yyv4621 = yyv4621[:0]
			yyc4621 = true
		}
	} else if yyl4621 > 0 {
		var yyrr4621, yyrl4621 int
		var yyrt4621 bool
		if yyl4621 > cap(yyv4621) {

			yyrg4621 := len(yyv4621) > 0
			yyv24621 := yyv4621
			yyrl4621, yyrt4621 = z.DecInferLen(yyl4621, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4621 {
				if yyrl4621 <= cap(yyv4621) {
					yyv4621 = yyv4621[:yyrl4621]
				} else {
					yyv4621 = make([]Container, yyrl4621)
				}
			} else {
				yyv4621 = make([]Container, yyrl4621)
			}
			yyc4621 = true
			yyrr4621 = len(yyv4621)
			if yyrg4621 {
				copy(yyv4621, yyv24621)
			}
		} else if yyl4621 != len(yyv4621) {
			yyv4621 = yyv4621[:yyl4621]
			yyc4621 = true
		}
		yyj4621 := 0
		for ; yyj4621 < yyrr4621; yyj4621++ {
			yyh4621.ElemContainerState(yyj4621)
			if r.TryDecodeAsNil() {
				yyv4621[yyj4621] = Container{}
			} else {
				yyv4622 := &yyv4621[yyj4621]
				yyv4622.CodecDecodeSelf(d)
			}

		}
		if yyrt4621 {
			for ; yyj4621 < yyl4621; yyj4621++ {
				yyv4621 = append(yyv4621, Container{})
				yyh4621.ElemContainerState(yyj4621)
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = Container{}
				} else {
					yyv4623 := &yyv4621[yyj4621]
					yyv4623.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4621 := 0
		for ; !r.CheckBreak(); yyj4621++ {

			if yyj4621 >= len(yyv4621) {
				yyv4621 = append(yyv4621, Container{}) // var yyz4621 Container
				yyc4621 = true
			}
			yyh4621.ElemContainerState(yyj4621)
			if yyj4621 < len(yyv4621) {
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = Container{}
				} else {
					yyv4624 := &yyv4621[yyj4621]
					yyv4624.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4621 < len(yyv4621) {
			yyv4621 = yyv4621[:yyj4621]
			yyc4621 = true
		} else if yyj4621 == 0 && yyv4621 == nil {
			yyv4621 = []Container{}
			yyc4621 = true
		}
	}
	yyh4621.End()
	if yyc4621 {
		*v = yyv4621
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4625 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4626 := &yyv4625
		yy4626.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4627 := *v
	yyh4627, yyl4627 := z.DecSliceHelperStart()
	var yyc4627 bool
	if yyl4627 == 0 {
		if yyv4627 == nil {
			yyv4627 = []LocalObjectReference{}
			yyc4627 = true
		} else if len(yyv4627) != 0 {
			yyv4627 = yyv4627[:0]
			yyc4627 = true
		}
	} else if yyl4627 > 0 {
		var yyrr4627, yyrl4627 int
		var yyrt4627 bool
		if yyl4627 > cap(yyv4627) {

			yyrg4627 := len(yyv4627) > 0
			yyv24627 := yyv4627
			yyrl4627, yyrt4627 = z.DecInferLen(yyl4627, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4627 {
				if yyrl4627 <= cap(yyv4627) {
					yyv4627 = yyv4627[:yyrl4627]
				} else {
					yyv4627 = make([]LocalObjectReference, yyrl4627)
				}
			} else {
				yyv4627 = make([]LocalObjectReference, yyrl4627)
			}
			yyc4627 = true
			yyrr4627 = len(yyv4627)
			if yyrg4627 {
				copy(yyv4627, yyv24627)
			}
		} else if yyl4627 != len(yyv4627) {
			yyv4627 = yyv4627[:yyl4627]
			yyc4627 = true
		}
		yyj4627 := 0
		for ; yyj4627 < yyrr4627; yyj4627++ {
			yyh4627.ElemContainerState(yyj4627)
			if r.TryDecodeAsNil() {
				yyv4627[yyj4627] = LocalObjectReference{}
			} else {
				yyv4628 := &yyv4627[yyj4627]
				yyv4628.CodecDecodeSelf(d)
			}

		}
		if yyrt4627 {
			for ; yyj4627 < yyl4627; yyj4627++ {
				yyv4627 = append(yyv4627, LocalObjectReference{})
				yyh4627.ElemContainerState(yyj4627)
				if r.TryDecodeAsNil() {
					yyv4627[yyj4627] = LocalObjectReference{}
				} else {
					yyv4629 := &yyv4627[yyj4627]
					yyv4629.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4627 := 0
		for ; !r.CheckBreak(); yyj4627++ {

			if yyj4627 >= len(yyv4627) {
				yyv4627 = append(yyv4627, LocalObjectReference{}) // var yyz4627 LocalObjectReference
				yyc4627 = true
			}
			yyh4627.ElemContainerState(yyj4627)
			if yyj4627 < len(yyv4627) {
				if r.TryDecodeAsNil() {
					yyv4627[yyj4627] = LocalObjectReference{}
				} else {
					yyv4630 := &yyv4627[yyj4627]
					yyv4630.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4627 < len(yyv4627) {
			yyv4627 = yyv4627[:yyj4627]
			yyc4627 = true
		} else if yyj4627 == 0 && yyv4627 == nil {
			yyv4627 = []LocalObjectReference{}
			yyc4627 = true
		}
	}
	yyh4627.End()
	if yyc4627 {
		*v = yyv4627
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4631 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4632 := &yyv4631
		yy4632.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4633 := *v
	yyh4633, yyl4633 := z.DecSliceHelperStart()
	var yyc4633 bool
	if yyl4633 == 0 {
		if yyv4633 == nil {
			yyv4633 = []PodCondition{}
			yyc4633 = true
		} else if len(yyv4633) != 0 {
			yyv4633 = yyv4633[:0]
			yyc4633 = true
		}
	} else if yyl4633 > 0 {
		var yyrr4633, yyrl4633 int
		var yyrt4633 bool
		if yyl4633 > cap(yyv4633) {

			yyrg4633 := len(yyv4633) > 0
			yyv24633 := yyv4633
			yyrl4633, yyrt4633 = z.DecInferLen(yyl4633, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4633 {
				if yyrl4633 <= cap(yyv4633) {
					yyv4633 = yyv4633[:yyrl4633]
				} else {
					yyv4633 = make([]PodCondition, yyrl4633)
				}
			} else {
				yyv4633 = make([]PodCondition, yyrl4633)
			}
			yyc4633 = true
			yyrr4633 = len(yyv4633)
			if yyrg4633 {
				copy(yyv4633, yyv24633)
			}
		} else if yyl4633 != len(yyv4633) {
			yyv4633 = yyv4633[:yyl4633]
			yyc4633 = true
		}
		yyj4633 := 0
		for ; yyj4633 < yyrr4633; yyj4633++ {
			yyh4633.ElemContainerState(yyj4633)
			if r.TryDecodeAsNil() {
				yyv4633[yyj4633] = PodCondition{}
			} else {
				yyv4634 := &yyv4633[yyj4633]
				yyv4634.CodecDecodeSelf(d)
			}

		}
		if yyrt4633 {
			for ; yyj4633 < yyl4633; yyj4633++ {
				yyv4633 = append(yyv4633, PodCondition{})
				yyh4633.ElemContainerState(yyj4633)
				if r.TryDecodeAsNil() {
					yyv4633[yyj4633] = PodCondition{}
				} else {
					yyv4635 := &yyv4633[yyj4633]
					yyv4635.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4633 := 0
		for ; !r.CheckBreak(); yyj4633++ {

			if yyj4633 >= len(yyv4633) {
				yyv4633 = append(yyv4633, PodCondition{}) // var yyz4633 PodCondition
				yyc4633 = true
			}
			yyh4633.ElemContainerState(yyj4633)
			if yyj4633 < len(yyv4633) {
				if r.TryDecodeAsNil() {
					yyv4633[yyj4633] = PodCondition{}
				} else {
					yyv4636 := &yyv4633[yyj4633]
					yyv4636.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4633 < len(yyv4633) {
			yyv4633 = yyv4633[:yyj4633]
			yyc4633 = true
		} else if yyj4633 == 0 && yyv4633 == nil {
			yyv4633 = []PodCondition{}
			yyc4633 = true
		}
	}
	yyh4633.End()
	if yyc4633 {
		*v = yyv4633
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4637 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4638 := &yyv4637
		yy4638.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4639 := *v
	yyh4639, yyl4639 := z.DecSliceHelperStart()
	var yyc4639 bool
	if yyl4639 == 0 {
		if yyv4639 == nil {
			yyv4639 = []ContainerStatus{}
			yyc4639 = true
		} else if len(yyv4639) != 0 {
			yyv4639 = yyv4639[:0]
			yyc4639 = true
		}
	} else if yyl4639 > 0 {
		var yyrr4639, yyrl4639 int
		var yyrt4639 bool
		if yyl4639 > cap(yyv4639) {

			yyrg4639 := len(yyv4639) > 0
			yyv24639 := yyv4639
			yyrl4639, yyrt4639 = z.DecInferLen(yyl4639, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4639 {
				if yyrl4639 <= cap(yyv4639) {
					yyv4639 = yyv4639[:yyrl4639]
				} else {
					yyv4639 = make([]ContainerStatus, yyrl4639)
				}
			} else {
				yyv4639 = make([]ContainerStatus, yyrl4639)
			}
			yyc4639 = true
			yyrr4639 = len(yyv4639)
			if yyrg4639 {
				copy(yyv4639, yyv24639)
			}
		} else if yyl4639 != len(yyv4639) {
			yyv4639 = yyv4639[:yyl4639]
			yyc4639 = true
		}
		yyj4639 := 0
		for ; yyj4639 < yyrr4639; yyj4639++ {
			yyh4639.ElemContainerState(yyj4639)
			if r.TryDecodeAsNil() {
				yyv4639[yyj4639] = ContainerStatus{}
			} else {
				yyv4640 := &yyv4639[yyj4639]
				yyv4640.CodecDecodeSelf(d)
			}

		}
		if yyrt4639 {
			for ; yyj4639 < yyl4639; yyj4639++ {
				yyv4639 = append(yyv4639, ContainerStatus{})
				yyh4639.ElemContainerState(yyj4639)
				if r.TryDecodeAsNil() {
					yyv4639[yyj4639] = ContainerStatus{}
				} else {
					yyv4641 := &yyv4639[yyj4639]
					yyv4641.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4639 := 0
		for ; !r.CheckBreak(); yyj4639++ {

			if yyj4639 >= len(yyv4639) {
				yyv4639 = append(yyv4639, ContainerStatus{}) // var yyz4639 ContainerStatus
				yyc4639 = true
			}
			yyh4639.ElemContainerState(yyj4639)
			if yyj4639 < len(yyv4639) {
				if r.TryDecodeAsNil() {
					yyv4639[yyj4639] = ContainerStatus{}
				} else {
					yyv4642 := &yyv4639[yyj4639]
					yyv4642.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4639 < len(yyv4639) {
			yyv4639 = yyv4639[:yyj4639]
			yyc4639 = true
		} else if yyj4639 == 0 && yyv4639 == nil {
			yyv4639 = []ContainerStatus{}
			yyc4639 = true
		}
	}
	yyh4639.End()
	if yyc4639 {
		*v = yyv4639
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4643 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4644 := &yyv4643
		yy4644.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4645 := *v
	yyh4645, yyl4645 := z.DecSliceHelperStart()
	var yyc4645 bool
	if yyl4645 == 0 {
		if yyv4645 == nil {
			yyv4645 = []Pod{}
			yyc4645 = true
		} else if len(yyv4645) != 0 {
			yyv4645 = yyv4645[:0]
			yyc4645 = true
		}
	} else if yyl4645 > 0 {
		var yyrr4645, yyrl4645 int
		var yyrt4645 bool
		if yyl4645 > cap(yyv4645) {

			yyrg4645 := len(yyv4645) > 0
			yyv24645 := yyv4645
			yyrl4645, yyrt4645 = z.DecInferLen(yyl4645, z.DecBasicHandle().MaxInitLen, 664)
			if yyrt4645 {
				if yyrl4645 <= cap(yyv4645) {
					yyv4645 = yyv4645[:yyrl4645]
				} else {
					yyv4645 = make([]Pod, yyrl4645)
				}
			} else {
				yyv4645 = make([]Pod, yyrl4645)
			}
			yyc4645 = true
			yyrr4645 = len(yyv4645)
			if yyrg4645 {
				copy(yyv4645, yyv24645)
			}
		} else if yyl4645 != len(yyv4645) {
			yyv4645 = yyv4645[:yyl4645]
			yyc4645 = true
		}
		yyj4645 := 0
		for ; yyj4645 < yyrr4645; yyj4645++ {
			yyh4645.ElemContainerState(yyj4645)
			if r.TryDecodeAsNil() {
				yyv4645[yyj4645] = Pod{}
			} else {
				yyv4646 := &yyv4645[yyj4645]
				yyv4646.CodecDecodeSelf(d)
			}

		}
		if yyrt4645 {
			for ; yyj4645 < yyl4645; yyj4645++ {
				yyv4645 = append(yyv4645, Pod{})
				yyh4645.ElemContainerState(yyj4645)
				if r.TryDecodeAsNil() {
					yyv4645[yyj4645] = Pod{}
				} else {
					yyv4647 := &yyv4645[yyj4645]
					yyv4647.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4645 := 0
		for ; !r.CheckBreak(); yyj4645++ {

			if yyj4645 >= len(yyv4645) {
				yyv4645 = append(yyv4645, Pod{}) // var yyz4645 Pod
				yyc4645 = true
			}
			yyh4645.ElemContainerState(yyj4645)
			if yyj4645 < len(yyv4645) {
				if r.TryDecodeAsNil() {
					yyv4645[yyj4645] = Pod{}
				} else {
					yyv4648 := &yyv4645[yyj4645]
					yyv4648.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4645 < len(yyv4645) {
			yyv4645 = yyv4645[:yyj4645]
			yyc4645 = true
		} else if yyj4645 == 0 && yyv4645 == nil {
			yyv4645 = []Pod{}
			yyc4645 = true
		}
	}
	yyh4645.End()
	if yyc4645 {
		*v = yyv4645
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4649 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4650 := &yyv4649
		yy4650.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4651 := *v
	yyh4651, yyl4651 := z.DecSliceHelperStart()
	var yyc4651 bool
	if yyl4651 == 0 {
		if yyv4651 == nil {
			yyv4651 = []PodTemplate{}
			yyc4651 = true
		} else if len(yyv4651) != 0 {
			yyv4651 = yyv4651[:0]
			yyc4651 = true
		}
	} else if yyl4651 > 0 {
		var yyrr4651, yyrl4651 int
		var yyrt4651 bool
		if yyl4651 > cap(yyv4651) {

			yyrg4651 := len(yyv4651) > 0
			yyv24651 := yyv4651
			yyrl4651, yyrt4651 = z.DecInferLen(yyl4651, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt4651 {
				if yyrl4651 <= cap(yyv4651) {
					yyv4651 = yyv4651[:yyrl4651]
				} else {
					yyv4651 = make([]PodTemplate, yyrl4651)
				}
			} else {
				yyv4651 = make([]PodTemplate, yyrl4651)
			}
			yyc4651 = true
			yyrr4651 = len(yyv4651)
			if yyrg4651 {
				copy(yyv4651, yyv24651)
			}
		} else if yyl4651 != len(yyv4651) {
			yyv4651 = yyv4651[:yyl4651]
			yyc4651 = true
		}
		yyj4651 := 0
		for ; yyj4651 < yyrr4651; yyj4651++ {
			yyh4651.ElemContainerState(yyj4651)
			if r.TryDecodeAsNil() {
				yyv4651[yyj4651] = PodTemplate{}
			} else {
				yyv4652 := &yyv4651[yyj4651]
				yyv4652.CodecDecodeSelf(d)
			}

		}
		if yyrt4651 {
			for ; yyj4651 < yyl4651; yyj4651++ {
				yyv4651 = append(yyv4651, PodTemplate{})
				yyh4651.ElemContainerState(yyj4651)
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = PodTemplate{}
				} else {
					yyv4653 := &yyv4651[yyj4651]
					yyv4653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4651 := 0
		for ; !r.CheckBreak(); yyj4651++ {

			if yyj4651 >= len(yyv4651) {
				yyv4651 = append(yyv4651, PodTemplate{}) // var yyz4651 PodTemplate
				yyc4651 = true
			}
			yyh4651.ElemContainerState(yyj4651)
			if yyj4651 < len(yyv4651) {
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = PodTemplate{}
				} else {
					yyv4654 := &yyv4651[yyj4651]
					yyv4654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4651 < len(yyv4651) {
			yyv4651 = yyv4651[:yyj4651]
			yyc4651 = true
		} else if yyj4651 == 0 && yyv4651 == nil {
			yyv4651 = []PodTemplate{}
			yyc4651 = true
		}
	}
	yyh4651.End()
	if yyc4651 {
		*v = yyv4651
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4655 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4656 := &yyv4655
		yy4656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4657 := *v
	yyh4657, yyl4657 := z.DecSliceHelperStart()
	var yyc4657 bool
	if yyl4657 == 0 {
		if yyv4657 == nil {
			yyv4657 = []ReplicationController{}
			yyc4657 = true
		} else if len(yyv4657) != 0 {
			yyv4657 = yyv4657[:0]
			yyc4657 = true
		}
	} else if yyl4657 > 0 {
		var yyrr4657, yyrl4657 int
		var yyrt4657 bool
		if yyl4657 > cap(yyv4657) {

			yyrg4657 := len(yyv4657) > 0
			yyv24657 := yyv4657
			yyrl4657, yyrt4657 = z.DecInferLen(yyl4657, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4657 {
				if yyrl4657 <= cap(yyv4657) {
					yyv4657 = yyv4657[:yyrl4657]
				} else {
					yyv4657 = make([]ReplicationController, yyrl4657)
				}
			} else {
				yyv4657 = make([]ReplicationController, yyrl4657)
			}
			yyc4657 = true
			yyrr4657 = len(yyv4657)
			if yyrg4657 {
				copy(yyv4657, yyv24657)
			}
		} else if yyl4657 != len(yyv4657) {
			yyv4657 = yyv4657[:yyl4657]
			yyc4657 = true
		}
		yyj4657 := 0
		for ; yyj4657 < yyrr4657; yyj4657++ {
			yyh4657.ElemContainerState(yyj4657)
			if r.TryDecodeAsNil() {
				yyv4657[yyj4657] = ReplicationController{}
			} else {
				yyv4658 := &yyv4657[yyj4657]
				yyv4658.CodecDecodeSelf(d)
			}

		}
		if yyrt4657 {
			for ; yyj4657 < yyl4657; yyj4657++ {
				yyv4657 = append(yyv4657, ReplicationController{})
				yyh4657.ElemContainerState(yyj4657)
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = ReplicationController{}
				} else {
					yyv4659 := &yyv4657[yyj4657]
					yyv4659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4657 := 0
		for ; !r.CheckBreak(); yyj4657++ {

			if yyj4657 >= len(yyv4657) {
				yyv4657 = append(yyv4657, ReplicationController{}) // var yyz4657 ReplicationController
				yyc4657 = true
			}
			yyh4657.ElemContainerState(yyj4657)
			if yyj4657 < len(yyv4657) {
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = ReplicationController{}
				} else {
					yyv4660 := &yyv4657[yyj4657]
					yyv4660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4657 < len(yyv4657) {
			yyv4657 = yyv4657[:yyj4657]
			yyc4657 = true
		} else if yyj4657 == 0 && yyv4657 == nil {
			yyv4657 = []ReplicationController{}
			yyc4657 = true
		}
	}
	yyh4657.End()
	if yyc4657 {
		*v = yyv4657
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4662 := &yyv4661
		yy4662.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4663 := *v
	yyh4663, yyl4663 := z.DecSliceHelperStart()
	var yyc4663 bool
	if yyl4663 == 0 {
		if yyv4663 == nil {
			yyv4663 = []LoadBalancerIngress{}
			yyc4663 = true
		} else if len(yyv4663) != 0 {
			yyv4663 = yyv4663[:0]
			yyc4663 = true
		}
	} else if yyl4663 > 0 {
		var yyrr4663, yyrl4663 int
		var yyrt4663 bool
		if yyl4663 > cap(yyv4663) {

			yyrg4663 := len(yyv4663) > 0
			yyv24663 := yyv4663
			yyrl4663, yyrt4663 = z.DecInferLen(yyl4663, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4663 {
				if yyrl4663 <= cap(yyv4663) {
					yyv4663 = yyv4663[:yyrl4663]
				} else {
					yyv4663 = make([]LoadBalancerIngress, yyrl4663)
				}
			} else {
				yyv4663 = make([]LoadBalancerIngress, yyrl4663)
			}
			yyc4663 = true
			yyrr4663 = len(yyv4663)
			if yyrg4663 {
				copy(yyv4663, yyv24663)
			}
		} else if yyl4663 != len(yyv4663) {
			yyv4663 = yyv4663[:yyl4663]
			yyc4663 = true
		}
		yyj4663 := 0
		for ; yyj4663 < yyrr4663; yyj4663++ {
			yyh4663.ElemContainerState(yyj4663)
			if r.TryDecodeAsNil() {
				yyv4663[yyj4663] = LoadBalancerIngress{}
			} else {
				yyv4664 := &yyv4663[yyj4663]
				yyv4664.CodecDecodeSelf(d)
			}

		}
		if yyrt4663 {
			for ; yyj4663 < yyl4663; yyj4663++ {
				yyv4663 = append(yyv4663, LoadBalancerIngress{})
				yyh4663.ElemContainerState(yyj4663)
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = LoadBalancerIngress{}
				} else {
					yyv4665 := &yyv4663[yyj4663]
					yyv4665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4663 := 0
		for ; !r.CheckBreak(); yyj4663++ {

			if yyj4663 >= len(yyv4663) {
				yyv4663 = append(yyv4663, LoadBalancerIngress{}) // var yyz4663 LoadBalancerIngress
				yyc4663 = true
			}
			yyh4663.ElemContainerState(yyj4663)
			if yyj4663 < len(yyv4663) {
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = LoadBalancerIngress{}
				} else {
					yyv4666 := &yyv4663[yyj4663]
					yyv4666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4663 < len(yyv4663) {
			yyv4663 = yyv4663[:yyj4663]
			yyc4663 = true
		} else if yyj4663 == 0 && yyv4663 == nil {
			yyv4663 = []LoadBalancerIngress{}
			yyc4663 = true
		}
	}
	yyh4663.End()
	if yyc4663 {
		*v = yyv4663
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4667 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4668 := &yyv4667
		yy4668.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4669 := *v
	yyh4669, yyl4669 := z.DecSliceHelperStart()
	var yyc4669 bool
	if yyl4669 == 0 {
		if yyv4669 == nil {
			yyv4669 = []ServicePort{}
			yyc4669 = true
		} else if len(yyv4669) != 0 {
			yyv4669 = yyv4669[:0]
			yyc4669 = true
		}
	} else if yyl4669 > 0 {
		var yyrr4669, yyrl4669 int
		var yyrt4669 bool
		if yyl4669 > cap(yyv4669) {

			yyrg4669 := len(yyv4669) > 0
			yyv24669 := yyv4669
			yyrl4669, yyrt4669 = z.DecInferLen(yyl4669, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4669 {
				if yyrl4669 <= cap(yyv4669) {
					yyv4669 = yyv4669[:yyrl4669]
				} else {
					yyv4669 = make([]ServicePort, yyrl4669)
				}
			} else {
				yyv4669 = make([]ServicePort, yyrl4669)
			}
			yyc4669 = true
			yyrr4669 = len(yyv4669)
			if yyrg4669 {
				copy(yyv4669, yyv24669)
			}
		} else if yyl4669 != len(yyv4669) {
			yyv4669 = yyv4669[:yyl4669]
			yyc4669 = true
		}
		yyj4669 := 0
		for ; yyj4669 < yyrr4669; yyj4669++ {
			yyh4669.ElemContainerState(yyj4669)
			if r.TryDecodeAsNil() {
				yyv4669[yyj4669] = ServicePort{}
			} else {
				yyv4670 := &yyv4669[yyj4669]
				yyv4670.CodecDecodeSelf(d)
			}

		}
		if yyrt4669 {
			for ; yyj4669 < yyl4669; yyj4669++ {
				yyv4669 = append(yyv4669, ServicePort{})
				yyh4669.ElemContainerState(yyj4669)
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = ServicePort{}
				} else {
					yyv4671 := &yyv4669[yyj4669]
					yyv4671.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4669 := 0
		for ; !r.CheckBreak(); yyj4669++ {

			if yyj4669 >= len(yyv4669) {
				yyv4669 = append(yyv4669, ServicePort{}) // var yyz4669 ServicePort
				yyc4669 = true
			}
			yyh4669.ElemContainerState(yyj4669)
			if yyj4669 < len(yyv4669) {
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = ServicePort{}
				} else {
					yyv4672 := &yyv4669[yyj4669]
					yyv4672.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4669 < len(yyv4669) {
			yyv4669 = yyv4669[:yyj4669]
			yyc4669 = true
		} else if yyj4669 == 0 && yyv4669 == nil {
			yyv4669 = []ServicePort{}
			yyc4669 = true
		}
	}
	yyh4669.End()
	if yyc4669 {
		*v = yyv4669
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4673 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4674 := &yyv4673
		yy4674.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4675 := *v
	yyh4675, yyl4675 := z.DecSliceHelperStart()
	var yyc4675 bool
	if yyl4675 == 0 {
		if yyv4675 == nil {
			yyv4675 = []Service{}
			yyc4675 = true
		} else if len(yyv4675) != 0 {
			yyv4675 = yyv4675[:0]
			yyc4675 = true
		}
	} else if yyl4675 > 0 {
		var yyrr4675, yyrl4675 int
		var yyrt4675 bool
		if yyl4675 > cap(yyv4675) {

			yyrg4675 := len(yyv4675) > 0
			yyv24675 := yyv4675
			yyrl4675, yyrt4675 = z.DecInferLen(yyl4675, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4675 {
				if yyrl4675 <= cap(yyv4675) {
					yyv4675 = yyv4675[:yyrl4675]
				} else {
					yyv4675 = make([]Service, yyrl4675)
				}
			} else {
				yyv4675 = make([]Service, yyrl4675)
			}
			yyc4675 = true
			yyrr4675 = len(yyv4675)
			if yyrg4675 {
				copy(yyv4675, yyv24675)
			}
		} else if yyl4675 != len(yyv4675) {
			yyv4675 = yyv4675[:yyl4675]
			yyc4675 = true
		}
		yyj4675 := 0
		for ; yyj4675 < yyrr4675; yyj4675++ {
			yyh4675.ElemContainerState(yyj4675)
			if r.TryDecodeAsNil() {
				yyv4675[yyj4675] = Service{}
			} else {
				yyv4676 := &yyv4675[yyj4675]
				yyv4676.CodecDecodeSelf(d)
			}

		}
		if yyrt4675 {
			for ; yyj4675 < yyl4675; yyj4675++ {
				yyv4675 = append(yyv4675, Service{})
				yyh4675.ElemContainerState(yyj4675)
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = Service{}
				} else {
					yyv4677 := &yyv4675[yyj4675]
					yyv4677.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4675 := 0
		for ; !r.CheckBreak(); yyj4675++ {

			if yyj4675 >= len(yyv4675) {
				yyv4675 = append(yyv4675, Service{}) // var yyz4675 Service
				yyc4675 = true
			}
			yyh4675.ElemContainerState(yyj4675)
			if yyj4675 < len(yyv4675) {
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = Service{}
				} else {
					yyv4678 := &yyv4675[yyj4675]
					yyv4678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4675 < len(yyv4675) {
			yyv4675 = yyv4675[:yyj4675]
			yyc4675 = true
		} else if yyj4675 == 0 && yyv4675 == nil {
			yyv4675 = []Service{}
			yyc4675 = true
		}
	}
	yyh4675.End()
	if yyc4675 {
		*v = yyv4675
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4679 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4680 := &yyv4679
		yy4680.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4681 := *v
	yyh4681, yyl4681 := z.DecSliceHelperStart()
	var yyc4681 bool
	if yyl4681 == 0 {
		if yyv4681 == nil {
			yyv4681 = []ObjectReference{}
			yyc4681 = true
		} else if len(yyv4681) != 0 {
			yyv4681 = yyv4681[:0]
			yyc4681 = true
		}
	} else if yyl4681 > 0 {
		var yyrr4681, yyrl4681 int
		var yyrt4681 bool
		if yyl4681 > cap(yyv4681) {

			yyrg4681 := len(yyv4681) > 0
			yyv24681 := yyv4681
			yyrl4681, yyrt4681 = z.DecInferLen(yyl4681, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4681 {
				if yyrl4681 <= cap(yyv4681) {
					yyv4681 = yyv4681[:yyrl4681]
				} else {
					yyv4681 = make([]ObjectReference, yyrl4681)
				}
			} else {
				yyv4681 = make([]ObjectReference, yyrl4681)
			}
			yyc4681 = true
			yyrr4681 = len(yyv4681)
			if yyrg4681 {
				copy(yyv4681, yyv24681)
			}
		} else if yyl4681 != len(yyv4681) {
			yyv4681 = yyv4681[:yyl4681]
			yyc4681 = true
		}
		yyj4681 := 0
		for ; yyj4681 < yyrr4681; yyj4681++ {
			yyh4681.ElemContainerState(yyj4681)
			if r.TryDecodeAsNil() {
				yyv4681[yyj4681] = ObjectReference{}
			} else {
				yyv4682 := &yyv4681[yyj4681]
				yyv4682.CodecDecodeSelf(d)
			}

		}
		if yyrt4681 {
			for ; yyj4681 < yyl4681; yyj4681++ {
				yyv4681 = append(yyv4681, ObjectReference{})
				yyh4681.ElemContainerState(yyj4681)
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = ObjectReference{}
				} else {
					yyv4683 := &yyv4681[yyj4681]
					yyv4683.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4681 := 0
		for ; !r.CheckBreak(); yyj4681++ {

			if yyj4681 >= len(yyv4681) {
				yyv4681 = append(yyv4681, ObjectReference{}) // var yyz4681 ObjectReference
				yyc4681 = true
			}
			yyh4681.ElemContainerState(yyj4681)
			if yyj4681 < len(yyv4681) {
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = ObjectReference{}
				} else {
					yyv4684 := &yyv4681[yyj4681]
					yyv4684.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4681 < len(yyv4681) {
			yyv4681 = yyv4681[:yyj4681]
			yyc4681 = true
		} else if yyj4681 == 0 && yyv4681 == nil {
			yyv4681 = []ObjectReference{}
			yyc4681 = true
		}
	}
	yyh4681.End()
	if yyc4681 {
		*v = yyv4681
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4685 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4686 := &yyv4685
		yy4686.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4687 := *v
	yyh4687, yyl4687 := z.DecSliceHelperStart()
	var yyc4687 bool
	if yyl4687 == 0 {
		if yyv4687 == nil {
			yyv4687 = []ServiceAccount{}
			yyc4687 = true
		} else if len(yyv4687) != 0 {
			yyv4687 = yyv4687[:0]
			yyc4687 = true
		}
	} else if yyl4687 > 0 {
		var yyrr4687, yyrl4687 int
		var yyrt4687 bool
		if yyl4687 > cap(yyv4687) {

			yyrg4687 := len(yyv4687) > 0
			yyv24687 := yyv4687
			yyrl4687, yyrt4687 = z.DecInferLen(yyl4687, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4687 {
				if yyrl4687 <= cap(yyv4687) {
					yyv4687 = yyv4687[:yyrl4687]
				} else {
					yyv4687 = make([]ServiceAccount, yyrl4687)
				}
			} else {
				yyv4687 = make([]ServiceAccount, yyrl4687)
			}
			yyc4687 = true
			yyrr4687 = len(yyv4687)
			if yyrg4687 {
				copy(yyv4687, yyv24687)
			}
		} else if yyl4687 != len(yyv4687) {
			yyv4687 = yyv4687[:yyl4687]
			yyc4687 = true
		}
		yyj4687 := 0
		for ; yyj4687 < yyrr4687; yyj4687++ {
			yyh4687.ElemContainerState(yyj4687)
			if r.TryDecodeAsNil() {
				yyv4687[yyj4687] = ServiceAccount{}
			} else {
				yyv4688 := &yyv4687[yyj4687]
				yyv4688.CodecDecodeSelf(d)
			}

		}
		if yyrt4687 {
			for ; yyj4687 < yyl4687; yyj4687++ {
				yyv4687 = append(yyv4687, ServiceAccount{})
				yyh4687.ElemContainerState(yyj4687)
				if r.TryDecodeAsNil() {
					yyv4687[yyj4687] = ServiceAccount{}
				} else {
					yyv4689 := &yyv4687[yyj4687]
					yyv4689.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4687 := 0
		for ; !r.CheckBreak(); yyj4687++ {

			if yyj4687 >= len(yyv4687) {
				yyv4687 = append(yyv4687, ServiceAccount{}) // var yyz4687 ServiceAccount
				yyc4687 = true
			}
			yyh4687.ElemContainerState(yyj4687)
			if yyj4687 < len(yyv4687) {
				if r.TryDecodeAsNil() {
					yyv4687[yyj4687] = ServiceAccount{}
				} else {
					yyv4690 := &yyv4687[yyj4687]
					yyv4690.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4687 < len(yyv4687) {
			yyv4687 = yyv4687[:yyj4687]
			yyc4687 = true
		} else if yyj4687 == 0 && yyv4687 == nil {
			yyv4687 = []ServiceAccount{}
			yyc4687 = true
		}
	}
	yyh4687.End()
	if yyc4687 {
		*v = yyv4687
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4691 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4692 := &yyv4691
		yy4692.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4693 := *v
	yyh4693, yyl4693 := z.DecSliceHelperStart()
	var yyc4693 bool
	if yyl4693 == 0 {
		if yyv4693 == nil {
			yyv4693 = []EndpointSubset{}
			yyc4693 = true
		} else if len(yyv4693) != 0 {
			yyv4693 = yyv4693[:0]
			yyc4693 = true
		}
	} else if yyl4693 > 0 {
		var yyrr4693, yyrl4693 int
		var yyrt4693 bool
		if yyl4693 > cap(yyv4693) {

			yyrg4693 := len(yyv4693) > 0
			yyv24693 := yyv4693
			yyrl4693, yyrt4693 = z.DecInferLen(yyl4693, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4693 {
				if yyrl4693 <= cap(yyv4693) {
					yyv4693 = yyv4693[:yyrl4693]
				} else {
					yyv4693 = make([]EndpointSubset, yyrl4693)
				}
			} else {
				yyv4693 = make([]EndpointSubset, yyrl4693)
			}
			yyc4693 = true
			yyrr4693 = len(yyv4693)
			if yyrg4693 {
				copy(yyv4693, yyv24693)
			}
		} else if yyl4693 != len(yyv4693) {
			yyv4693 = yyv4693[:yyl4693]
			yyc4693 = true
		}
		yyj4693 := 0
		for ; yyj4693 < yyrr4693; yyj4693++ {
			yyh4693.ElemContainerState(yyj4693)
			if r.TryDecodeAsNil() {
				yyv4693[yyj4693] = EndpointSubset{}
			} else {
				yyv4694 := &yyv4693[yyj4693]
				yyv4694.CodecDecodeSelf(d)
			}

		}
		if yyrt4693 {
			for ; yyj4693 < yyl4693; yyj4693++ {
				yyv4693 = append(yyv4693, EndpointSubset{})
				yyh4693.ElemContainerState(yyj4693)
				if r.TryDecodeAsNil() {
					yyv4693[yyj4693] = EndpointSubset{}
				} else {
					yyv4695 := &yyv4693[yyj4693]
					yyv4695.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4693 := 0
		for ; !r.CheckBreak(); yyj4693++ {

			if yyj4693 >= len(yyv4693) {
				yyv4693 = append(yyv4693, EndpointSubset{}) // var yyz4693 EndpointSubset
				yyc4693 = true
			}
			yyh4693.ElemContainerState(yyj4693)
			if yyj4693 < len(yyv4693) {
				if r.TryDecodeAsNil() {
					yyv4693[yyj4693] = EndpointSubset{}
				} else {
					yyv4696 := &yyv4693[yyj4693]
					yyv4696.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4693 < len(yyv4693) {
			yyv4693 = yyv4693[:yyj4693]
			yyc4693 = true
		} else if yyj4693 == 0 && yyv4693 == nil {
			yyv4693 = []EndpointSubset{}
			yyc4693 = true
		}
	}
	yyh4693.End()
	if yyc4693 {
		*v = yyv4693
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4697 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4698 := &yyv4697
		yy4698.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4699 := *v
	yyh4699, yyl4699 := z.DecSliceHelperStart()
	var yyc4699 bool
	if yyl4699 == 0 {
		if yyv4699 == nil {
			yyv4699 = []EndpointAddress{}
			yyc4699 = true
		} else if len(yyv4699) != 0 {
			yyv4699 = yyv4699[:0]
			yyc4699 = true
		}
	} else if yyl4699 > 0 {
		var yyrr4699, yyrl4699 int
		var yyrt4699 bool
		if yyl4699 > cap(yyv4699) {

			yyrg4699 := len(yyv4699) > 0
			yyv24699 := yyv4699
			yyrl4699, yyrt4699 = z.DecInferLen(yyl4699, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4699 {
				if yyrl4699 <= cap(yyv4699) {
					yyv4699 = yyv4699[:yyrl4699]
				} else {
					yyv4699 = make([]EndpointAddress, yyrl4699)
				}
			} else {
				yyv4699 = make([]EndpointAddress, yyrl4699)
			}
			yyc4699 = true
			yyrr4699 = len(yyv4699)
			if yyrg4699 {
				copy(yyv4699, yyv24699)
			}
		} else if yyl4699 != len(yyv4699) {
			yyv4699 = yyv4699[:yyl4699]
			yyc4699 = true
		}
		yyj4699 := 0
		for ; yyj4699 < yyrr4699; yyj4699++ {
			yyh4699.ElemContainerState(yyj4699)
			if r.TryDecodeAsNil() {
				yyv4699[yyj4699] = EndpointAddress{}
			} else {
				yyv4700 := &yyv4699[yyj4699]
				yyv4700.CodecDecodeSelf(d)
			}

		}
		if yyrt4699 {
			for ; yyj4699 < yyl4699; yyj4699++ {
				yyv4699 = append(yyv4699, EndpointAddress{})
				yyh4699.ElemContainerState(yyj4699)
				if r.TryDecodeAsNil() {
					yyv4699[yyj4699] = EndpointAddress{}
				} else {
					yyv4701 := &yyv4699[yyj4699]
					yyv4701.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4699 := 0
		for ; !r.CheckBreak(); yyj4699++ {

			if yyj4699 >= len(yyv4699) {
				yyv4699 = append(yyv4699, EndpointAddress{}) // var yyz4699 EndpointAddress
				yyc4699 = true
			}
			yyh4699.ElemContainerState(yyj4699)
			if yyj4699 < len(yyv4699) {
				if r.TryDecodeAsNil() {
					yyv4699[yyj4699] = EndpointAddress{}
				} else {
					yyv4702 := &yyv4699[yyj4699]
					yyv4702.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4699 < len(yyv4699) {
			yyv4699 = yyv4699[:yyj4699]
			yyc4699 = true
		} else if yyj4699 == 0 && yyv4699 == nil {
			yyv4699 = []EndpointAddress{}
			yyc4699 = true
		}
	}
	yyh4699.End()
	if yyc4699 {
		*v = yyv4699
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4703 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4704 := &yyv4703
		yy4704.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4705 := *v
	yyh4705, yyl4705 := z.DecSliceHelperStart()
	var yyc4705 bool
	if yyl4705 == 0 {
		if yyv4705 == nil {
			yyv4705 = []EndpointPort{}
			yyc4705 = true
		} else if len(yyv4705) != 0 {
			yyv4705 = yyv4705[:0]
			yyc4705 = true
		}
	} else if yyl4705 > 0 {
		var yyrr4705, yyrl4705 int
		var yyrt4705 bool
		if yyl4705 > cap(yyv4705) {

			yyrg4705 := len(yyv4705) > 0
			yyv24705 := yyv4705
			yyrl4705, yyrt4705 = z.DecInferLen(yyl4705, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4705 {
				if yyrl4705 <= cap(yyv4705) {
					yyv4705 = yyv4705[:yyrl4705]
				} else {
					yyv4705 = make([]EndpointPort, yyrl4705)
				}
			} else {
				yyv4705 = make([]EndpointPort, yyrl4705)
			}
			yyc4705 = true
			yyrr4705 = len(yyv4705)
			if yyrg4705 {
				copy(yyv4705, yyv24705)
			}
		} else if yyl4705 != len(yyv4705) {
			yyv4705 = yyv4705[:yyl4705]
			yyc4705 = true
		}
		yyj4705 := 0
		for ; yyj4705 < yyrr4705; yyj4705++ {
			yyh4705.ElemContainerState(yyj4705)
			if r.TryDecodeAsNil() {
				yyv4705[yyj4705] = EndpointPort{}
			} else {
				yyv4706 := &yyv4705[yyj4705]
				yyv4706.CodecDecodeSelf(d)
			}

		}
		if yyrt4705 {
			for ; yyj4705 < yyl4705; yyj4705++ {
				yyv4705 = append(yyv4705, EndpointPort{})
				yyh4705.ElemContainerState(yyj4705)
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = EndpointPort{}
				} else {
					yyv4707 := &yyv4705[yyj4705]
					yyv4707.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4705 := 0
		for ; !r.CheckBreak(); yyj4705++ {

			if yyj4705 >= len(yyv4705) {
				yyv4705 = append(yyv4705, EndpointPort{}) // var yyz4705 EndpointPort
				yyc4705 = true
			}
			yyh4705.ElemContainerState(yyj4705)
			if yyj4705 < len(yyv4705) {
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = EndpointPort{}
				} else {
					yyv4708 := &yyv4705[yyj4705]
					yyv4708.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4705 < len(yyv4705) {
			yyv4705 = yyv4705[:yyj4705]
			yyc4705 = true
		} else if yyj4705 == 0 && yyv4705 == nil {
			yyv4705 = []EndpointPort{}
			yyc4705 = true
		}
	}
	yyh4705.End()
	if yyc4705 {
		*v = yyv4705
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4709 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4710 := &yyv4709
		yy4710.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4711 := *v
	yyh4711, yyl4711 := z.DecSliceHelperStart()
	var yyc4711 bool
	if yyl4711 == 0 {
		if yyv4711 == nil {
			yyv4711 = []Endpoints{}
			yyc4711 = true
		} else if len(yyv4711) != 0 {
			yyv4711 = yyv4711[:0]
			yyc4711 = true
		}
	} else if yyl4711 > 0 {
		var yyrr4711, yyrl4711 int
		var yyrt4711 bool
		if yyl4711 > cap(yyv4711) {

			yyrg4711 := len(yyv4711) > 0
			yyv24711 := yyv4711
			yyrl4711, yyrt4711 = z.DecInferLen(yyl4711, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4711 {
				if yyrl4711 <= cap(yyv4711) {
					yyv4711 = yyv4711[:yyrl4711]
				} else {
					yyv4711 = make([]Endpoints, yyrl4711)
				}
			} else {
				yyv4711 = make([]Endpoints, yyrl4711)
			}
			yyc4711 = true
			yyrr4711 = len(yyv4711)
			if yyrg4711 {
				copy(yyv4711, yyv24711)
			}
		} else if yyl4711 != len(yyv4711) {
			yyv4711 = yyv4711[:yyl4711]
			yyc4711 = true
		}
		yyj4711 := 0
		for ; yyj4711 < yyrr4711; yyj4711++ {
			yyh4711.ElemContainerState(yyj4711)
			if r.TryDecodeAsNil() {
				yyv4711[yyj4711] = Endpoints{}
			} else {
				yyv4712 := &yyv4711[yyj4711]
				yyv4712.CodecDecodeSelf(d)
			}

		}
		if yyrt4711 {
			for ; yyj4711 < yyl4711; yyj4711++ {
				yyv4711 = append(yyv4711, Endpoints{})
				yyh4711.ElemContainerState(yyj4711)
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = Endpoints{}
				} else {
					yyv4713 := &yyv4711[yyj4711]
					yyv4713.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4711 := 0
		for ; !r.CheckBreak(); yyj4711++ {

			if yyj4711 >= len(yyv4711) {
				yyv4711 = append(yyv4711, Endpoints{}) // var yyz4711 Endpoints
				yyc4711 = true
			}
			yyh4711.ElemContainerState(yyj4711)
			if yyj4711 < len(yyv4711) {
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = Endpoints{}
				} else {
					yyv4714 := &yyv4711[yyj4711]
					yyv4714.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4711 < len(yyv4711) {
			yyv4711 = yyv4711[:yyj4711]
			yyc4711 = true
		} else if yyj4711 == 0 && yyv4711 == nil {
			yyv4711 = []Endpoints{}
			yyc4711 = true
		}
	}
	yyh4711.End()
	if yyc4711 {
		*v = yyv4711
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4715 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4716 := &yyv4715
		yy4716.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4717 := *v
	yyh4717, yyl4717 := z.DecSliceHelperStart()
	var yyc4717 bool
	if yyl4717 == 0 {
		if yyv4717 == nil {
			yyv4717 = []NodeCondition{}
			yyc4717 = true
		} else if len(yyv4717) != 0 {
			yyv4717 = yyv4717[:0]
			yyc4717 = true
		}
	} else if yyl4717 > 0 {
		var yyrr4717, yyrl4717 int
		var yyrt4717 bool
		if yyl4717 > cap(yyv4717) {

			yyrg4717 := len(yyv4717) > 0
			yyv24717 := yyv4717
			yyrl4717, yyrt4717 = z.DecInferLen(yyl4717, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4717 {
				if yyrl4717 <= cap(yyv4717) {
					yyv4717 = yyv4717[:yyrl4717]
				} else {
					yyv4717 = make([]NodeCondition, yyrl4717)
				}
			} else {
				yyv4717 = make([]NodeCondition, yyrl4717)
			}
			yyc4717 = true
			yyrr4717 = len(yyv4717)
			if yyrg4717 {
				copy(yyv4717, yyv24717)
			}
		} else if yyl4717 != len(yyv4717) {
			yyv4717 = yyv4717[:yyl4717]
			yyc4717 = true
		}
		yyj4717 := 0
		for ; yyj4717 < yyrr4717; yyj4717++ {
			yyh4717.ElemContainerState(yyj4717)
			if r.TryDecodeAsNil() {
				yyv4717[yyj4717] = NodeCondition{}
			} else {
				yyv4718 := &yyv4717[yyj4717]
				yyv4718.CodecDecodeSelf(d)
			}

		}
		if yyrt4717 {
			for ; yyj4717 < yyl4717; yyj4717++ {
				yyv4717 = append(yyv4717, NodeCondition{})
				yyh4717.ElemContainerState(yyj4717)
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = NodeCondition{}
				} else {
					yyv4719 := &yyv4717[yyj4717]
					yyv4719.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4717 := 0
		for ; !r.CheckBreak(); yyj4717++ {

			if yyj4717 >= len(yyv4717) {
				yyv4717 = append(yyv4717, NodeCondition{}) // var yyz4717 NodeCondition
				yyc4717 = true
			}
			yyh4717.ElemContainerState(yyj4717)
			if yyj4717 < len(yyv4717) {
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = NodeCondition{}
				} else {
					yyv4720 := &yyv4717[yyj4717]
					yyv4720.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4717 < len(yyv4717) {
			yyv4717 = yyv4717[:yyj4717]
			yyc4717 = true
		} else if yyj4717 == 0 && yyv4717 == nil {
			yyv4717 = []NodeCondition{}
			yyc4717 = true
		}
	}
	yyh4717.End()
	if yyc4717 {
		*v = yyv4717
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4721 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4722 := &yyv4721
		yy4722.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4723 := *v
	yyh4723, yyl4723 := z.DecSliceHelperStart()
	var yyc4723 bool
	if yyl4723 == 0 {
		if yyv4723 == nil {
			yyv4723 = []NodeAddress{}
			yyc4723 = true
		} else if len(yyv4723) != 0 {
			yyv4723 = yyv4723[:0]
			yyc4723 = true
		}
	} else if yyl4723 > 0 {
		var yyrr4723, yyrl4723 int
		var yyrt4723 bool
		if yyl4723 > cap(yyv4723) {

			yyrg4723 := len(yyv4723) > 0
			yyv24723 := yyv4723
			yyrl4723, yyrt4723 = z.DecInferLen(yyl4723, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4723 {
				if yyrl4723 <= cap(yyv4723) {
					yyv4723 = yyv4723[:yyrl4723]
				} else {
					yyv4723 = make([]NodeAddress, yyrl4723)
				}
			} else {
				yyv4723 = make([]NodeAddress, yyrl4723)
			}
			yyc4723 = true
			yyrr4723 = len(yyv4723)
			if yyrg4723 {
				copy(yyv4723, yyv24723)
			}
		} else if yyl4723 != len(yyv4723) {
			yyv4723 = yyv4723[:yyl4723]
			yyc4723 = true
		}
		yyj4723 := 0
		for ; yyj4723 < yyrr4723; yyj4723++ {
			yyh4723.ElemContainerState(yyj4723)
			if r.TryDecodeAsNil() {
				yyv4723[yyj4723] = NodeAddress{}
			} else {
				yyv4724 := &yyv4723[yyj4723]
				yyv4724.CodecDecodeSelf(d)
			}

		}
		if yyrt4723 {
			for ; yyj4723 < yyl4723; yyj4723++ {
				yyv4723 = append(yyv4723, NodeAddress{})
				yyh4723.ElemContainerState(yyj4723)
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = NodeAddress{}
				} else {
					yyv4725 := &yyv4723[yyj4723]
					yyv4725.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4723 := 0
		for ; !r.CheckBreak(); yyj4723++ {

			if yyj4723 >= len(yyv4723) {
				yyv4723 = append(yyv4723, NodeAddress{}) // var yyz4723 NodeAddress
				yyc4723 = true
			}
			yyh4723.ElemContainerState(yyj4723)
			if yyj4723 < len(yyv4723) {
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = NodeAddress{}
				} else {
					yyv4726 := &yyv4723[yyj4723]
					yyv4726.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4723 < len(yyv4723) {
			yyv4723 = yyv4723[:yyj4723]
			yyc4723 = true
		} else if yyj4723 == 0 && yyv4723 == nil {
			yyv4723 = []NodeAddress{}
			yyc4723 = true
		}
	}
	yyh4723.End()
	if yyc4723 {
		*v = yyv4723
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4727 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4728 := &yyv4727
		yy4728.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4729 := *v
	yyh4729, yyl4729 := z.DecSliceHelperStart()
	var yyc4729 bool
	if yyl4729 == 0 {
		if yyv4729 == nil {
			yyv4729 = []ContainerImage{}
			yyc4729 = true
		} else if len(yyv4729) != 0 {
			yyv4729 = yyv4729[:0]
			yyc4729 = true
		}
	} else if yyl4729 > 0 {
		var yyrr4729, yyrl4729 int
		var yyrt4729 bool
		if yyl4729 > cap(yyv4729) {

			yyrg4729 := len(yyv4729) > 0
			yyv24729 := yyv4729
			yyrl4729, yyrt4729 = z.DecInferLen(yyl4729, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4729 {
				if yyrl4729 <= cap(yyv4729) {
					yyv4729 = yyv4729[:yyrl4729]
				} else {
					yyv4729 = make([]ContainerImage, yyrl4729)
				}
			} else {
				yyv4729 = make([]ContainerImage, yyrl4729)
			}
			yyc4729 = true
			yyrr4729 = len(yyv4729)
			if yyrg4729 {
				copy(yyv4729, yyv24729)
			}
		} else if yyl4729 != len(yyv4729) {
			yyv4729 = yyv4729[:yyl4729]
			yyc4729 = true
		}
		yyj4729 := 0
		for ; yyj4729 < yyrr4729; yyj4729++ {
			yyh4729.ElemContainerState(yyj4729)
			if r.TryDecodeAsNil() {
				yyv4729[yyj4729] = ContainerImage{}
			} else {
				yyv4730 := &yyv4729[yyj4729]
				yyv4730.CodecDecodeSelf(d)
			}

		}
		if yyrt4729 {
			for ; yyj4729 < yyl4729; yyj4729++ {
				yyv4729 = append(yyv4729, ContainerImage{})
				yyh4729.ElemContainerState(yyj4729)
				if r.TryDecodeAsNil() {
					yyv4729[yyj4729] = ContainerImage{}
				} else {
					yyv4731 := &yyv4729[yyj4729]
					yyv4731.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4729 := 0
		for ; !r.CheckBreak(); yyj4729++ {

			if yyj4729 >= len(yyv4729) {
				yyv4729 = append(yyv4729, ContainerImage{}) // var yyz4729 ContainerImage
				yyc4729 = true
			}
			yyh4729.ElemContainerState(yyj4729)
			if yyj4729 < len(yyv4729) {
				if r.TryDecodeAsNil() {
					yyv4729[yyj4729] = ContainerImage{}
				} else {
					yyv4732 := &yyv4729[yyj4729]
					yyv4732.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4729 < len(yyv4729) {
			yyv4729 = yyv4729[:yyj4729]
			yyc4729 = true
		} else if yyj4729 == 0 && yyv4729 == nil {
			yyv4729 = []ContainerImage{}
			yyc4729 = true
		}
	}
	yyh4729.End()
	if yyc4729 {
		*v = yyv4729
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4733 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4733.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4734 := *v
	yyh4734, yyl4734 := z.DecSliceHelperStart()
	var yyc4734 bool
	if yyl4734 == 0 {
		if yyv4734 == nil {
			yyv4734 = []UniqueVolumeName{}
			yyc4734 = true
		} else if len(yyv4734) != 0 {
			yyv4734 = yyv4734[:0]
			yyc4734 = true
		}
	} else if yyl4734 > 0 {
		var yyrr4734, yyrl4734 int
		var yyrt4734 bool
		if yyl4734 > cap(yyv4734) {

			yyrl4734, yyrt4734 = z.DecInferLen(yyl4734, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4734 {
				if yyrl4734 <= cap(yyv4734) {
					yyv4734 = yyv4734[:yyrl4734]
				} else {
					yyv4734 = make([]UniqueVolumeName, yyrl4734)
				}
			} else {
				yyv4734 = make([]UniqueVolumeName, yyrl4734)
			}
			yyc4734 = true
			yyrr4734 = len(yyv4734)
		} else if yyl4734 != len(yyv4734) {
			yyv4734 = yyv4734[:yyl4734]
			yyc4734 = true
		}
		yyj4734 := 0
		for ; yyj4734 < yyrr4734; yyj4734++ {
			yyh4734.ElemContainerState(yyj4734)
			if r.TryDecodeAsNil() {
				yyv4734[yyj4734] = ""
			} else {
				yyv4734[yyj4734] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4734 {
			for ; yyj4734 < yyl4734; yyj4734++ {
				yyv4734 = append(yyv4734, "")
				yyh4734.ElemContainerState(yyj4734)
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = ""
				} else {
					yyv4734[yyj4734] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4734 := 0
		for ; !r.CheckBreak(); yyj4734++ {

			if yyj4734 >= len(yyv4734) {
				yyv4734 = append(yyv4734, "") // var yyz4734 UniqueVolumeName
				yyc4734 = true
			}
			yyh4734.ElemContainerState(yyj4734)
			if yyj4734 < len(yyv4734) {
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = ""
				} else {
					yyv4734[yyj4734] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4734 < len(yyv4734) {
			yyv4734 = yyv4734[:yyj4734]
			yyc4734 = true
		} else if yyj4734 == 0 && yyv4734 == nil {
			yyv4734 = []UniqueVolumeName{}
			yyc4734 = true
		}
	}
	yyh4734.End()
	if yyc4734 {
		*v = yyv4734
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4738 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4739 := &yyv4738
		yy4739.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4740 := *v
	yyh4740, yyl4740 := z.DecSliceHelperStart()
	var yyc4740 bool
	if yyl4740 == 0 {
		if yyv4740 == nil {
			yyv4740 = []AttachedVolume{}
			yyc4740 = true
		} else if len(yyv4740) != 0 {
			yyv4740 = yyv4740[:0]
			yyc4740 = true
		}
	} else if yyl4740 > 0 {
		var yyrr4740, yyrl4740 int
		var yyrt4740 bool
		if yyl4740 > cap(yyv4740) {

			yyrg4740 := len(yyv4740) > 0
			yyv24740 := yyv4740
			yyrl4740, yyrt4740 = z.DecInferLen(yyl4740, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4740 {
				if yyrl4740 <= cap(yyv4740) {
					yyv4740 = yyv4740[:yyrl4740]
				} else {
					yyv4740 = make([]AttachedVolume, yyrl4740)
				}
			} else {
				yyv4740 = make([]AttachedVolume, yyrl4740)
			}
			yyc4740 = true
			yyrr4740 = len(yyv4740)
			if yyrg4740 {
				copy(yyv4740, yyv24740)
			}
		} else if yyl4740 != len(yyv4740) {
			yyv4740 = yyv4740[:yyl4740]
			yyc4740 = true
		}
		yyj4740 := 0
		for ; yyj4740 < yyrr4740; yyj4740++ {
			yyh4740.ElemContainerState(yyj4740)
			if r.TryDecodeAsNil() {
				yyv4740[yyj4740] = AttachedVolume{}
			} else {
				yyv4741 := &yyv4740[yyj4740]
				yyv4741.CodecDecodeSelf(d)
			}

		}
		if yyrt4740 {
			for ; yyj4740 < yyl4740; yyj4740++ {
				yyv4740 = append(yyv4740, AttachedVolume{})
				yyh4740.ElemContainerState(yyj4740)
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = AttachedVolume{}
				} else {
					yyv4742 := &yyv4740[yyj4740]
					yyv4742.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4740 := 0
		for ; !r.CheckBreak(); yyj4740++ {

			if yyj4740 >= len(yyv4740) {
				yyv4740 = append(yyv4740, AttachedVolume{}) // var yyz4740 AttachedVolume
				yyc4740 = true
			}
			yyh4740.ElemContainerState(yyj4740)
			if yyj4740 < len(yyv4740) {
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = AttachedVolume{}
				} else {
					yyv4743 := &yyv4740[yyj4740]
					yyv4743.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4740 < len(yyv4740) {
			yyv4740 = yyv4740[:yyj4740]
			yyc4740 = true
		} else if yyj4740 == 0 && yyv4740 == nil {
			yyv4740 = []AttachedVolume{}
			yyc4740 = true
		}
	}
	yyh4740.End()
	if yyc4740 {
		*v = yyv4740
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4744 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4745 := &yyv4744
		yy4745.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4746 := *v
	yyh4746, yyl4746 := z.DecSliceHelperStart()
	var yyc4746 bool
	if yyl4746 == 0 {
		if yyv4746 == nil {
			yyv4746 = []PreferAvoidPodsEntry{}
			yyc4746 = true
		} else if len(yyv4746) != 0 {
			yyv4746 = yyv4746[:0]
			yyc4746 = true
		}
	} else if yyl4746 > 0 {
		var yyrr4746, yyrl4746 int
		var yyrt4746 bool
		if yyl4746 > cap(yyv4746) {

			yyrg4746 := len(yyv4746) > 0
			yyv24746 := yyv4746
			yyrl4746, yyrt4746 = z.DecInferLen(yyl4746, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4746 {
				if yyrl4746 <= cap(yyv4746) {
					yyv4746 = yyv4746[:yyrl4746]
				} else {
					yyv4746 = make([]PreferAvoidPodsEntry, yyrl4746)
				}
			} else {
				yyv4746 = make([]PreferAvoidPodsEntry, yyrl4746)
			}
			yyc4746 = true
			yyrr4746 = len(yyv4746)
			if yyrg4746 {
				copy(yyv4746, yyv24746)
			}
		} else if yyl4746 != len(yyv4746) {
			yyv4746 = yyv4746[:yyl4746]
			yyc4746 = true
		}
		yyj4746 := 0
		for ; yyj4746 < yyrr4746; yyj4746++ {
			yyh4746.ElemContainerState(yyj4746)
			if r.TryDecodeAsNil() {
				yyv4746[yyj4746] = PreferAvoidPodsEntry{}
			} else {
				yyv4747 := &yyv4746[yyj4746]
				yyv4747.CodecDecodeSelf(d)
			}

		}
		if yyrt4746 {
			for ; yyj4746 < yyl4746; yyj4746++ {
				yyv4746 = append(yyv4746, PreferAvoidPodsEntry{})
				yyh4746.ElemContainerState(yyj4746)
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = PreferAvoidPodsEntry{}
				} else {
					yyv4748 := &yyv4746[yyj4746]
					yyv4748.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4746 := 0
		for ; !r.CheckBreak(); yyj4746++ {

			if yyj4746 >= len(yyv4746) {
				yyv4746 = append(yyv4746, PreferAvoidPodsEntry{}) // var yyz4746 PreferAvoidPodsEntry
				yyc4746 = true
			}
			yyh4746.ElemContainerState(yyj4746)
			if yyj4746 < len(yyv4746) {
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = PreferAvoidPodsEntry{}
				} else {
					yyv4749 := &yyv4746[yyj4746]
					yyv4749.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4746 < len(yyv4746) {
			yyv4746 = yyv4746[:yyj4746]
			yyc4746 = true
		} else if yyj4746 == 0 && yyv4746 == nil {
			yyv4746 = []PreferAvoidPodsEntry{}
			yyc4746 = true
		}
	}
	yyh4746.End()
	if yyc4746 {
		*v = yyv4746
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4750, yyv4750 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4750.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4751 := &yyv4750
		yym4752 := z.EncBinary()
		_ = yym4752
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4751) {
		} else if !yym4752 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4751)
		} else {
			z.EncFallback(yy4751)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4753 := *v
	yyl4753 := r.ReadMapStart()
	yybh4753 := z.DecBasicHandle()
	if yyv4753 == nil {
		yyrl4753, _ := z.DecInferLen(yyl4753, yybh4753.MaxInitLen, 72)
		yyv4753 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4753)
		*v = yyv4753
	}
	var yymk4753 ResourceName
	var yymv4753 pkg3_resource.Quantity
	var yymg4753 bool
	if yybh4753.MapValueReset {
		yymg4753 = true
	}
	if yyl4753 > 0 {
		for yyj4753 := 0; yyj4753 < yyl4753; yyj4753++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4753 = ""
			} else {
				yymk4753 = ResourceName(r.DecodeString())
			}

			if yymg4753 {
				yymv4753 = yyv4753[yymk4753]
			} else {
				yymv4753 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4753 = pkg3_resource.Quantity{}
			} else {
				yyv4755 := &yymv4753
				yym4756 := z.DecBinary()
				_ = yym4756
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4755) {
				} else if !yym4756 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4755)
				} else {
					z.DecFallback(yyv4755, false)
				}
			}

			if yyv4753 != nil {
				yyv4753[yymk4753] = yymv4753
			}
		}
	} else if yyl4753 < 0 {
		for yyj4753 := 0; !r.CheckBreak(); yyj4753++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4753 = ""
			} else {
				yymk4753 = ResourceName(r.DecodeString())
			}

			if yymg4753 {
				yymv4753 = yyv4753[yymk4753]
			} else {
				yymv4753 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4753 = pkg3_resource.Quantity{}
			} else {
				yyv4758 := &yymv4753
				yym4759 := z.DecBinary()
				_ = yym4759
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4758) {
				} else if !yym4759 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4758)
				} else {
					z.DecFallback(yyv4758, false)
				}
			}

			if yyv4753 != nil {
				yyv4753[yymk4753] = yymv4753
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4760 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4761 := &yyv4760
		yy4761.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4762 := *v
	yyh4762, yyl4762 := z.DecSliceHelperStart()
	var yyc4762 bool
	if yyl4762 == 0 {
		if yyv4762 == nil {
			yyv4762 = []Node{}
			yyc4762 = true
		} else if len(yyv4762) != 0 {
			yyv4762 = yyv4762[:0]
			yyc4762 = true
		}
	} else if yyl4762 > 0 {
		var yyrr4762, yyrl4762 int
		var yyrt4762 bool
		if yyl4762 > cap(yyv4762) {

			yyrg4762 := len(yyv4762) > 0
			yyv24762 := yyv4762
			yyrl4762, yyrt4762 = z.DecInferLen(yyl4762, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4762 {
				if yyrl4762 <= cap(yyv4762) {
					yyv4762 = yyv4762[:yyrl4762]
				} else {
					yyv4762 = make([]Node, yyrl4762)
				}
			} else {
				yyv4762 = make([]Node, yyrl4762)
			}
			yyc4762 = true
			yyrr4762 = len(yyv4762)
			if yyrg4762 {
				copy(yyv4762, yyv24762)
			}
		} else if yyl4762 != len(yyv4762) {
			yyv4762 = yyv4762[:yyl4762]
			yyc4762 = true
		}
		yyj4762 := 0
		for ; yyj4762 < yyrr4762; yyj4762++ {
			yyh4762.ElemContainerState(yyj4762)
			if r.TryDecodeAsNil() {
				yyv4762[yyj4762] = Node{}
			} else {
				yyv4763 := &yyv4762[yyj4762]
				yyv4763.CodecDecodeSelf(d)
			}

		}
		if yyrt4762 {
			for ; yyj4762 < yyl4762; yyj4762++ {
				yyv4762 = append(yyv4762, Node{})
				yyh4762.ElemContainerState(yyj4762)
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = Node{}
				} else {
					yyv4764 := &yyv4762[yyj4762]
					yyv4764.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4762 := 0
		for ; !r.CheckBreak(); yyj4762++ {

			if yyj4762 >= len(yyv4762) {
				yyv4762 = append(yyv4762, Node{}) // var yyz4762 Node
				yyc4762 = true
			}
			yyh4762.ElemContainerState(yyj4762)
			if yyj4762 < len(yyv4762) {
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = Node{}
				} else {
					yyv4765 := &yyv4762[yyj4762]
					yyv4765.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4762 < len(yyv4762) {
			yyv4762 = yyv4762[:yyj4762]
			yyc4762 = true
		} else if yyj4762 == 0 && yyv4762 == nil {
			yyv4762 = []Node{}
			yyc4762 = true
		}
	}
	yyh4762.End()
	if yyc4762 {
		*v = yyv4762
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4766 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4766.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4767 := *v
	yyh4767, yyl4767 := z.DecSliceHelperStart()
	var yyc4767 bool
	if yyl4767 == 0 {
		if yyv4767 == nil {
			yyv4767 = []FinalizerName{}
			yyc4767 = true
		} else if len(yyv4767) != 0 {
			yyv4767 = yyv4767[:0]
			yyc4767 = true
		}
	} else if yyl4767 > 0 {
		var yyrr4767, yyrl4767 int
		var yyrt4767 bool
		if yyl4767 > cap(yyv4767) {

			yyrl4767, yyrt4767 = z.DecInferLen(yyl4767, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4767 {
				if yyrl4767 <= cap(yyv4767) {
					yyv4767 = yyv4767[:yyrl4767]
				} else {
					yyv4767 = make([]FinalizerName, yyrl4767)
				}
			} else {
				yyv4767 = make([]FinalizerName, yyrl4767)
			}
			yyc4767 = true
			yyrr4767 = len(yyv4767)
		} else if yyl4767 != len(yyv4767) {
			yyv4767 = yyv4767[:yyl4767]
			yyc4767 = true
		}
		yyj4767 := 0
		for ; yyj4767 < yyrr4767; yyj4767++ {
			yyh4767.ElemContainerState(yyj4767)
			if r.TryDecodeAsNil() {
				yyv4767[yyj4767] = ""
			} else {
				yyv4767[yyj4767] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4767 {
			for ; yyj4767 < yyl4767; yyj4767++ {
				yyv4767 = append(yyv4767, "")
				yyh4767.ElemContainerState(yyj4767)
				if r.TryDecodeAsNil() {
					yyv4767[yyj4767] = ""
				} else {
					yyv4767[yyj4767] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4767 := 0
		for ; !r.CheckBreak(); yyj4767++ {

			if yyj4767 >= len(yyv4767) {
				yyv4767 = append(yyv4767, "") // var yyz4767 FinalizerName
				yyc4767 = true
			}
			yyh4767.ElemContainerState(yyj4767)
			if yyj4767 < len(yyv4767) {
				if r.TryDecodeAsNil() {
					yyv4767[yyj4767] = ""
				} else {
					yyv4767[yyj4767] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4767 < len(yyv4767) {
			yyv4767 = yyv4767[:yyj4767]
			yyc4767 = true
		} else if yyj4767 == 0 && yyv4767 == nil {
			yyv4767 = []FinalizerName{}
			yyc4767 = true
		}
	}
	yyh4767.End()
	if yyc4767 {
		*v = yyv4767
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4771 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4772 := &yyv4771
		yy4772.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4773 := *v
	yyh4773, yyl4773 := z.DecSliceHelperStart()
	var yyc4773 bool
	if yyl4773 == 0 {
		if yyv4773 == nil {
			yyv4773 = []Namespace{}
			yyc4773 = true
		} else if len(yyv4773) != 0 {
			yyv4773 = yyv4773[:0]
			yyc4773 = true
		}
	} else if yyl4773 > 0 {
		var yyrr4773, yyrl4773 int
		var yyrt4773 bool
		if yyl4773 > cap(yyv4773) {

			yyrg4773 := len(yyv4773) > 0
			yyv24773 := yyv4773
			yyrl4773, yyrt4773 = z.DecInferLen(yyl4773, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4773 {
				if yyrl4773 <= cap(yyv4773) {
					yyv4773 = yyv4773[:yyrl4773]
				} else {
					yyv4773 = make([]Namespace, yyrl4773)
				}
			} else {
				yyv4773 = make([]Namespace, yyrl4773)
			}
			yyc4773 = true
			yyrr4773 = len(yyv4773)
			if yyrg4773 {
				copy(yyv4773, yyv24773)
			}
		} else if yyl4773 != len(yyv4773) {
			yyv4773 = yyv4773[:yyl4773]
			yyc4773 = true
		}
		yyj4773 := 0
		for ; yyj4773 < yyrr4773; yyj4773++ {
			yyh4773.ElemContainerState(yyj4773)
			if r.TryDecodeAsNil() {
				yyv4773[yyj4773] = Namespace{}
			} else {
				yyv4774 := &yyv4773[yyj4773]
				yyv4774.CodecDecodeSelf(d)
			}

		}
		if yyrt4773 {
			for ; yyj4773 < yyl4773; yyj4773++ {
				yyv4773 = append(yyv4773, Namespace{})
				yyh4773.ElemContainerState(yyj4773)
				if r.TryDecodeAsNil() {
					yyv4773[yyj4773] = Namespace{}
				} else {
					yyv4775 := &yyv4773[yyj4773]
					yyv4775.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4773 := 0
		for ; !r.CheckBreak(); yyj4773++ {

			if yyj4773 >= len(yyv4773) {
				yyv4773 = append(yyv4773, Namespace{}) // var yyz4773 Namespace
				yyc4773 = true
			}
			yyh4773.ElemContainerState(yyj4773)
			if yyj4773 < len(yyv4773) {
				if r.TryDecodeAsNil() {
					yyv4773[yyj4773] = Namespace{}
				} else {
					yyv4776 := &yyv4773[yyj4773]
					yyv4776.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4773 < len(yyv4773) {
			yyv4773 = yyv4773[:yyj4773]
			yyc4773 = true
		} else if yyj4773 == 0 && yyv4773 == nil {
			yyv4773 = []Namespace{}
			yyc4773 = true
		}
	}
	yyh4773.End()
	if yyc4773 {
		*v = yyv4773
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4777 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4778 := &yyv4777
		yy4778.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4779 := *v
	yyh4779, yyl4779 := z.DecSliceHelperStart()
	var yyc4779 bool
	if yyl4779 == 0 {
		if yyv4779 == nil {
			yyv4779 = []Event{}
			yyc4779 = true
		} else if len(yyv4779) != 0 {
			yyv4779 = yyv4779[:0]
			yyc4779 = true
		}
	} else if yyl4779 > 0 {
		var yyrr4779, yyrl4779 int
		var yyrt4779 bool
		if yyl4779 > cap(yyv4779) {

			yyrg4779 := len(yyv4779) > 0
			yyv24779 := yyv4779
			yyrl4779, yyrt4779 = z.DecInferLen(yyl4779, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4779 {
				if yyrl4779 <= cap(yyv4779) {
					yyv4779 = yyv4779[:yyrl4779]
				} else {
					yyv4779 = make([]Event, yyrl4779)
				}
			} else {
				yyv4779 = make([]Event, yyrl4779)
			}
			yyc4779 = true
			yyrr4779 = len(yyv4779)
			if yyrg4779 {
				copy(yyv4779, yyv24779)
			}
		} else if yyl4779 != len(yyv4779) {
			yyv4779 = yyv4779[:yyl4779]
			yyc4779 = true
		}
		yyj4779 := 0
		for ; yyj4779 < yyrr4779; yyj4779++ {
			yyh4779.ElemContainerState(yyj4779)
			if r.TryDecodeAsNil() {
				yyv4779[yyj4779] = Event{}
			} else {
				yyv4780 := &yyv4779[yyj4779]
				yyv4780.CodecDecodeSelf(d)
			}

		}
		if yyrt4779 {
			for ; yyj4779 < yyl4779; yyj4779++ {
				yyv4779 = append(yyv4779, Event{})
				yyh4779.ElemContainerState(yyj4779)
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = Event{}
				} else {
					yyv4781 := &yyv4779[yyj4779]
					yyv4781.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4779 := 0
		for ; !r.CheckBreak(); yyj4779++ {

			if yyj4779 >= len(yyv4779) {
				yyv4779 = append(yyv4779, Event{}) // var yyz4779 Event
				yyc4779 = true
			}
			yyh4779.ElemContainerState(yyj4779)
			if yyj4779 < len(yyv4779) {
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = Event{}
				} else {
					yyv4782 := &yyv4779[yyj4779]
					yyv4782.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4779 < len(yyv4779) {
			yyv4779 = yyv4779[:yyj4779]
			yyc4779 = true
		} else if yyj4779 == 0 && yyv4779 == nil {
			yyv4779 = []Event{}
			yyc4779 = true
		}
	}
	yyh4779.End()
	if yyc4779 {
		*v = yyv4779
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4783 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4784 := &yyv4783
		yym4785 := z.EncBinary()
		_ = yym4785
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4784) {
		} else if !yym4785 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4784)
		} else {
			z.EncFallback(yy4784)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4786 := *v
	yyh4786, yyl4786 := z.DecSliceHelperStart()
	var yyc4786 bool
	if yyl4786 == 0 {
		if yyv4786 == nil {
			yyv4786 = []pkg5_runtime.RawExtension{}
			yyc4786 = true
		} else if len(yyv4786) != 0 {
			yyv4786 = yyv4786[:0]
			yyc4786 = true
		}
	} else if yyl4786 > 0 {
		var yyrr4786, yyrl4786 int
		var yyrt4786 bool
		if yyl4786 > cap(yyv4786) {

			yyrg4786 := len(yyv4786) > 0
			yyv24786 := yyv4786
			yyrl4786, yyrt4786 = z.DecInferLen(yyl4786, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4786 {
				if yyrl4786 <= cap(yyv4786) {
					yyv4786 = yyv4786[:yyrl4786]
				} else {
					yyv4786 = make([]pkg5_runtime.RawExtension, yyrl4786)
				}
			} else {
				yyv4786 = make([]pkg5_runtime.RawExtension, yyrl4786)
			}
			yyc4786 = true
			yyrr4786 = len(yyv4786)
			if yyrg4786 {
				copy(yyv4786, yyv24786)
			}
		} else if yyl4786 != len(yyv4786) {
			yyv4786 = yyv4786[:yyl4786]
			yyc4786 = true
		}
		yyj4786 := 0
		for ; yyj4786 < yyrr4786; yyj4786++ {
			yyh4786.ElemContainerState(yyj4786)
			if r.TryDecodeAsNil() {
				yyv4786[yyj4786] = pkg5_runtime.RawExtension{}
			} else {
				yyv4787 := &yyv4786[yyj4786]
				yym4788 := z.DecBinary()
				_ = yym4788
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4787) {
				} else if !yym4788 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4787)
				} else {
					z.DecFallback(yyv4787, false)
				}
			}

		}
		if yyrt4786 {
			for ; yyj4786 < yyl4786; yyj4786++ {
				yyv4786 = append(yyv4786, pkg5_runtime.RawExtension{})
				yyh4786.ElemContainerState(yyj4786)
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = pkg5_runtime.RawExtension{}
				} else {
					yyv4789 := &yyv4786[yyj4786]
					yym4790 := z.DecBinary()
					_ = yym4790
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4789) {
					} else if !yym4790 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4789)
					} else {
						z.DecFallback(yyv4789, false)
					}
				}

			}
		}

	} else {
		yyj4786 := 0
		for ; !r.CheckBreak(); yyj4786++ {

			if yyj4786 >= len(yyv4786) {
				yyv4786 = append(yyv4786, pkg5_runtime.RawExtension{}) // var yyz4786 pkg5_runtime.RawExtension
				yyc4786 = true
			}
			yyh4786.ElemContainerState(yyj4786)
			if yyj4786 < len(yyv4786) {
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = pkg5_runtime.RawExtension{}
				} else {
					yyv4791 := &yyv4786[yyj4786]
					yym4792 := z.DecBinary()
					_ = yym4792
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4791) {
					} else if !yym4792 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4791)
					} else {
						z.DecFallback(yyv4791, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4786 < len(yyv4786) {
			yyv4786 = yyv4786[:yyj4786]
			yyc4786 = true
		} else if yyj4786 == 0 && yyv4786 == nil {
			yyv4786 = []pkg5_runtime.RawExtension{}
			yyc4786 = true
		}
	}
	yyh4786.End()
	if yyc4786 {
		*v = yyv4786
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4793 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4794 := &yyv4793
		yy4794.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4795 := *v
	yyh4795, yyl4795 := z.DecSliceHelperStart()
	var yyc4795 bool
	if yyl4795 == 0 {
		if yyv4795 == nil {
			yyv4795 = []LimitRangeItem{}
			yyc4795 = true
		} else if len(yyv4795) != 0 {
			yyv4795 = yyv4795[:0]
			yyc4795 = true
		}
	} else if yyl4795 > 0 {
		var yyrr4795, yyrl4795 int
		var yyrt4795 bool
		if yyl4795 > cap(yyv4795) {

			yyrg4795 := len(yyv4795) > 0
			yyv24795 := yyv4795
			yyrl4795, yyrt4795 = z.DecInferLen(yyl4795, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4795 {
				if yyrl4795 <= cap(yyv4795) {
					yyv4795 = yyv4795[:yyrl4795]
				} else {
					yyv4795 = make([]LimitRangeItem, yyrl4795)
				}
			} else {
				yyv4795 = make([]LimitRangeItem, yyrl4795)
			}
			yyc4795 = true
			yyrr4795 = len(yyv4795)
			if yyrg4795 {
				copy(yyv4795, yyv24795)
			}
		} else if yyl4795 != len(yyv4795) {
			yyv4795 = yyv4795[:yyl4795]
			yyc4795 = true
		}
		yyj4795 := 0
		for ; yyj4795 < yyrr4795; yyj4795++ {
			yyh4795.ElemContainerState(yyj4795)
			if r.TryDecodeAsNil() {
				yyv4795[yyj4795] = LimitRangeItem{}
			} else {
				yyv4796 := &yyv4795[yyj4795]
				yyv4796.CodecDecodeSelf(d)
			}

		}
		if yyrt4795 {
			for ; yyj4795 < yyl4795; yyj4795++ {
				yyv4795 = append(yyv4795, LimitRangeItem{})
				yyh4795.ElemContainerState(yyj4795)
				if r.TryDecodeAsNil() {
					yyv4795[yyj4795] = LimitRangeItem{}
				} else {
					yyv4797 := &yyv4795[yyj4795]
					yyv4797.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4795 := 0
		for ; !r.CheckBreak(); yyj4795++ {

			if yyj4795 >= len(yyv4795) {
				yyv4795 = append(yyv4795, LimitRangeItem{}) // var yyz4795 LimitRangeItem
				yyc4795 = true
			}
			yyh4795.ElemContainerState(yyj4795)
			if yyj4795 < len(yyv4795) {
				if r.TryDecodeAsNil() {
					yyv4795[yyj4795] = LimitRangeItem{}
				} else {
					yyv4798 := &yyv4795[yyj4795]
					yyv4798.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4795 < len(yyv4795) {
			yyv4795 = yyv4795[:yyj4795]
			yyc4795 = true
		} else if yyj4795 == 0 && yyv4795 == nil {
			yyv4795 = []LimitRangeItem{}
			yyc4795 = true
		}
	}
	yyh4795.End()
	if yyc4795 {
		*v = yyv4795
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4799 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4800 := &yyv4799
		yy4800.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4801 := *v
	yyh4801, yyl4801 := z.DecSliceHelperStart()
	var yyc4801 bool
	if yyl4801 == 0 {
		if yyv4801 == nil {
			yyv4801 = []LimitRange{}
			yyc4801 = true
		} else if len(yyv4801) != 0 {
			yyv4801 = yyv4801[:0]
			yyc4801 = true
		}
	} else if yyl4801 > 0 {
		var yyrr4801, yyrl4801 int
		var yyrt4801 bool
		if yyl4801 > cap(yyv4801) {

			yyrg4801 := len(yyv4801) > 0
			yyv24801 := yyv4801
			yyrl4801, yyrt4801 = z.DecInferLen(yyl4801, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4801 {
				if yyrl4801 <= cap(yyv4801) {
					yyv4801 = yyv4801[:yyrl4801]
				} else {
					yyv4801 = make([]LimitRange, yyrl4801)
				}
			} else {
				yyv4801 = make([]LimitRange, yyrl4801)
			}
			yyc4801 = true
			yyrr4801 = len(yyv4801)
			if yyrg4801 {
				copy(yyv4801, yyv24801)
			}
		} else if yyl4801 != len(yyv4801) {
			yyv4801 = yyv4801[:yyl4801]
			yyc4801 = true
		}
		yyj4801 := 0
		for ; yyj4801 < yyrr4801; yyj4801++ {
			yyh4801.ElemContainerState(yyj4801)
			if r.TryDecodeAsNil() {
				yyv4801[yyj4801] = LimitRange{}
			} else {
				yyv4802 := &yyv4801[yyj4801]
				yyv4802.CodecDecodeSelf(d)
			}

		}
		if yyrt4801 {
			for ; yyj4801 < yyl4801; yyj4801++ {
				yyv4801 = append(yyv4801, LimitRange{})
				yyh4801.ElemContainerState(yyj4801)
				if r.TryDecodeAsNil() {
					yyv4801[yyj4801] = LimitRange{}
				} else {
					yyv4803 := &yyv4801[yyj4801]
					yyv4803.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4801 := 0
		for ; !r.CheckBreak(); yyj4801++ {

			if yyj4801 >= len(yyv4801) {
				yyv4801 = append(yyv4801, LimitRange{}) // var yyz4801 LimitRange
				yyc4801 = true
			}
			yyh4801.ElemContainerState(yyj4801)
			if yyj4801 < len(yyv4801) {
				if r.TryDecodeAsNil() {
					yyv4801[yyj4801] = LimitRange{}
				} else {
					yyv4804 := &yyv4801[yyj4801]
					yyv4804.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4801 < len(yyv4801) {
			yyv4801 = yyv4801[:yyj4801]
			yyc4801 = true
		} else if yyj4801 == 0 && yyv4801 == nil {
			yyv4801 = []LimitRange{}
			yyc4801 = true
		}
	}
	yyh4801.End()
	if yyc4801 {
		*v = yyv4801
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4805 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4805.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4806 := *v
	yyh4806, yyl4806 := z.DecSliceHelperStart()
	var yyc4806 bool
	if yyl4806 == 0 {
		if yyv4806 == nil {
			yyv4806 = []ResourceQuotaScope{}
			yyc4806 = true
		} else if len(yyv4806) != 0 {
			yyv4806 = yyv4806[:0]
			yyc4806 = true
		}
	} else if yyl4806 > 0 {
		var yyrr4806, yyrl4806 int
		var yyrt4806 bool
		if yyl4806 > cap(yyv4806) {

			yyrl4806, yyrt4806 = z.DecInferLen(yyl4806, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4806 {
				if yyrl4806 <= cap(yyv4806) {
					yyv4806 = yyv4806[:yyrl4806]
				} else {
					yyv4806 = make([]ResourceQuotaScope, yyrl4806)
				}
			} else {
				yyv4806 = make([]ResourceQuotaScope, yyrl4806)
			}
			yyc4806 = true
			yyrr4806 = len(yyv4806)
		} else if yyl4806 != len(yyv4806) {
			yyv4806 = yyv4806[:yyl4806]
			yyc4806 = true
		}
		yyj4806 := 0
		for ; yyj4806 < yyrr4806; yyj4806++ {
			yyh4806.ElemContainerState(yyj4806)
			if r.TryDecodeAsNil() {
				yyv4806[yyj4806] = ""
			} else {
				yyv4806[yyj4806] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4806 {
			for ; yyj4806 < yyl4806; yyj4806++ {
				yyv4806 = append(yyv4806, "")
				yyh4806.ElemContainerState(yyj4806)
				if r.TryDecodeAsNil() {
					yyv4806[yyj4806] = ""
				} else {
					yyv4806[yyj4806] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4806 := 0
		for ; !r.CheckBreak(); yyj4806++ {

			if yyj4806 >= len(yyv4806) {
				yyv4806 = append(yyv4806, "") // var yyz4806 ResourceQuotaScope
				yyc4806 = true
			}
			yyh4806.ElemContainerState(yyj4806)
			if yyj4806 < len(yyv4806) {
				if r.TryDecodeAsNil() {
					yyv4806[yyj4806] = ""
				} else {
					yyv4806[yyj4806] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4806 < len(yyv4806) {
			yyv4806 = yyv4806[:yyj4806]
			yyc4806 = true
		} else if yyj4806 == 0 && yyv4806 == nil {
			yyv4806 = []ResourceQuotaScope{}
			yyc4806 = true
		}
	}
	yyh4806.End()
	if yyc4806 {
		*v = yyv4806
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4810 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4811 := &yyv4810
		yy4811.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4812 := *v
	yyh4812, yyl4812 := z.DecSliceHelperStart()
	var yyc4812 bool
	if yyl4812 == 0 {
		if yyv4812 == nil {
			yyv4812 = []ResourceQuota{}
			yyc4812 = true
		} else if len(yyv4812) != 0 {
			yyv4812 = yyv4812[:0]
			yyc4812 = true
		}
	} else if yyl4812 > 0 {
		var yyrr4812, yyrl4812 int
		var yyrt4812 bool
		if yyl4812 > cap(yyv4812) {

			yyrg4812 := len(yyv4812) > 0
			yyv24812 := yyv4812
			yyrl4812, yyrt4812 = z.DecInferLen(yyl4812, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4812 {
				if yyrl4812 <= cap(yyv4812) {
					yyv4812 = yyv4812[:yyrl4812]
				} else {
					yyv4812 = make([]ResourceQuota, yyrl4812)
				}
			} else {
				yyv4812 = make([]ResourceQuota, yyrl4812)
			}
			yyc4812 = true
			yyrr4812 = len(yyv4812)
			if yyrg4812 {
				copy(yyv4812, yyv24812)
			}
		} else if yyl4812 != len(yyv4812) {
			yyv4812 = yyv4812[:yyl4812]
			yyc4812 = true
		}
		yyj4812 := 0
		for ; yyj4812 < yyrr4812; yyj4812++ {
			yyh4812.ElemContainerState(yyj4812)
			if r.TryDecodeAsNil() {
				yyv4812[yyj4812] = ResourceQuota{}
			} else {
				yyv4813 := &yyv4812[yyj4812]
				yyv4813.CodecDecodeSelf(d)
			}

		}
		if yyrt4812 {
			for ; yyj4812 < yyl4812; yyj4812++ {
				yyv4812 = append(yyv4812, ResourceQuota{})
				yyh4812.ElemContainerState(yyj4812)
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = ResourceQuota{}
				} else {
					yyv4814 := &yyv4812[yyj4812]
					yyv4814.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4812 := 0
		for ; !r.CheckBreak(); yyj4812++ {

			if yyj4812 >= len(yyv4812) {
				yyv4812 = append(yyv4812, ResourceQuota{}) // var yyz4812 ResourceQuota
				yyc4812 = true
			}
			yyh4812.ElemContainerState(yyj4812)
			if yyj4812 < len(yyv4812) {
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = ResourceQuota{}
				} else {
					yyv4815 := &yyv4812[yyj4812]
					yyv4815.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4812 < len(yyv4812) {
			yyv4812 = yyv4812[:yyj4812]
			yyc4812 = true
		} else if yyj4812 == 0 && yyv4812 == nil {
			yyv4812 = []ResourceQuota{}
			yyc4812 = true
		}
	}
	yyh4812.End()
	if yyc4812 {
		*v = yyv4812
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4816, yyv4816 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4817 := z.EncBinary()
		_ = yym4817
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4816))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4816 == nil {
			r.EncodeNil()
		} else {
			yym4818 := z.EncBinary()
			_ = yym4818
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4816))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4819 := *v
	yyl4819 := r.ReadMapStart()
	yybh4819 := z.DecBasicHandle()
	if yyv4819 == nil {
		yyrl4819, _ := z.DecInferLen(yyl4819, yybh4819.MaxInitLen, 40)
		yyv4819 = make(map[string][]uint8, yyrl4819)
		*v = yyv4819
	}
	var yymk4819 string
	var yymv4819 []uint8
	var yymg4819 bool
	if yybh4819.MapValueReset {
		yymg4819 = true
	}
	if yyl4819 > 0 {
		for yyj4819 := 0; yyj4819 < yyl4819; yyj4819++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4819 = ""
			} else {
				yymk4819 = string(r.DecodeString())
			}

			if yymg4819 {
				yymv4819 = yyv4819[yymk4819]
			} else {
				yymv4819 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4819 = nil
			} else {
				yyv4821 := &yymv4819
				yym4822 := z.DecBinary()
				_ = yym4822
				if false {
				} else {
					*yyv4821 = r.DecodeBytes(*(*[]byte)(yyv4821), false, false)
				}
			}

			if yyv4819 != nil {
				yyv4819[yymk4819] = yymv4819
			}
		}
	} else if yyl4819 < 0 {
		for yyj4819 := 0; !r.CheckBreak(); yyj4819++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4819 = ""
			} else {
				yymk4819 = string(r.DecodeString())
			}

			if yymg4819 {
				yymv4819 = yyv4819[yymk4819]
			} else {
				yymv4819 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4819 = nil
			} else {
				yyv4824 := &yymv4819
				yym4825 := z.DecBinary()
				_ = yym4825
				if false {
				} else {
					*yyv4824 = r.DecodeBytes(*(*[]byte)(yyv4824), false, false)
				}
			}

			if yyv4819 != nil {
				yyv4819[yymk4819] = yymv4819
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4826 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4827 := &yyv4826
		yy4827.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4828 := *v
	yyh4828, yyl4828 := z.DecSliceHelperStart()
	var yyc4828 bool
	if yyl4828 == 0 {
		if yyv4828 == nil {
			yyv4828 = []Secret{}
			yyc4828 = true
		} else if len(yyv4828) != 0 {
			yyv4828 = yyv4828[:0]
			yyc4828 = true
		}
	} else if yyl4828 > 0 {
		var yyrr4828, yyrl4828 int
		var yyrt4828 bool
		if yyl4828 > cap(yyv4828) {

			yyrg4828 := len(yyv4828) > 0
			yyv24828 := yyv4828
			yyrl4828, yyrt4828 = z.DecInferLen(yyl4828, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4828 {
				if yyrl4828 <= cap(yyv4828) {
					yyv4828 = yyv4828[:yyrl4828]
				} else {
					yyv4828 = make([]Secret, yyrl4828)
				}
			} else {
				yyv4828 = make([]Secret, yyrl4828)
			}
			yyc4828 = true
			yyrr4828 = len(yyv4828)
			if yyrg4828 {
				copy(yyv4828, yyv24828)
			}
		} else if yyl4828 != len(yyv4828) {
			yyv4828 = yyv4828[:yyl4828]
			yyc4828 = true
		}
		yyj4828 := 0
		for ; yyj4828 < yyrr4828; yyj4828++ {
			yyh4828.ElemContainerState(yyj4828)
			if r.TryDecodeAsNil() {
				yyv4828[yyj4828] = Secret{}
			} else {
				yyv4829 := &yyv4828[yyj4828]
				yyv4829.CodecDecodeSelf(d)
			}

		}
		if yyrt4828 {
			for ; yyj4828 < yyl4828; yyj4828++ {
				yyv4828 = append(yyv4828, Secret{})
				yyh4828.ElemContainerState(yyj4828)
				if r.TryDecodeAsNil() {
					yyv4828[yyj4828] = Secret{}
				} else {
					yyv4830 := &yyv4828[yyj4828]
					yyv4830.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4828 := 0
		for ; !r.CheckBreak(); yyj4828++ {

			if yyj4828 >= len(yyv4828) {
				yyv4828 = append(yyv4828, Secret{}) // var yyz4828 Secret
				yyc4828 = true
			}
			yyh4828.ElemContainerState(yyj4828)
			if yyj4828 < len(yyv4828) {
				if r.TryDecodeAsNil() {
					yyv4828[yyj4828] = Secret{}
				} else {
					yyv4831 := &yyv4828[yyj4828]
					yyv4831.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4828 < len(yyv4828) {
			yyv4828 = yyv4828[:yyj4828]
			yyc4828 = true
		} else if yyj4828 == 0 && yyv4828 == nil {
			yyv4828 = []Secret{}
			yyc4828 = true
		}
	}
	yyh4828.End()
	if yyc4828 {
		*v = yyv4828
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4832 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4833 := &yyv4832
		yy4833.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4834 := *v
	yyh4834, yyl4834 := z.DecSliceHelperStart()
	var yyc4834 bool
	if yyl4834 == 0 {
		if yyv4834 == nil {
			yyv4834 = []ConfigMap{}
			yyc4834 = true
		} else if len(yyv4834) != 0 {
			yyv4834 = yyv4834[:0]
			yyc4834 = true
		}
	} else if yyl4834 > 0 {
		var yyrr4834, yyrl4834 int
		var yyrt4834 bool
		if yyl4834 > cap(yyv4834) {

			yyrg4834 := len(yyv4834) > 0
			yyv24834 := yyv4834
			yyrl4834, yyrt4834 = z.DecInferLen(yyl4834, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4834 {
				if yyrl4834 <= cap(yyv4834) {
					yyv4834 = yyv4834[:yyrl4834]
				} else {
					yyv4834 = make([]ConfigMap, yyrl4834)
				}
			} else {
				yyv4834 = make([]ConfigMap, yyrl4834)
			}
			yyc4834 = true
			yyrr4834 = len(yyv4834)
			if yyrg4834 {
				copy(yyv4834, yyv24834)
			}
		} else if yyl4834 != len(yyv4834) {
			yyv4834 = yyv4834[:yyl4834]
			yyc4834 = true
		}
		yyj4834 := 0
		for ; yyj4834 < yyrr4834; yyj4834++ {
			yyh4834.ElemContainerState(yyj4834)
			if r.TryDecodeAsNil() {
				yyv4834[yyj4834] = ConfigMap{}
			} else {
				yyv4835 := &yyv4834[yyj4834]
				yyv4835.CodecDecodeSelf(d)
			}

		}
		if yyrt4834 {
			for ; yyj4834 < yyl4834; yyj4834++ {
				yyv4834 = append(yyv4834, ConfigMap{})
				yyh4834.ElemContainerState(yyj4834)
				if r.TryDecodeAsNil() {
					yyv4834[yyj4834] = ConfigMap{}
				} else {
					yyv4836 := &yyv4834[yyj4834]
					yyv4836.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4834 := 0
		for ; !r.CheckBreak(); yyj4834++ {

			if yyj4834 >= len(yyv4834) {
				yyv4834 = append(yyv4834, ConfigMap{}) // var yyz4834 ConfigMap
				yyc4834 = true
			}
			yyh4834.ElemContainerState(yyj4834)
			if yyj4834 < len(yyv4834) {
				if r.TryDecodeAsNil() {
					yyv4834[yyj4834] = ConfigMap{}
				} else {
					yyv4837 := &yyv4834[yyj4834]
					yyv4837.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4834 < len(yyv4834) {
			yyv4834 = yyv4834[:yyj4834]
			yyc4834 = true
		} else if yyj4834 == 0 && yyv4834 == nil {
			yyv4834 = []ConfigMap{}
			yyc4834 = true
		}
	}
	yyh4834.End()
	if yyc4834 {
		*v = yyv4834
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4838 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4839 := &yyv4838
		yy4839.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4840 := *v
	yyh4840, yyl4840 := z.DecSliceHelperStart()
	var yyc4840 bool
	if yyl4840 == 0 {
		if yyv4840 == nil {
			yyv4840 = []ComponentCondition{}
			yyc4840 = true
		} else if len(yyv4840) != 0 {
			yyv4840 = yyv4840[:0]
			yyc4840 = true
		}
	} else if yyl4840 > 0 {
		var yyrr4840, yyrl4840 int
		var yyrt4840 bool
		if yyl4840 > cap(yyv4840) {

			yyrg4840 := len(yyv4840) > 0
			yyv24840 := yyv4840
			yyrl4840, yyrt4840 = z.DecInferLen(yyl4840, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4840 {
				if yyrl4840 <= cap(yyv4840) {
					yyv4840 = yyv4840[:yyrl4840]
				} else {
					yyv4840 = make([]ComponentCondition, yyrl4840)
				}
			} else {
				yyv4840 = make([]ComponentCondition, yyrl4840)
			}
			yyc4840 = true
			yyrr4840 = len(yyv4840)
			if yyrg4840 {
				copy(yyv4840, yyv24840)
			}
		} else if yyl4840 != len(yyv4840) {
			yyv4840 = yyv4840[:yyl4840]
			yyc4840 = true
		}
		yyj4840 := 0
		for ; yyj4840 < yyrr4840; yyj4840++ {
			yyh4840.ElemContainerState(yyj4840)
			if r.TryDecodeAsNil() {
				yyv4840[yyj4840] = ComponentCondition{}
			} else {
				yyv4841 := &yyv4840[yyj4840]
				yyv4841.CodecDecodeSelf(d)
			}

		}
		if yyrt4840 {
			for ; yyj4840 < yyl4840; yyj4840++ {
				yyv4840 = append(yyv4840, ComponentCondition{})
				yyh4840.ElemContainerState(yyj4840)
				if r.TryDecodeAsNil() {
					yyv4840[yyj4840] = ComponentCondition{}
				} else {
					yyv4842 := &yyv4840[yyj4840]
					yyv4842.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4840 := 0
		for ; !r.CheckBreak(); yyj4840++ {

			if yyj4840 >= len(yyv4840) {
				yyv4840 = append(yyv4840, ComponentCondition{}) // var yyz4840 ComponentCondition
				yyc4840 = true
			}
			yyh4840.ElemContainerState(yyj4840)
			if yyj4840 < len(yyv4840) {
				if r.TryDecodeAsNil() {
					yyv4840[yyj4840] = ComponentCondition{}
				} else {
					yyv4843 := &yyv4840[yyj4840]
					yyv4843.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4840 < len(yyv4840) {
			yyv4840 = yyv4840[:yyj4840]
			yyc4840 = true
		} else if yyj4840 == 0 && yyv4840 == nil {
			yyv4840 = []ComponentCondition{}
			yyc4840 = true
		}
	}
	yyh4840.End()
	if yyc4840 {
		*v = yyv4840
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4844 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4845 := &yyv4844
		yy4845.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4846 := *v
	yyh4846, yyl4846 := z.DecSliceHelperStart()
	var yyc4846 bool
	if yyl4846 == 0 {
		if yyv4846 == nil {
			yyv4846 = []ComponentStatus{}
			yyc4846 = true
		} else if len(yyv4846) != 0 {
			yyv4846 = yyv4846[:0]
			yyc4846 = true
		}
	} else if yyl4846 > 0 {
		var yyrr4846, yyrl4846 int
		var yyrt4846 bool
		if yyl4846 > cap(yyv4846) {

			yyrg4846 := len(yyv4846) > 0
			yyv24846 := yyv4846
			yyrl4846, yyrt4846 = z.DecInferLen(yyl4846, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4846 {
				if yyrl4846 <= cap(yyv4846) {
					yyv4846 = yyv4846[:yyrl4846]
				} else {
					yyv4846 = make([]ComponentStatus, yyrl4846)
				}
			} else {
				yyv4846 = make([]ComponentStatus, yyrl4846)
			}
			yyc4846 = true
			yyrr4846 = len(yyv4846)
			if yyrg4846 {
				copy(yyv4846, yyv24846)
			}
		} else if yyl4846 != len(yyv4846) {
			yyv4846 = yyv4846[:yyl4846]
			yyc4846 = true
		}
		yyj4846 := 0
		for ; yyj4846 < yyrr4846; yyj4846++ {
			yyh4846.ElemContainerState(yyj4846)
			if r.TryDecodeAsNil() {
				yyv4846[yyj4846] = ComponentStatus{}
			} else {
				yyv4847 := &yyv4846[yyj4846]
				yyv4847.CodecDecodeSelf(d)
			}

		}
		if yyrt4846 {
			for ; yyj4846 < yyl4846; yyj4846++ {
				yyv4846 = append(yyv4846, ComponentStatus{})
				yyh4846.ElemContainerState(yyj4846)
				if r.TryDecodeAsNil() {
					yyv4846[yyj4846] = ComponentStatus{}
				} else {
					yyv4848 := &yyv4846[yyj4846]
					yyv4848.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4846 := 0
		for ; !r.CheckBreak(); yyj4846++ {

			if yyj4846 >= len(yyv4846) {
				yyv4846 = append(yyv4846, ComponentStatus{}) // var yyz4846 ComponentStatus
				yyc4846 = true
			}
			yyh4846.ElemContainerState(yyj4846)
			if yyj4846 < len(yyv4846) {
				if r.TryDecodeAsNil() {
					yyv4846[yyj4846] = ComponentStatus{}
				} else {
					yyv4849 := &yyv4846[yyj4846]
					yyv4849.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4846 < len(yyv4846) {
			yyv4846 = yyv4846[:yyj4846]
			yyc4846 = true
		} else if yyj4846 == 0 && yyv4846 == nil {
			yyv4846 = []ComponentStatus{}
			yyc4846 = true
		}
	}
	yyh4846.End()
	if yyc4846 {
		*v = yyv4846
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4850 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4851 := &yyv4850
		yy4851.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4852 := *v
	yyh4852, yyl4852 := z.DecSliceHelperStart()
	var yyc4852 bool
	if yyl4852 == 0 {
		if yyv4852 == nil {
			yyv4852 = []DownwardAPIVolumeFile{}
			yyc4852 = true
		} else if len(yyv4852) != 0 {
			yyv4852 = yyv4852[:0]
			yyc4852 = true
		}
	} else if yyl4852 > 0 {
		var yyrr4852, yyrl4852 int
		var yyrt4852 bool
		if yyl4852 > cap(yyv4852) {

			yyrg4852 := len(yyv4852) > 0
			yyv24852 := yyv4852
			yyrl4852, yyrt4852 = z.DecInferLen(yyl4852, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4852 {
				if yyrl4852 <= cap(yyv4852) {
					yyv4852 = yyv4852[:yyrl4852]
				} else {
					yyv4852 = make([]DownwardAPIVolumeFile, yyrl4852)
				}
			} else {
				yyv4852 = make([]DownwardAPIVolumeFile, yyrl4852)
			}
			yyc4852 = true
			yyrr4852 = len(yyv4852)
			if yyrg4852 {
				copy(yyv4852, yyv24852)
			}
		} else if yyl4852 != len(yyv4852) {
			yyv4852 = yyv4852[:yyl4852]
			yyc4852 = true
		}
		yyj4852 := 0
		for ; yyj4852 < yyrr4852; yyj4852++ {
			yyh4852.ElemContainerState(yyj4852)
			if r.TryDecodeAsNil() {
				yyv4852[yyj4852] = DownwardAPIVolumeFile{}
			} else {
				yyv4853 := &yyv4852[yyj4852]
				yyv4853.CodecDecodeSelf(d)
			}

		}
		if yyrt4852 {
			for ; yyj4852 < yyl4852; yyj4852++ {
				yyv4852 = append(yyv4852, DownwardAPIVolumeFile{})
				yyh4852.ElemContainerState(yyj4852)
				if r.TryDecodeAsNil() {
					yyv4852[yyj4852] = DownwardAPIVolumeFile{}
				} else {
					yyv4854 := &yyv4852[yyj4852]
					yyv4854.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4852 := 0
		for ; !r.CheckBreak(); yyj4852++ {

			if yyj4852 >= len(yyv4852) {
				yyv4852 = append(yyv4852, DownwardAPIVolumeFile{}) // var yyz4852 DownwardAPIVolumeFile
				yyc4852 = true
			}
			yyh4852.ElemContainerState(yyj4852)
			if yyj4852 < len(yyv4852) {
				if r.TryDecodeAsNil() {
					yyv4852[yyj4852] = DownwardAPIVolumeFile{}
				} else {
					yyv4855 := &yyv4852[yyj4852]
					yyv4855.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4852 < len(yyv4852) {
			yyv4852 = yyv4852[:yyj4852]
			yyc4852 = true
		} else if yyj4852 == 0 && yyv4852 == nil {
			yyv4852 = []DownwardAPIVolumeFile{}
			yyc4852 = true
		}
	}
	yyh4852.End()
	if yyc4852 {
		*v = yyv4852
	}
}
